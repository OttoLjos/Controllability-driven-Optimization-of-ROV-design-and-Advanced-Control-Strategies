
Reg.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b78c  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000348  0800b918  0800b918  0001b918  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bc60  0800bc60  000200a8  2**0
                  CONTENTS
  4 .ARM          00000008  0800bc60  0800bc60  0001bc60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bc68  0800bc68  000200a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bc68  0800bc68  0001bc68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bc6c  0800bc6c  0001bc6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a8  20000000  0800bc70  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200a8  2**0
                  CONTENTS
 10 .bss          000013c0  200000a8  200000a8  000200a8  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20001468  20001468  000200a8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002522f  00000000  00000000  000200d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004fb3  00000000  00000000  00045307  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loc    00013d40  00000000  00000000  0004a2ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001430  00000000  00000000  0005e000  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00001938  00000000  00000000  0005f430  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00026acb  00000000  00000000  00060d68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00023f37  00000000  00000000  00087833  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d4c8e  00000000  00000000  000ab76a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  001803f8  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00003e48  00000000  00000000  00180448  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200000a8 	.word	0x200000a8
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800b8fc 	.word	0x0800b8fc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200000ac 	.word	0x200000ac
 80001c4:	0800b8fc 	.word	0x0800b8fc

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpun>:
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	d102      	bne.n	8000a84 <__aeabi_dcmpun+0x10>
 8000a7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a82:	d10a      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x20>
 8000a8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a92:	d102      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	f04f 0001 	mov.w	r0, #1
 8000a9e:	4770      	bx	lr

08000aa0 <__aeabi_d2iz>:
 8000aa0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000aa8:	d215      	bcs.n	8000ad6 <__aeabi_d2iz+0x36>
 8000aaa:	d511      	bpl.n	8000ad0 <__aeabi_d2iz+0x30>
 8000aac:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ab0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ab4:	d912      	bls.n	8000adc <__aeabi_d2iz+0x3c>
 8000ab6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000abe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ac2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ac6:	fa23 f002 	lsr.w	r0, r3, r2
 8000aca:	bf18      	it	ne
 8000acc:	4240      	negne	r0, r0
 8000ace:	4770      	bx	lr
 8000ad0:	f04f 0000 	mov.w	r0, #0
 8000ad4:	4770      	bx	lr
 8000ad6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ada:	d105      	bne.n	8000ae8 <__aeabi_d2iz+0x48>
 8000adc:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ae0:	bf08      	it	eq
 8000ae2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ae6:	4770      	bx	lr
 8000ae8:	f04f 0000 	mov.w	r0, #0
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop

08000af0 <__aeabi_d2f>:
 8000af0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000af4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000af8:	bf24      	itt	cs
 8000afa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000afe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b02:	d90d      	bls.n	8000b20 <__aeabi_d2f+0x30>
 8000b04:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b08:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b0c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b10:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b14:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b18:	bf08      	it	eq
 8000b1a:	f020 0001 	biceq.w	r0, r0, #1
 8000b1e:	4770      	bx	lr
 8000b20:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b24:	d121      	bne.n	8000b6a <__aeabi_d2f+0x7a>
 8000b26:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b2a:	bfbc      	itt	lt
 8000b2c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b30:	4770      	bxlt	lr
 8000b32:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b36:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b3a:	f1c2 0218 	rsb	r2, r2, #24
 8000b3e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b42:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b46:	fa20 f002 	lsr.w	r0, r0, r2
 8000b4a:	bf18      	it	ne
 8000b4c:	f040 0001 	orrne.w	r0, r0, #1
 8000b50:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b54:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b58:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b5c:	ea40 000c 	orr.w	r0, r0, ip
 8000b60:	fa23 f302 	lsr.w	r3, r3, r2
 8000b64:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b68:	e7cc      	b.n	8000b04 <__aeabi_d2f+0x14>
 8000b6a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b6e:	d107      	bne.n	8000b80 <__aeabi_d2f+0x90>
 8000b70:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b74:	bf1e      	ittt	ne
 8000b76:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b7a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b7e:	4770      	bxne	lr
 8000b80:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b84:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b88:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop

08000b90 <__aeabi_uldivmod>:
 8000b90:	b953      	cbnz	r3, 8000ba8 <__aeabi_uldivmod+0x18>
 8000b92:	b94a      	cbnz	r2, 8000ba8 <__aeabi_uldivmod+0x18>
 8000b94:	2900      	cmp	r1, #0
 8000b96:	bf08      	it	eq
 8000b98:	2800      	cmpeq	r0, #0
 8000b9a:	bf1c      	itt	ne
 8000b9c:	f04f 31ff 	movne.w	r1, #4294967295
 8000ba0:	f04f 30ff 	movne.w	r0, #4294967295
 8000ba4:	f000 b974 	b.w	8000e90 <__aeabi_idiv0>
 8000ba8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bb0:	f000 f806 	bl	8000bc0 <__udivmoddi4>
 8000bb4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bb8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bbc:	b004      	add	sp, #16
 8000bbe:	4770      	bx	lr

08000bc0 <__udivmoddi4>:
 8000bc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bc4:	9d08      	ldr	r5, [sp, #32]
 8000bc6:	4604      	mov	r4, r0
 8000bc8:	468e      	mov	lr, r1
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d14d      	bne.n	8000c6a <__udivmoddi4+0xaa>
 8000bce:	428a      	cmp	r2, r1
 8000bd0:	4694      	mov	ip, r2
 8000bd2:	d969      	bls.n	8000ca8 <__udivmoddi4+0xe8>
 8000bd4:	fab2 f282 	clz	r2, r2
 8000bd8:	b152      	cbz	r2, 8000bf0 <__udivmoddi4+0x30>
 8000bda:	fa01 f302 	lsl.w	r3, r1, r2
 8000bde:	f1c2 0120 	rsb	r1, r2, #32
 8000be2:	fa20 f101 	lsr.w	r1, r0, r1
 8000be6:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bea:	ea41 0e03 	orr.w	lr, r1, r3
 8000bee:	4094      	lsls	r4, r2
 8000bf0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000bf4:	0c21      	lsrs	r1, r4, #16
 8000bf6:	fbbe f6f8 	udiv	r6, lr, r8
 8000bfa:	fa1f f78c 	uxth.w	r7, ip
 8000bfe:	fb08 e316 	mls	r3, r8, r6, lr
 8000c02:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c06:	fb06 f107 	mul.w	r1, r6, r7
 8000c0a:	4299      	cmp	r1, r3
 8000c0c:	d90a      	bls.n	8000c24 <__udivmoddi4+0x64>
 8000c0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c12:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c16:	f080 811f 	bcs.w	8000e58 <__udivmoddi4+0x298>
 8000c1a:	4299      	cmp	r1, r3
 8000c1c:	f240 811c 	bls.w	8000e58 <__udivmoddi4+0x298>
 8000c20:	3e02      	subs	r6, #2
 8000c22:	4463      	add	r3, ip
 8000c24:	1a5b      	subs	r3, r3, r1
 8000c26:	b2a4      	uxth	r4, r4
 8000c28:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c2c:	fb08 3310 	mls	r3, r8, r0, r3
 8000c30:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c34:	fb00 f707 	mul.w	r7, r0, r7
 8000c38:	42a7      	cmp	r7, r4
 8000c3a:	d90a      	bls.n	8000c52 <__udivmoddi4+0x92>
 8000c3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000c40:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c44:	f080 810a 	bcs.w	8000e5c <__udivmoddi4+0x29c>
 8000c48:	42a7      	cmp	r7, r4
 8000c4a:	f240 8107 	bls.w	8000e5c <__udivmoddi4+0x29c>
 8000c4e:	4464      	add	r4, ip
 8000c50:	3802      	subs	r0, #2
 8000c52:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c56:	1be4      	subs	r4, r4, r7
 8000c58:	2600      	movs	r6, #0
 8000c5a:	b11d      	cbz	r5, 8000c64 <__udivmoddi4+0xa4>
 8000c5c:	40d4      	lsrs	r4, r2
 8000c5e:	2300      	movs	r3, #0
 8000c60:	e9c5 4300 	strd	r4, r3, [r5]
 8000c64:	4631      	mov	r1, r6
 8000c66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c6a:	428b      	cmp	r3, r1
 8000c6c:	d909      	bls.n	8000c82 <__udivmoddi4+0xc2>
 8000c6e:	2d00      	cmp	r5, #0
 8000c70:	f000 80ef 	beq.w	8000e52 <__udivmoddi4+0x292>
 8000c74:	2600      	movs	r6, #0
 8000c76:	e9c5 0100 	strd	r0, r1, [r5]
 8000c7a:	4630      	mov	r0, r6
 8000c7c:	4631      	mov	r1, r6
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	fab3 f683 	clz	r6, r3
 8000c86:	2e00      	cmp	r6, #0
 8000c88:	d14a      	bne.n	8000d20 <__udivmoddi4+0x160>
 8000c8a:	428b      	cmp	r3, r1
 8000c8c:	d302      	bcc.n	8000c94 <__udivmoddi4+0xd4>
 8000c8e:	4282      	cmp	r2, r0
 8000c90:	f200 80f9 	bhi.w	8000e86 <__udivmoddi4+0x2c6>
 8000c94:	1a84      	subs	r4, r0, r2
 8000c96:	eb61 0303 	sbc.w	r3, r1, r3
 8000c9a:	2001      	movs	r0, #1
 8000c9c:	469e      	mov	lr, r3
 8000c9e:	2d00      	cmp	r5, #0
 8000ca0:	d0e0      	beq.n	8000c64 <__udivmoddi4+0xa4>
 8000ca2:	e9c5 4e00 	strd	r4, lr, [r5]
 8000ca6:	e7dd      	b.n	8000c64 <__udivmoddi4+0xa4>
 8000ca8:	b902      	cbnz	r2, 8000cac <__udivmoddi4+0xec>
 8000caa:	deff      	udf	#255	; 0xff
 8000cac:	fab2 f282 	clz	r2, r2
 8000cb0:	2a00      	cmp	r2, #0
 8000cb2:	f040 8092 	bne.w	8000dda <__udivmoddi4+0x21a>
 8000cb6:	eba1 010c 	sub.w	r1, r1, ip
 8000cba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cbe:	fa1f fe8c 	uxth.w	lr, ip
 8000cc2:	2601      	movs	r6, #1
 8000cc4:	0c20      	lsrs	r0, r4, #16
 8000cc6:	fbb1 f3f7 	udiv	r3, r1, r7
 8000cca:	fb07 1113 	mls	r1, r7, r3, r1
 8000cce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cd2:	fb0e f003 	mul.w	r0, lr, r3
 8000cd6:	4288      	cmp	r0, r1
 8000cd8:	d908      	bls.n	8000cec <__udivmoddi4+0x12c>
 8000cda:	eb1c 0101 	adds.w	r1, ip, r1
 8000cde:	f103 38ff 	add.w	r8, r3, #4294967295
 8000ce2:	d202      	bcs.n	8000cea <__udivmoddi4+0x12a>
 8000ce4:	4288      	cmp	r0, r1
 8000ce6:	f200 80cb 	bhi.w	8000e80 <__udivmoddi4+0x2c0>
 8000cea:	4643      	mov	r3, r8
 8000cec:	1a09      	subs	r1, r1, r0
 8000cee:	b2a4      	uxth	r4, r4
 8000cf0:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cf4:	fb07 1110 	mls	r1, r7, r0, r1
 8000cf8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000cfc:	fb0e fe00 	mul.w	lr, lr, r0
 8000d00:	45a6      	cmp	lr, r4
 8000d02:	d908      	bls.n	8000d16 <__udivmoddi4+0x156>
 8000d04:	eb1c 0404 	adds.w	r4, ip, r4
 8000d08:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d0c:	d202      	bcs.n	8000d14 <__udivmoddi4+0x154>
 8000d0e:	45a6      	cmp	lr, r4
 8000d10:	f200 80bb 	bhi.w	8000e8a <__udivmoddi4+0x2ca>
 8000d14:	4608      	mov	r0, r1
 8000d16:	eba4 040e 	sub.w	r4, r4, lr
 8000d1a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d1e:	e79c      	b.n	8000c5a <__udivmoddi4+0x9a>
 8000d20:	f1c6 0720 	rsb	r7, r6, #32
 8000d24:	40b3      	lsls	r3, r6
 8000d26:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d2a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d2e:	fa20 f407 	lsr.w	r4, r0, r7
 8000d32:	fa01 f306 	lsl.w	r3, r1, r6
 8000d36:	431c      	orrs	r4, r3
 8000d38:	40f9      	lsrs	r1, r7
 8000d3a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d3e:	fa00 f306 	lsl.w	r3, r0, r6
 8000d42:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d46:	0c20      	lsrs	r0, r4, #16
 8000d48:	fa1f fe8c 	uxth.w	lr, ip
 8000d4c:	fb09 1118 	mls	r1, r9, r8, r1
 8000d50:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d54:	fb08 f00e 	mul.w	r0, r8, lr
 8000d58:	4288      	cmp	r0, r1
 8000d5a:	fa02 f206 	lsl.w	r2, r2, r6
 8000d5e:	d90b      	bls.n	8000d78 <__udivmoddi4+0x1b8>
 8000d60:	eb1c 0101 	adds.w	r1, ip, r1
 8000d64:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d68:	f080 8088 	bcs.w	8000e7c <__udivmoddi4+0x2bc>
 8000d6c:	4288      	cmp	r0, r1
 8000d6e:	f240 8085 	bls.w	8000e7c <__udivmoddi4+0x2bc>
 8000d72:	f1a8 0802 	sub.w	r8, r8, #2
 8000d76:	4461      	add	r1, ip
 8000d78:	1a09      	subs	r1, r1, r0
 8000d7a:	b2a4      	uxth	r4, r4
 8000d7c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d80:	fb09 1110 	mls	r1, r9, r0, r1
 8000d84:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000d88:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d8c:	458e      	cmp	lr, r1
 8000d8e:	d908      	bls.n	8000da2 <__udivmoddi4+0x1e2>
 8000d90:	eb1c 0101 	adds.w	r1, ip, r1
 8000d94:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d98:	d26c      	bcs.n	8000e74 <__udivmoddi4+0x2b4>
 8000d9a:	458e      	cmp	lr, r1
 8000d9c:	d96a      	bls.n	8000e74 <__udivmoddi4+0x2b4>
 8000d9e:	3802      	subs	r0, #2
 8000da0:	4461      	add	r1, ip
 8000da2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000da6:	fba0 9402 	umull	r9, r4, r0, r2
 8000daa:	eba1 010e 	sub.w	r1, r1, lr
 8000dae:	42a1      	cmp	r1, r4
 8000db0:	46c8      	mov	r8, r9
 8000db2:	46a6      	mov	lr, r4
 8000db4:	d356      	bcc.n	8000e64 <__udivmoddi4+0x2a4>
 8000db6:	d053      	beq.n	8000e60 <__udivmoddi4+0x2a0>
 8000db8:	b15d      	cbz	r5, 8000dd2 <__udivmoddi4+0x212>
 8000dba:	ebb3 0208 	subs.w	r2, r3, r8
 8000dbe:	eb61 010e 	sbc.w	r1, r1, lr
 8000dc2:	fa01 f707 	lsl.w	r7, r1, r7
 8000dc6:	fa22 f306 	lsr.w	r3, r2, r6
 8000dca:	40f1      	lsrs	r1, r6
 8000dcc:	431f      	orrs	r7, r3
 8000dce:	e9c5 7100 	strd	r7, r1, [r5]
 8000dd2:	2600      	movs	r6, #0
 8000dd4:	4631      	mov	r1, r6
 8000dd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dda:	f1c2 0320 	rsb	r3, r2, #32
 8000dde:	40d8      	lsrs	r0, r3
 8000de0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000de4:	fa21 f303 	lsr.w	r3, r1, r3
 8000de8:	4091      	lsls	r1, r2
 8000dea:	4301      	orrs	r1, r0
 8000dec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000df0:	fa1f fe8c 	uxth.w	lr, ip
 8000df4:	fbb3 f0f7 	udiv	r0, r3, r7
 8000df8:	fb07 3610 	mls	r6, r7, r0, r3
 8000dfc:	0c0b      	lsrs	r3, r1, #16
 8000dfe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e02:	fb00 f60e 	mul.w	r6, r0, lr
 8000e06:	429e      	cmp	r6, r3
 8000e08:	fa04 f402 	lsl.w	r4, r4, r2
 8000e0c:	d908      	bls.n	8000e20 <__udivmoddi4+0x260>
 8000e0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e12:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e16:	d22f      	bcs.n	8000e78 <__udivmoddi4+0x2b8>
 8000e18:	429e      	cmp	r6, r3
 8000e1a:	d92d      	bls.n	8000e78 <__udivmoddi4+0x2b8>
 8000e1c:	3802      	subs	r0, #2
 8000e1e:	4463      	add	r3, ip
 8000e20:	1b9b      	subs	r3, r3, r6
 8000e22:	b289      	uxth	r1, r1
 8000e24:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e28:	fb07 3316 	mls	r3, r7, r6, r3
 8000e2c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e30:	fb06 f30e 	mul.w	r3, r6, lr
 8000e34:	428b      	cmp	r3, r1
 8000e36:	d908      	bls.n	8000e4a <__udivmoddi4+0x28a>
 8000e38:	eb1c 0101 	adds.w	r1, ip, r1
 8000e3c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e40:	d216      	bcs.n	8000e70 <__udivmoddi4+0x2b0>
 8000e42:	428b      	cmp	r3, r1
 8000e44:	d914      	bls.n	8000e70 <__udivmoddi4+0x2b0>
 8000e46:	3e02      	subs	r6, #2
 8000e48:	4461      	add	r1, ip
 8000e4a:	1ac9      	subs	r1, r1, r3
 8000e4c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e50:	e738      	b.n	8000cc4 <__udivmoddi4+0x104>
 8000e52:	462e      	mov	r6, r5
 8000e54:	4628      	mov	r0, r5
 8000e56:	e705      	b.n	8000c64 <__udivmoddi4+0xa4>
 8000e58:	4606      	mov	r6, r0
 8000e5a:	e6e3      	b.n	8000c24 <__udivmoddi4+0x64>
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	e6f8      	b.n	8000c52 <__udivmoddi4+0x92>
 8000e60:	454b      	cmp	r3, r9
 8000e62:	d2a9      	bcs.n	8000db8 <__udivmoddi4+0x1f8>
 8000e64:	ebb9 0802 	subs.w	r8, r9, r2
 8000e68:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e6c:	3801      	subs	r0, #1
 8000e6e:	e7a3      	b.n	8000db8 <__udivmoddi4+0x1f8>
 8000e70:	4646      	mov	r6, r8
 8000e72:	e7ea      	b.n	8000e4a <__udivmoddi4+0x28a>
 8000e74:	4620      	mov	r0, r4
 8000e76:	e794      	b.n	8000da2 <__udivmoddi4+0x1e2>
 8000e78:	4640      	mov	r0, r8
 8000e7a:	e7d1      	b.n	8000e20 <__udivmoddi4+0x260>
 8000e7c:	46d0      	mov	r8, sl
 8000e7e:	e77b      	b.n	8000d78 <__udivmoddi4+0x1b8>
 8000e80:	3b02      	subs	r3, #2
 8000e82:	4461      	add	r1, ip
 8000e84:	e732      	b.n	8000cec <__udivmoddi4+0x12c>
 8000e86:	4630      	mov	r0, r6
 8000e88:	e709      	b.n	8000c9e <__udivmoddi4+0xde>
 8000e8a:	4464      	add	r4, ip
 8000e8c:	3802      	subs	r0, #2
 8000e8e:	e742      	b.n	8000d16 <__udivmoddi4+0x156>

08000e90 <__aeabi_idiv0>:
 8000e90:	4770      	bx	lr
 8000e92:	bf00      	nop

08000e94 <oppdater_styrebidrag>:

	

}

void oppdater_styrebidrag(void){
 8000e94:	e92d 4df0 	stmdb	sp!, {r4, r5, r6, r7, r8, sl, fp, lr}
 8000e98:	ed2d 8b02 	vpush	{d8}
	// Regner ut argument og modulus av jag og svai
	styreretning = atan2(styremelding.svai, styremelding.jag);
 8000e9c:	4cb8      	ldr	r4, [pc, #736]	; (8001180 <oppdater_styrebidrag+0x2ec>)
 8000e9e:	f994 0000 	ldrsb.w	r0, [r4]
 8000ea2:	f7ff fae3 	bl	800046c <__aeabi_i2d>
 8000ea6:	ec41 0b18 	vmov	d8, r0, r1
 8000eaa:	f994 0001 	ldrsb.w	r0, [r4, #1]
 8000eae:	f7ff fadd 	bl	800046c <__aeabi_i2d>
 8000eb2:	eeb0 1a48 	vmov.f32	s2, s16
 8000eb6:	eef0 1a68 	vmov.f32	s3, s17
 8000eba:	ec41 0b10 	vmov	d0, r0, r1
 8000ebe:	f009 f9d7 	bl	800a270 <atan2>
 8000ec2:	ec51 0b10 	vmov	r0, r1, d0
 8000ec6:	f7ff fe13 	bl	8000af0 <__aeabi_d2f>
 8000eca:	4eae      	ldr	r6, [pc, #696]	; (8001184 <oppdater_styrebidrag+0x2f0>)
 8000ecc:	6030      	str	r0, [r6, #0]
	maks_paadrag = sqrt(styremelding.jag*styremelding.jag + styremelding.svai*styremelding.svai);
 8000ece:	f994 0000 	ldrsb.w	r0, [r4]
 8000ed2:	f994 3001 	ldrsb.w	r3, [r4, #1]
 8000ed6:	fb03 f303 	mul.w	r3, r3, r3
 8000eda:	fb00 3000 	mla	r0, r0, r0, r3
 8000ede:	f7ff fac5 	bl	800046c <__aeabi_i2d>
 8000ee2:	ec41 0b10 	vmov	d0, r0, r1
 8000ee6:	f009 f9c5 	bl	800a274 <sqrt>
 8000eea:	ec51 0b10 	vmov	r0, r1, d0
 8000eee:	f7ff fdff 	bl	8000af0 <__aeabi_d2f>
 8000ef2:	f8df 82d4 	ldr.w	r8, [pc, #724]	; 80011c8 <oppdater_styrebidrag+0x334>
 8000ef6:	f8c8 0000 	str.w	r0, [r8]

	// Utregning av pådragsnivå til hver horisontale thruster
	styrebidrag.hhf = cos(HR_kompass_rad.NW - styreretning)*maks_paadrag;
 8000efa:	edd6 7a00 	vldr	s15, [r6]
 8000efe:	4fa2      	ldr	r7, [pc, #648]	; (8001188 <oppdater_styrebidrag+0x2f4>)
 8000f00:	ed97 7a07 	vldr	s14, [r7, #28]
 8000f04:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f08:	ee17 0a90 	vmov	r0, s15
 8000f0c:	f7ff fac0 	bl	8000490 <__aeabi_f2d>
 8000f10:	ec41 0b10 	vmov	d0, r0, r1
 8000f14:	f009 f900 	bl	800a118 <cos>
 8000f18:	ec5b ab10 	vmov	sl, fp, d0
 8000f1c:	f8d8 0000 	ldr.w	r0, [r8]
 8000f20:	f7ff fab6 	bl	8000490 <__aeabi_f2d>
 8000f24:	4652      	mov	r2, sl
 8000f26:	465b      	mov	r3, fp
 8000f28:	f7ff fb0a 	bl	8000540 <__aeabi_dmul>
 8000f2c:	f7ff fde0 	bl	8000af0 <__aeabi_d2f>
 8000f30:	ee08 0a10 	vmov	s16, r0
 8000f34:	4d95      	ldr	r5, [pc, #596]	; (800118c <oppdater_styrebidrag+0x2f8>)
 8000f36:	6028      	str	r0, [r5, #0]
	styrebidrag.hhb = cos(HR_kompass_rad.SW - styreretning)*maks_paadrag;
 8000f38:	edd6 7a00 	vldr	s15, [r6]
 8000f3c:	ed97 7a05 	vldr	s14, [r7, #20]
 8000f40:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f44:	ee17 0a90 	vmov	r0, s15
 8000f48:	f7ff faa2 	bl	8000490 <__aeabi_f2d>
 8000f4c:	ec41 0b10 	vmov	d0, r0, r1
 8000f50:	f009 f8e2 	bl	800a118 <cos>
 8000f54:	ec57 6b10 	vmov	r6, r7, d0
 8000f58:	f8d8 0000 	ldr.w	r0, [r8]
 8000f5c:	f7ff fa98 	bl	8000490 <__aeabi_f2d>
 8000f60:	4632      	mov	r2, r6
 8000f62:	463b      	mov	r3, r7
 8000f64:	f7ff faec 	bl	8000540 <__aeabi_dmul>
 8000f68:	f7ff fdc2 	bl	8000af0 <__aeabi_d2f>
 8000f6c:	ee07 0a90 	vmov	s15, r0
 8000f70:	6068      	str	r0, [r5, #4]
	styrebidrag.hvb = - styrebidrag.hhf; 			// thrusteren er orientert 180 grader på hhf
 8000f72:	eef1 6a48 	vneg.f32	s13, s16
 8000f76:	edc5 6a02 	vstr	s13, [r5, #8]
	styrebidrag.hvf = - styrebidrag.hhb; 			// thrusteren er orientert 180 grader på hhb
 8000f7a:	eeb1 7a67 	vneg.f32	s14, s15
 8000f7e:	ed85 7a03 	vstr	s14, [r5, #12]


	// Skalering i tilfelle gir-pådrag som kan akkumulere pådraget over "100%"
	if (styremelding.gir){
 8000f82:	f994 3003 	ldrsb.w	r3, [r4, #3]
 8000f86:	b37b      	cbz	r3, 8000fe8 <oppdater_styrebidrag+0x154>
		if(flagg.gpid){flagg.gir_pause = 1;}
 8000f88:	4a81      	ldr	r2, [pc, #516]	; (8001190 <oppdater_styrebidrag+0x2fc>)
 8000f8a:	7a12      	ldrb	r2, [r2, #8]
 8000f8c:	b112      	cbz	r2, 8000f94 <oppdater_styrebidrag+0x100>
 8000f8e:	4a80      	ldr	r2, [pc, #512]	; (8001190 <oppdater_styrebidrag+0x2fc>)
 8000f90:	2101      	movs	r1, #1
 8000f92:	7111      	strb	r1, [r2, #4]
		flagg.gpid = 0;
 8000f94:	2200      	movs	r2, #0
 8000f96:	497e      	ldr	r1, [pc, #504]	; (8001190 <oppdater_styrebidrag+0x2fc>)
 8000f98:	720a      	strb	r2, [r1, #8]
		teller_reg_gir = 0;
 8000f9a:	497e      	ldr	r1, [pc, #504]	; (8001194 <oppdater_styrebidrag+0x300>)
 8000f9c:	700a      	strb	r2, [r1, #0]
		gir = styremelding.gir * param.demping.gir;
 8000f9e:	ee07 3a10 	vmov	s14, r3
 8000fa2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8000fa6:	4b7c      	ldr	r3, [pc, #496]	; (8001198 <oppdater_styrebidrag+0x304>)
 8000fa8:	ed93 6a01 	vldr	s12, [r3, #4]
 8000fac:	ee27 7a06 	vmul.f32	s14, s14, s12
 8000fb0:	4b7a      	ldr	r3, [pc, #488]	; (800119c <oppdater_styrebidrag+0x308>)
 8000fb2:	ed83 7a00 	vstr	s14, [r3]
		styrebidrag.hhf -= gir;
 8000fb6:	ed93 7a00 	vldr	s14, [r3]
 8000fba:	4a74      	ldr	r2, [pc, #464]	; (800118c <oppdater_styrebidrag+0x2f8>)
 8000fbc:	ee38 8a47 	vsub.f32	s16, s16, s14
 8000fc0:	ed82 8a00 	vstr	s16, [r2]
		styrebidrag.hhb += gir;
 8000fc4:	ed93 7a00 	vldr	s14, [r3]
 8000fc8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8000fcc:	ed82 7a01 	vstr	s14, [r2, #4]
		styrebidrag.hvb -= gir;
 8000fd0:	ed93 7a00 	vldr	s14, [r3]
 8000fd4:	ee76 6ac7 	vsub.f32	s13, s13, s14
 8000fd8:	edc2 6a02 	vstr	s13, [r2, #8]
		styrebidrag.hvf += gir;
 8000fdc:	ed93 7a00 	vldr	s14, [r3]
 8000fe0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000fe4:	edc2 7a03 	vstr	s15, [r2, #12]
	}

	// Bidrag til vertikale thrustere i tilfelle hiv
	if (styremelding.hiv){
 8000fe8:	4b65      	ldr	r3, [pc, #404]	; (8001180 <oppdater_styrebidrag+0x2ec>)
 8000fea:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	f000 80b9 	beq.w	8001166 <oppdater_styrebidrag+0x2d2>
		ctrl_ref.z = model_states.z;
 8000ff4:	4a6a      	ldr	r2, [pc, #424]	; (80011a0 <oppdater_styrebidrag+0x30c>)
 8000ff6:	6891      	ldr	r1, [r2, #8]
 8000ff8:	4a6a      	ldr	r2, [pc, #424]	; (80011a4 <oppdater_styrebidrag+0x310>)
 8000ffa:	6091      	str	r1, [r2, #8]
		if(flagg.hpid){flagg.hiv_pause = 1;}
 8000ffc:	4a64      	ldr	r2, [pc, #400]	; (8001190 <oppdater_styrebidrag+0x2fc>)
 8000ffe:	79d2      	ldrb	r2, [r2, #7]
 8001000:	b112      	cbz	r2, 8001008 <oppdater_styrebidrag+0x174>
 8001002:	4a63      	ldr	r2, [pc, #396]	; (8001190 <oppdater_styrebidrag+0x2fc>)
 8001004:	2101      	movs	r1, #1
 8001006:	7051      	strb	r1, [r2, #1]
		flagg.hpid = 0;
 8001008:	2200      	movs	r2, #0
 800100a:	4961      	ldr	r1, [pc, #388]	; (8001190 <oppdater_styrebidrag+0x2fc>)
 800100c:	71ca      	strb	r2, [r1, #7]
		teller_reg_hiv = 0;
 800100e:	4966      	ldr	r1, [pc, #408]	; (80011a8 <oppdater_styrebidrag+0x314>)
 8001010:	700a      	strb	r2, [r1, #0]
		hiv = styremelding.hiv * param.demping.hiv;
 8001012:	ee07 3a90 	vmov	s15, r3
 8001016:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800101a:	4b5f      	ldr	r3, [pc, #380]	; (8001198 <oppdater_styrebidrag+0x304>)
 800101c:	ed93 7a00 	vldr	s14, [r3]
 8001020:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001024:	4b61      	ldr	r3, [pc, #388]	; (80011ac <oppdater_styrebidrag+0x318>)
 8001026:	edc3 7a00 	vstr	s15, [r3]
		hiv = -hiv; // invertert styring av opp og ned
 800102a:	edd3 7a00 	vldr	s15, [r3]
 800102e:	eef1 7a67 	vneg.f32	s15, s15
 8001032:	edc3 7a00 	vstr	s15, [r3]
		styrebidrag.vhf = hiv;
 8001036:	6819      	ldr	r1, [r3, #0]
 8001038:	4a54      	ldr	r2, [pc, #336]	; (800118c <oppdater_styrebidrag+0x2f8>)
 800103a:	6111      	str	r1, [r2, #16]
		styrebidrag.vhb = hiv;
 800103c:	6819      	ldr	r1, [r3, #0]
 800103e:	6151      	str	r1, [r2, #20]
		styrebidrag.vvb = hiv;
 8001040:	6819      	ldr	r1, [r3, #0]
 8001042:	6191      	str	r1, [r2, #24]
		styrebidrag.vvf = hiv;
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	61d3      	str	r3, [r2, #28]
		styrebidrag.vvb = 0;
		styrebidrag.vvf = 0;
	}

	// Pådrag for manuell stamp
	if(styremelding.stamp){
 8001048:	4b4d      	ldr	r3, [pc, #308]	; (8001180 <oppdater_styrebidrag+0x2ec>)
 800104a:	f993 3006 	ldrsb.w	r3, [r3, #6]
 800104e:	b3bb      	cbz	r3, 80010c0 <oppdater_styrebidrag+0x22c>
		if(flagg.spid){flagg.stamp_pause = 1;}
 8001050:	4a4f      	ldr	r2, [pc, #316]	; (8001190 <oppdater_styrebidrag+0x2fc>)
 8001052:	7952      	ldrb	r2, [r2, #5]
 8001054:	b112      	cbz	r2, 800105c <oppdater_styrebidrag+0x1c8>
 8001056:	4a4e      	ldr	r2, [pc, #312]	; (8001190 <oppdater_styrebidrag+0x2fc>)
 8001058:	2101      	movs	r1, #1
 800105a:	70d1      	strb	r1, [r2, #3]
		flagg.spid = 0;
 800105c:	2200      	movs	r2, #0
 800105e:	494c      	ldr	r1, [pc, #304]	; (8001190 <oppdater_styrebidrag+0x2fc>)
 8001060:	714a      	strb	r2, [r1, #5]
		teller_reg_stamp = 0;
 8001062:	4953      	ldr	r1, [pc, #332]	; (80011b0 <oppdater_styrebidrag+0x31c>)
 8001064:	700a      	strb	r2, [r1, #0]
		stamp = styremelding.stamp * param.demping.stamp;
 8001066:	ee07 3a90 	vmov	s15, r3
 800106a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800106e:	4b4a      	ldr	r3, [pc, #296]	; (8001198 <oppdater_styrebidrag+0x304>)
 8001070:	ed93 7a03 	vldr	s14, [r3, #12]
 8001074:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001078:	4a4e      	ldr	r2, [pc, #312]	; (80011b4 <oppdater_styrebidrag+0x320>)
 800107a:	edc2 7a00 	vstr	s15, [r2]
		styrebidrag.vhf += stamp;
 800107e:	ed92 7a00 	vldr	s14, [r2]
 8001082:	4b42      	ldr	r3, [pc, #264]	; (800118c <oppdater_styrebidrag+0x2f8>)
 8001084:	edd3 7a04 	vldr	s15, [r3, #16]
 8001088:	ee77 7a87 	vadd.f32	s15, s15, s14
 800108c:	edc3 7a04 	vstr	s15, [r3, #16]
		styrebidrag.vhb -= stamp;
 8001090:	ed92 7a00 	vldr	s14, [r2]
 8001094:	edd3 7a05 	vldr	s15, [r3, #20]
 8001098:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800109c:	edc3 7a05 	vstr	s15, [r3, #20]
		styrebidrag.vvb -= stamp;
 80010a0:	ed92 7a00 	vldr	s14, [r2]
 80010a4:	edd3 7a06 	vldr	s15, [r3, #24]
 80010a8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80010ac:	edc3 7a06 	vstr	s15, [r3, #24]
		styrebidrag.vvf += stamp;
 80010b0:	ed92 7a00 	vldr	s14, [r2]
 80010b4:	edd3 7a07 	vldr	s15, [r3, #28]
 80010b8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80010bc:	edc3 7a07 	vstr	s15, [r3, #28]
	}

	// Pådrag for manuell stamp
	if(styremelding.rull){
 80010c0:	4b2f      	ldr	r3, [pc, #188]	; (8001180 <oppdater_styrebidrag+0x2ec>)
 80010c2:	f993 3005 	ldrsb.w	r3, [r3, #5]
 80010c6:	b3bb      	cbz	r3, 8001138 <oppdater_styrebidrag+0x2a4>
		if(flagg.rpid){flagg.rull_pause = 1;}
 80010c8:	4a31      	ldr	r2, [pc, #196]	; (8001190 <oppdater_styrebidrag+0x2fc>)
 80010ca:	7992      	ldrb	r2, [r2, #6]
 80010cc:	b112      	cbz	r2, 80010d4 <oppdater_styrebidrag+0x240>
 80010ce:	4a30      	ldr	r2, [pc, #192]	; (8001190 <oppdater_styrebidrag+0x2fc>)
 80010d0:	2101      	movs	r1, #1
 80010d2:	7091      	strb	r1, [r2, #2]
		flagg.rpid = 0;
 80010d4:	2200      	movs	r2, #0
 80010d6:	492e      	ldr	r1, [pc, #184]	; (8001190 <oppdater_styrebidrag+0x2fc>)
 80010d8:	718a      	strb	r2, [r1, #6]
		teller_reg_rull = 0;
 80010da:	4937      	ldr	r1, [pc, #220]	; (80011b8 <oppdater_styrebidrag+0x324>)
 80010dc:	700a      	strb	r2, [r1, #0]
		rull = styremelding.rull * param.demping.rull;
 80010de:	ee07 3a90 	vmov	s15, r3
 80010e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010e6:	4b2c      	ldr	r3, [pc, #176]	; (8001198 <oppdater_styrebidrag+0x304>)
 80010e8:	ed93 7a02 	vldr	s14, [r3, #8]
 80010ec:	ee67 7a87 	vmul.f32	s15, s15, s14
 80010f0:	4a32      	ldr	r2, [pc, #200]	; (80011bc <oppdater_styrebidrag+0x328>)
 80010f2:	edc2 7a00 	vstr	s15, [r2]
		styrebidrag.vhf += rull;
 80010f6:	ed92 7a00 	vldr	s14, [r2]
 80010fa:	4b24      	ldr	r3, [pc, #144]	; (800118c <oppdater_styrebidrag+0x2f8>)
 80010fc:	edd3 7a04 	vldr	s15, [r3, #16]
 8001100:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001104:	edc3 7a04 	vstr	s15, [r3, #16]
		styrebidrag.vhb += rull;
 8001108:	ed92 7a00 	vldr	s14, [r2]
 800110c:	edd3 7a05 	vldr	s15, [r3, #20]
 8001110:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001114:	edc3 7a05 	vstr	s15, [r3, #20]
		styrebidrag.vvb -= rull;
 8001118:	ed92 7a00 	vldr	s14, [r2]
 800111c:	edd3 7a06 	vldr	s15, [r3, #24]
 8001120:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001124:	edc3 7a06 	vstr	s15, [r3, #24]
		styrebidrag.vvf -= rull;
 8001128:	ed92 7a00 	vldr	s14, [r2]
 800112c:	edd3 7a07 	vldr	s15, [r3, #28]
 8001130:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001134:	edc3 7a07 	vstr	s15, [r3, #28]
	}

	// Pådragsbegresning fra topside
	if (styremelding.throttling){gain = (100-styremelding.throttling)/25;}
 8001138:	4b11      	ldr	r3, [pc, #68]	; (8001180 <oppdater_styrebidrag+0x2ec>)
 800113a:	f993 3007 	ldrsb.w	r3, [r3, #7]
 800113e:	b1cb      	cbz	r3, 8001174 <oppdater_styrebidrag+0x2e0>
 8001140:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 8001144:	4a1e      	ldr	r2, [pc, #120]	; (80011c0 <oppdater_styrebidrag+0x32c>)
 8001146:	fb82 1203 	smull	r1, r2, r2, r3
 800114a:	17db      	asrs	r3, r3, #31
 800114c:	ebc3 03e2 	rsb	r3, r3, r2, asr #3
 8001150:	ee07 3a90 	vmov	s15, r3
 8001154:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001158:	4b1a      	ldr	r3, [pc, #104]	; (80011c4 <oppdater_styrebidrag+0x330>)
 800115a:	edc3 7a00 	vstr	s15, [r3]
	else{						 gain = 4;}

}
 800115e:	ecbd 8b02 	vpop	{d8}
 8001162:	e8bd 8df0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl, fp, pc}
		styrebidrag.vhf = 0;
 8001166:	4b09      	ldr	r3, [pc, #36]	; (800118c <oppdater_styrebidrag+0x2f8>)
 8001168:	2200      	movs	r2, #0
 800116a:	611a      	str	r2, [r3, #16]
		styrebidrag.vhb = 0;
 800116c:	615a      	str	r2, [r3, #20]
		styrebidrag.vvb = 0;
 800116e:	619a      	str	r2, [r3, #24]
		styrebidrag.vvf = 0;
 8001170:	61da      	str	r2, [r3, #28]
 8001172:	e769      	b.n	8001048 <oppdater_styrebidrag+0x1b4>
	else{						 gain = 4;}
 8001174:	4b13      	ldr	r3, [pc, #76]	; (80011c4 <oppdater_styrebidrag+0x330>)
 8001176:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 800117a:	601a      	str	r2, [r3, #0]
}
 800117c:	e7ef      	b.n	800115e <oppdater_styrebidrag+0x2ca>
 800117e:	bf00      	nop
 8001180:	20000ca0 	.word	0x20000ca0
 8001184:	20000ca8 	.word	0x20000ca8
 8001188:	200000c4 	.word	0x200000c4
 800118c:	20000c60 	.word	0x20000c60
 8001190:	20000244 	.word	0x20000244
 8001194:	20000cde 	.word	0x20000cde
 8001198:	200006ec 	.word	0x200006ec
 800119c:	20000260 	.word	0x20000260
 80011a0:	2000054c 	.word	0x2000054c
 80011a4:	20000220 	.word	0x20000220
 80011a8:	20000cdf 	.word	0x20000cdf
 80011ac:	200003d4 	.word	0x200003d4
 80011b0:	20000ce1 	.word	0x20000ce1
 80011b4:	20000c2c 	.word	0x20000c2c
 80011b8:	20000ce0 	.word	0x20000ce0
 80011bc:	200009c8 	.word	0x200009c8
 80011c0:	51eb851f 	.word	0x51eb851f
 80011c4:	2000025c 	.word	0x2000025c
 80011c8:	20000530 	.word	0x20000530

080011cc <thrust_filtering>:
	styrefilter.vhb = styrebidrag.vhb;
	styrefilter.vvb = styrebidrag.vvb;
	styrefilter.vvf = styrebidrag.vvf;
}

void thrust_filtering(thruster_sett_float *thrust, thruster_sett_float *active){
 80011cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80011ce:	ed2d 8b02 	vpush	{d8}
 80011d2:	4605      	mov	r5, r0
 80011d4:	460c      	mov	r4, r1
	float step = 5.0;
	if ( fabs(thrust->hhf - active->hhf) >= step ){ active->hhf += copysign(step ,(thrust->hhf - active->hhf));}
 80011d6:	edd0 7a00 	vldr	s15, [r0]
 80011da:	ed91 8a00 	vldr	s16, [r1]
 80011de:	ee37 7ac8 	vsub.f32	s14, s15, s16
 80011e2:	eeb0 6ac7 	vabs.f32	s12, s14
 80011e6:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 80011ea:	eeb4 6ae6 	vcmpe.f32	s12, s13
 80011ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011f2:	db15      	blt.n	8001220 <thrust_filtering+0x54>
 80011f4:	ee17 0a10 	vmov	r0, s14
 80011f8:	f7ff f94a 	bl	8000490 <__aeabi_f2d>
 80011fc:	2600      	movs	r6, #0
 80011fe:	4f93      	ldr	r7, [pc, #588]	; (800144c <thrust_filtering+0x280>)
 8001200:	2900      	cmp	r1, #0
 8001202:	bfbc      	itt	lt
 8001204:	2600      	movlt	r6, #0
 8001206:	4f92      	ldrlt	r7, [pc, #584]	; (8001450 <thrust_filtering+0x284>)
 8001208:	ee18 0a10 	vmov	r0, s16
 800120c:	f7ff f940 	bl	8000490 <__aeabi_f2d>
 8001210:	4632      	mov	r2, r6
 8001212:	463b      	mov	r3, r7
 8001214:	f7fe ffde 	bl	80001d4 <__adddf3>
 8001218:	f7ff fc6a 	bl	8000af0 <__aeabi_d2f>
 800121c:	ee07 0a90 	vmov	s15, r0
 8001220:	edc4 7a00 	vstr	s15, [r4]
	else{active->hhf = thrust->hhf;}
	if ( fabs(thrust->hhb - active->hhb) >= step ){ active->hhb += copysign(step ,(thrust->hhb - active->hhb));}
 8001224:	edd5 7a01 	vldr	s15, [r5, #4]
 8001228:	ed94 8a01 	vldr	s16, [r4, #4]
 800122c:	ee37 7ac8 	vsub.f32	s14, s15, s16
 8001230:	eeb0 6ac7 	vabs.f32	s12, s14
 8001234:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 8001238:	eeb4 6ae6 	vcmpe.f32	s12, s13
 800123c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001240:	db15      	blt.n	800126e <thrust_filtering+0xa2>
 8001242:	ee17 0a10 	vmov	r0, s14
 8001246:	f7ff f923 	bl	8000490 <__aeabi_f2d>
 800124a:	2600      	movs	r6, #0
 800124c:	4f7f      	ldr	r7, [pc, #508]	; (800144c <thrust_filtering+0x280>)
 800124e:	2900      	cmp	r1, #0
 8001250:	bfbc      	itt	lt
 8001252:	2600      	movlt	r6, #0
 8001254:	4f7e      	ldrlt	r7, [pc, #504]	; (8001450 <thrust_filtering+0x284>)
 8001256:	ee18 0a10 	vmov	r0, s16
 800125a:	f7ff f919 	bl	8000490 <__aeabi_f2d>
 800125e:	4632      	mov	r2, r6
 8001260:	463b      	mov	r3, r7
 8001262:	f7fe ffb7 	bl	80001d4 <__adddf3>
 8001266:	f7ff fc43 	bl	8000af0 <__aeabi_d2f>
 800126a:	ee07 0a90 	vmov	s15, r0
 800126e:	edc4 7a01 	vstr	s15, [r4, #4]
	else{active->hhb = thrust->hhb;}
	if ( fabs(thrust->hvb - active->hvb) >= step ){ active->hvb += copysign(step ,(thrust->hvb - active->hvb));}
 8001272:	edd5 7a02 	vldr	s15, [r5, #8]
 8001276:	ed94 8a02 	vldr	s16, [r4, #8]
 800127a:	ee37 7ac8 	vsub.f32	s14, s15, s16
 800127e:	eeb0 6ac7 	vabs.f32	s12, s14
 8001282:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 8001286:	eeb4 6ae6 	vcmpe.f32	s12, s13
 800128a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800128e:	db15      	blt.n	80012bc <thrust_filtering+0xf0>
 8001290:	ee17 0a10 	vmov	r0, s14
 8001294:	f7ff f8fc 	bl	8000490 <__aeabi_f2d>
 8001298:	2600      	movs	r6, #0
 800129a:	4f6c      	ldr	r7, [pc, #432]	; (800144c <thrust_filtering+0x280>)
 800129c:	2900      	cmp	r1, #0
 800129e:	bfbc      	itt	lt
 80012a0:	2600      	movlt	r6, #0
 80012a2:	4f6b      	ldrlt	r7, [pc, #428]	; (8001450 <thrust_filtering+0x284>)
 80012a4:	ee18 0a10 	vmov	r0, s16
 80012a8:	f7ff f8f2 	bl	8000490 <__aeabi_f2d>
 80012ac:	4632      	mov	r2, r6
 80012ae:	463b      	mov	r3, r7
 80012b0:	f7fe ff90 	bl	80001d4 <__adddf3>
 80012b4:	f7ff fc1c 	bl	8000af0 <__aeabi_d2f>
 80012b8:	ee07 0a90 	vmov	s15, r0
 80012bc:	edc4 7a02 	vstr	s15, [r4, #8]
	else{active->hvb = thrust->hvb;}
	if ( fabs(thrust->hvf - active->hvf) >= step ){ active->hvf += copysign(step ,(thrust->hvf - active->hvf));}
 80012c0:	edd5 7a03 	vldr	s15, [r5, #12]
 80012c4:	ed94 8a03 	vldr	s16, [r4, #12]
 80012c8:	ee37 7ac8 	vsub.f32	s14, s15, s16
 80012cc:	eeb0 6ac7 	vabs.f32	s12, s14
 80012d0:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 80012d4:	eeb4 6ae6 	vcmpe.f32	s12, s13
 80012d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012dc:	db15      	blt.n	800130a <thrust_filtering+0x13e>
 80012de:	ee17 0a10 	vmov	r0, s14
 80012e2:	f7ff f8d5 	bl	8000490 <__aeabi_f2d>
 80012e6:	2600      	movs	r6, #0
 80012e8:	4f58      	ldr	r7, [pc, #352]	; (800144c <thrust_filtering+0x280>)
 80012ea:	2900      	cmp	r1, #0
 80012ec:	bfbc      	itt	lt
 80012ee:	2600      	movlt	r6, #0
 80012f0:	4f57      	ldrlt	r7, [pc, #348]	; (8001450 <thrust_filtering+0x284>)
 80012f2:	ee18 0a10 	vmov	r0, s16
 80012f6:	f7ff f8cb 	bl	8000490 <__aeabi_f2d>
 80012fa:	4632      	mov	r2, r6
 80012fc:	463b      	mov	r3, r7
 80012fe:	f7fe ff69 	bl	80001d4 <__adddf3>
 8001302:	f7ff fbf5 	bl	8000af0 <__aeabi_d2f>
 8001306:	ee07 0a90 	vmov	s15, r0
 800130a:	edc4 7a03 	vstr	s15, [r4, #12]
	else{active->hvf = thrust->hvf;}
	if ( fabs(thrust->vhf - active->vhf) >= step ){ active->vhf += copysign(step ,(thrust->vhf - active->vhf));}
 800130e:	edd5 7a04 	vldr	s15, [r5, #16]
 8001312:	ed94 8a04 	vldr	s16, [r4, #16]
 8001316:	ee37 7ac8 	vsub.f32	s14, s15, s16
 800131a:	eeb0 6ac7 	vabs.f32	s12, s14
 800131e:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 8001322:	eeb4 6ae6 	vcmpe.f32	s12, s13
 8001326:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800132a:	db15      	blt.n	8001358 <thrust_filtering+0x18c>
 800132c:	ee17 0a10 	vmov	r0, s14
 8001330:	f7ff f8ae 	bl	8000490 <__aeabi_f2d>
 8001334:	2600      	movs	r6, #0
 8001336:	4f45      	ldr	r7, [pc, #276]	; (800144c <thrust_filtering+0x280>)
 8001338:	2900      	cmp	r1, #0
 800133a:	bfbc      	itt	lt
 800133c:	2600      	movlt	r6, #0
 800133e:	4f44      	ldrlt	r7, [pc, #272]	; (8001450 <thrust_filtering+0x284>)
 8001340:	ee18 0a10 	vmov	r0, s16
 8001344:	f7ff f8a4 	bl	8000490 <__aeabi_f2d>
 8001348:	4632      	mov	r2, r6
 800134a:	463b      	mov	r3, r7
 800134c:	f7fe ff42 	bl	80001d4 <__adddf3>
 8001350:	f7ff fbce 	bl	8000af0 <__aeabi_d2f>
 8001354:	ee07 0a90 	vmov	s15, r0
 8001358:	edc4 7a04 	vstr	s15, [r4, #16]
	else{active->vhf = thrust->vhf;}
	if ( fabs(thrust->vhb - active->vhb) >= step ){ active->vhb += copysign(step ,(thrust->vhb - active->vhb));}
 800135c:	edd5 7a05 	vldr	s15, [r5, #20]
 8001360:	ed94 8a05 	vldr	s16, [r4, #20]
 8001364:	ee37 7ac8 	vsub.f32	s14, s15, s16
 8001368:	eeb0 6ac7 	vabs.f32	s12, s14
 800136c:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 8001370:	eeb4 6ae6 	vcmpe.f32	s12, s13
 8001374:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001378:	db15      	blt.n	80013a6 <thrust_filtering+0x1da>
 800137a:	ee17 0a10 	vmov	r0, s14
 800137e:	f7ff f887 	bl	8000490 <__aeabi_f2d>
 8001382:	2600      	movs	r6, #0
 8001384:	4f31      	ldr	r7, [pc, #196]	; (800144c <thrust_filtering+0x280>)
 8001386:	2900      	cmp	r1, #0
 8001388:	bfbc      	itt	lt
 800138a:	2600      	movlt	r6, #0
 800138c:	4f30      	ldrlt	r7, [pc, #192]	; (8001450 <thrust_filtering+0x284>)
 800138e:	ee18 0a10 	vmov	r0, s16
 8001392:	f7ff f87d 	bl	8000490 <__aeabi_f2d>
 8001396:	4632      	mov	r2, r6
 8001398:	463b      	mov	r3, r7
 800139a:	f7fe ff1b 	bl	80001d4 <__adddf3>
 800139e:	f7ff fba7 	bl	8000af0 <__aeabi_d2f>
 80013a2:	ee07 0a90 	vmov	s15, r0
 80013a6:	edc4 7a05 	vstr	s15, [r4, #20]
	else{active->vhb = thrust->vhb;}
	if ( fabs(thrust->vvb - active->vvb) >= step ){ active->vvb += copysign(step ,(thrust->vvb - active->vvb));}
 80013aa:	edd5 7a06 	vldr	s15, [r5, #24]
 80013ae:	ed94 8a06 	vldr	s16, [r4, #24]
 80013b2:	ee37 7ac8 	vsub.f32	s14, s15, s16
 80013b6:	eeb0 6ac7 	vabs.f32	s12, s14
 80013ba:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 80013be:	eeb4 6ae6 	vcmpe.f32	s12, s13
 80013c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013c6:	db15      	blt.n	80013f4 <thrust_filtering+0x228>
 80013c8:	ee17 0a10 	vmov	r0, s14
 80013cc:	f7ff f860 	bl	8000490 <__aeabi_f2d>
 80013d0:	2600      	movs	r6, #0
 80013d2:	4f1e      	ldr	r7, [pc, #120]	; (800144c <thrust_filtering+0x280>)
 80013d4:	2900      	cmp	r1, #0
 80013d6:	bfbc      	itt	lt
 80013d8:	2600      	movlt	r6, #0
 80013da:	4f1d      	ldrlt	r7, [pc, #116]	; (8001450 <thrust_filtering+0x284>)
 80013dc:	ee18 0a10 	vmov	r0, s16
 80013e0:	f7ff f856 	bl	8000490 <__aeabi_f2d>
 80013e4:	4632      	mov	r2, r6
 80013e6:	463b      	mov	r3, r7
 80013e8:	f7fe fef4 	bl	80001d4 <__adddf3>
 80013ec:	f7ff fb80 	bl	8000af0 <__aeabi_d2f>
 80013f0:	ee07 0a90 	vmov	s15, r0
 80013f4:	edc4 7a06 	vstr	s15, [r4, #24]
	else{active->vvb = thrust->vvb;}
	if ( fabs(thrust->vvf - active->vvf) >= step ){ active->vvf += copysign(step ,(thrust->vvf - active->vvf));}
 80013f8:	edd5 7a07 	vldr	s15, [r5, #28]
 80013fc:	ed94 8a07 	vldr	s16, [r4, #28]
 8001400:	ee37 7ac8 	vsub.f32	s14, s15, s16
 8001404:	eeb0 6ac7 	vabs.f32	s12, s14
 8001408:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 800140c:	eeb4 6ae6 	vcmpe.f32	s12, s13
 8001410:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001414:	db15      	blt.n	8001442 <thrust_filtering+0x276>
 8001416:	ee17 0a10 	vmov	r0, s14
 800141a:	f7ff f839 	bl	8000490 <__aeabi_f2d>
 800141e:	2600      	movs	r6, #0
 8001420:	4f0a      	ldr	r7, [pc, #40]	; (800144c <thrust_filtering+0x280>)
 8001422:	2900      	cmp	r1, #0
 8001424:	bfbc      	itt	lt
 8001426:	2600      	movlt	r6, #0
 8001428:	4f09      	ldrlt	r7, [pc, #36]	; (8001450 <thrust_filtering+0x284>)
 800142a:	ee18 0a10 	vmov	r0, s16
 800142e:	f7ff f82f 	bl	8000490 <__aeabi_f2d>
 8001432:	4632      	mov	r2, r6
 8001434:	463b      	mov	r3, r7
 8001436:	f7fe fecd 	bl	80001d4 <__adddf3>
 800143a:	f7ff fb59 	bl	8000af0 <__aeabi_d2f>
 800143e:	ee07 0a90 	vmov	s15, r0
 8001442:	edc4 7a07 	vstr	s15, [r4, #28]
	else{active->vvf = thrust->vvf;}
}
 8001446:	ecbd 8b02 	vpop	{d8}
 800144a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800144c:	40140000 	.word	0x40140000
 8001450:	c0140000 	.word	0xc0140000

08001454 <thruster_retning_korreksjon>:
	}
	skriv_manipulator_PWM();

}

void thruster_retning_korreksjon(void){  // nedskalering mtp thrusterkarakteristikk
 8001454:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001458:	ed2d 8b02 	vpush	{d8}
	if (totalbidrag.hhf < -10){	totalbidrag.hhf = totalbidrag.hhf / (mk_modell.b + fabs(totalbidrag.hhf)*mk_modell.a);	}
 800145c:	4ba5      	ldr	r3, [pc, #660]	; (80016f4 <thruster_retning_korreksjon+0x2a0>)
 800145e:	ed93 8a00 	vldr	s16, [r3]
 8001462:	eefa 7a04 	vmov.f32	s15, #164	; 0xc1200000 -10.0
 8001466:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800146a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800146e:	d52f      	bpl.n	80014d0 <thruster_retning_korreksjon+0x7c>
 8001470:	ee18 0a10 	vmov	r0, s16
 8001474:	f7ff f80c 	bl	8000490 <__aeabi_f2d>
 8001478:	4604      	mov	r4, r0
 800147a:	460d      	mov	r5, r1
 800147c:	eef0 7ac8 	vabs.f32	s15, s16
 8001480:	ee17 0a90 	vmov	r0, s15
 8001484:	f7ff f804 	bl	8000490 <__aeabi_f2d>
 8001488:	4606      	mov	r6, r0
 800148a:	460f      	mov	r7, r1
 800148c:	f8df 8268 	ldr.w	r8, [pc, #616]	; 80016f8 <thruster_retning_korreksjon+0x2a4>
 8001490:	f8d8 0000 	ldr.w	r0, [r8]
 8001494:	f7fe fffc 	bl	8000490 <__aeabi_f2d>
 8001498:	4602      	mov	r2, r0
 800149a:	460b      	mov	r3, r1
 800149c:	4630      	mov	r0, r6
 800149e:	4639      	mov	r1, r7
 80014a0:	f7ff f84e 	bl	8000540 <__aeabi_dmul>
 80014a4:	4606      	mov	r6, r0
 80014a6:	460f      	mov	r7, r1
 80014a8:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80014ac:	f7fe fff0 	bl	8000490 <__aeabi_f2d>
 80014b0:	4602      	mov	r2, r0
 80014b2:	460b      	mov	r3, r1
 80014b4:	4630      	mov	r0, r6
 80014b6:	4639      	mov	r1, r7
 80014b8:	f7fe fe8c 	bl	80001d4 <__adddf3>
 80014bc:	4602      	mov	r2, r0
 80014be:	460b      	mov	r3, r1
 80014c0:	4620      	mov	r0, r4
 80014c2:	4629      	mov	r1, r5
 80014c4:	f7ff f966 	bl	8000794 <__aeabi_ddiv>
 80014c8:	f7ff fb12 	bl	8000af0 <__aeabi_d2f>
 80014cc:	4b89      	ldr	r3, [pc, #548]	; (80016f4 <thruster_retning_korreksjon+0x2a0>)
 80014ce:	6018      	str	r0, [r3, #0]
	if (totalbidrag.hhb < -10){	totalbidrag.hhb = totalbidrag.hhb / (mk_modell.b + fabs(totalbidrag.hhb)*mk_modell.a);	}
 80014d0:	4b88      	ldr	r3, [pc, #544]	; (80016f4 <thruster_retning_korreksjon+0x2a0>)
 80014d2:	ed93 8a01 	vldr	s16, [r3, #4]
 80014d6:	eefa 7a04 	vmov.f32	s15, #164	; 0xc1200000 -10.0
 80014da:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80014de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014e2:	d52f      	bpl.n	8001544 <thruster_retning_korreksjon+0xf0>
 80014e4:	ee18 0a10 	vmov	r0, s16
 80014e8:	f7fe ffd2 	bl	8000490 <__aeabi_f2d>
 80014ec:	4604      	mov	r4, r0
 80014ee:	460d      	mov	r5, r1
 80014f0:	eef0 7ac8 	vabs.f32	s15, s16
 80014f4:	ee17 0a90 	vmov	r0, s15
 80014f8:	f7fe ffca 	bl	8000490 <__aeabi_f2d>
 80014fc:	4606      	mov	r6, r0
 80014fe:	460f      	mov	r7, r1
 8001500:	f8df 81f4 	ldr.w	r8, [pc, #500]	; 80016f8 <thruster_retning_korreksjon+0x2a4>
 8001504:	f8d8 0000 	ldr.w	r0, [r8]
 8001508:	f7fe ffc2 	bl	8000490 <__aeabi_f2d>
 800150c:	4602      	mov	r2, r0
 800150e:	460b      	mov	r3, r1
 8001510:	4630      	mov	r0, r6
 8001512:	4639      	mov	r1, r7
 8001514:	f7ff f814 	bl	8000540 <__aeabi_dmul>
 8001518:	4606      	mov	r6, r0
 800151a:	460f      	mov	r7, r1
 800151c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8001520:	f7fe ffb6 	bl	8000490 <__aeabi_f2d>
 8001524:	4602      	mov	r2, r0
 8001526:	460b      	mov	r3, r1
 8001528:	4630      	mov	r0, r6
 800152a:	4639      	mov	r1, r7
 800152c:	f7fe fe52 	bl	80001d4 <__adddf3>
 8001530:	4602      	mov	r2, r0
 8001532:	460b      	mov	r3, r1
 8001534:	4620      	mov	r0, r4
 8001536:	4629      	mov	r1, r5
 8001538:	f7ff f92c 	bl	8000794 <__aeabi_ddiv>
 800153c:	f7ff fad8 	bl	8000af0 <__aeabi_d2f>
 8001540:	4b6c      	ldr	r3, [pc, #432]	; (80016f4 <thruster_retning_korreksjon+0x2a0>)
 8001542:	6058      	str	r0, [r3, #4]
	if (totalbidrag.hvb < -10){	totalbidrag.hvb = totalbidrag.hvb / (mk_modell.b + fabs(totalbidrag.hvb)*mk_modell.a);	}
 8001544:	4b6b      	ldr	r3, [pc, #428]	; (80016f4 <thruster_retning_korreksjon+0x2a0>)
 8001546:	ed93 8a02 	vldr	s16, [r3, #8]
 800154a:	eefa 7a04 	vmov.f32	s15, #164	; 0xc1200000 -10.0
 800154e:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8001552:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001556:	d52f      	bpl.n	80015b8 <thruster_retning_korreksjon+0x164>
 8001558:	ee18 0a10 	vmov	r0, s16
 800155c:	f7fe ff98 	bl	8000490 <__aeabi_f2d>
 8001560:	4604      	mov	r4, r0
 8001562:	460d      	mov	r5, r1
 8001564:	eef0 7ac8 	vabs.f32	s15, s16
 8001568:	ee17 0a90 	vmov	r0, s15
 800156c:	f7fe ff90 	bl	8000490 <__aeabi_f2d>
 8001570:	4606      	mov	r6, r0
 8001572:	460f      	mov	r7, r1
 8001574:	f8df 8180 	ldr.w	r8, [pc, #384]	; 80016f8 <thruster_retning_korreksjon+0x2a4>
 8001578:	f8d8 0000 	ldr.w	r0, [r8]
 800157c:	f7fe ff88 	bl	8000490 <__aeabi_f2d>
 8001580:	4602      	mov	r2, r0
 8001582:	460b      	mov	r3, r1
 8001584:	4630      	mov	r0, r6
 8001586:	4639      	mov	r1, r7
 8001588:	f7fe ffda 	bl	8000540 <__aeabi_dmul>
 800158c:	4606      	mov	r6, r0
 800158e:	460f      	mov	r7, r1
 8001590:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8001594:	f7fe ff7c 	bl	8000490 <__aeabi_f2d>
 8001598:	4602      	mov	r2, r0
 800159a:	460b      	mov	r3, r1
 800159c:	4630      	mov	r0, r6
 800159e:	4639      	mov	r1, r7
 80015a0:	f7fe fe18 	bl	80001d4 <__adddf3>
 80015a4:	4602      	mov	r2, r0
 80015a6:	460b      	mov	r3, r1
 80015a8:	4620      	mov	r0, r4
 80015aa:	4629      	mov	r1, r5
 80015ac:	f7ff f8f2 	bl	8000794 <__aeabi_ddiv>
 80015b0:	f7ff fa9e 	bl	8000af0 <__aeabi_d2f>
 80015b4:	4b4f      	ldr	r3, [pc, #316]	; (80016f4 <thruster_retning_korreksjon+0x2a0>)
 80015b6:	6098      	str	r0, [r3, #8]
	if (totalbidrag.hvf < -10){	totalbidrag.hvf = totalbidrag.hvf / (mk_modell.b + fabs(totalbidrag.hvf)*mk_modell.a);	}
 80015b8:	4b4e      	ldr	r3, [pc, #312]	; (80016f4 <thruster_retning_korreksjon+0x2a0>)
 80015ba:	ed93 8a03 	vldr	s16, [r3, #12]
 80015be:	eefa 7a04 	vmov.f32	s15, #164	; 0xc1200000 -10.0
 80015c2:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80015c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015ca:	d52f      	bpl.n	800162c <thruster_retning_korreksjon+0x1d8>
 80015cc:	ee18 0a10 	vmov	r0, s16
 80015d0:	f7fe ff5e 	bl	8000490 <__aeabi_f2d>
 80015d4:	4604      	mov	r4, r0
 80015d6:	460d      	mov	r5, r1
 80015d8:	eef0 7ac8 	vabs.f32	s15, s16
 80015dc:	ee17 0a90 	vmov	r0, s15
 80015e0:	f7fe ff56 	bl	8000490 <__aeabi_f2d>
 80015e4:	4606      	mov	r6, r0
 80015e6:	460f      	mov	r7, r1
 80015e8:	f8df 810c 	ldr.w	r8, [pc, #268]	; 80016f8 <thruster_retning_korreksjon+0x2a4>
 80015ec:	f8d8 0000 	ldr.w	r0, [r8]
 80015f0:	f7fe ff4e 	bl	8000490 <__aeabi_f2d>
 80015f4:	4602      	mov	r2, r0
 80015f6:	460b      	mov	r3, r1
 80015f8:	4630      	mov	r0, r6
 80015fa:	4639      	mov	r1, r7
 80015fc:	f7fe ffa0 	bl	8000540 <__aeabi_dmul>
 8001600:	4606      	mov	r6, r0
 8001602:	460f      	mov	r7, r1
 8001604:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8001608:	f7fe ff42 	bl	8000490 <__aeabi_f2d>
 800160c:	4602      	mov	r2, r0
 800160e:	460b      	mov	r3, r1
 8001610:	4630      	mov	r0, r6
 8001612:	4639      	mov	r1, r7
 8001614:	f7fe fdde 	bl	80001d4 <__adddf3>
 8001618:	4602      	mov	r2, r0
 800161a:	460b      	mov	r3, r1
 800161c:	4620      	mov	r0, r4
 800161e:	4629      	mov	r1, r5
 8001620:	f7ff f8b8 	bl	8000794 <__aeabi_ddiv>
 8001624:	f7ff fa64 	bl	8000af0 <__aeabi_d2f>
 8001628:	4b32      	ldr	r3, [pc, #200]	; (80016f4 <thruster_retning_korreksjon+0x2a0>)
 800162a:	60d8      	str	r0, [r3, #12]

	if (totalbidrag.vhf > 10){	totalbidrag.vhf = totalbidrag.vhf/ (mk_modell.b + totalbidrag.vhf*mk_modell.a);	}
 800162c:	4b31      	ldr	r3, [pc, #196]	; (80016f4 <thruster_retning_korreksjon+0x2a0>)
 800162e:	ed93 7a04 	vldr	s14, [r3, #16]
 8001632:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 8001636:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800163a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800163e:	dd0d      	ble.n	800165c <thruster_retning_korreksjon+0x208>
 8001640:	4b2d      	ldr	r3, [pc, #180]	; (80016f8 <thruster_retning_korreksjon+0x2a4>)
 8001642:	edd3 7a00 	vldr	s15, [r3]
 8001646:	ee67 7a27 	vmul.f32	s15, s14, s15
 800164a:	edd3 6a01 	vldr	s13, [r3, #4]
 800164e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001652:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001656:	4b27      	ldr	r3, [pc, #156]	; (80016f4 <thruster_retning_korreksjon+0x2a0>)
 8001658:	edc3 6a04 	vstr	s13, [r3, #16]
	if (totalbidrag.vhb > 10){	totalbidrag.vhb = totalbidrag.vhb/ (mk_modell.b + totalbidrag.vhb*mk_modell.a);	}
 800165c:	4b25      	ldr	r3, [pc, #148]	; (80016f4 <thruster_retning_korreksjon+0x2a0>)
 800165e:	ed93 7a05 	vldr	s14, [r3, #20]
 8001662:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 8001666:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800166a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800166e:	dd0d      	ble.n	800168c <thruster_retning_korreksjon+0x238>
 8001670:	4b21      	ldr	r3, [pc, #132]	; (80016f8 <thruster_retning_korreksjon+0x2a4>)
 8001672:	edd3 7a00 	vldr	s15, [r3]
 8001676:	ee67 7a27 	vmul.f32	s15, s14, s15
 800167a:	edd3 6a01 	vldr	s13, [r3, #4]
 800167e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001682:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001686:	4b1b      	ldr	r3, [pc, #108]	; (80016f4 <thruster_retning_korreksjon+0x2a0>)
 8001688:	edc3 6a05 	vstr	s13, [r3, #20]
	if (totalbidrag.vvb > 10){	totalbidrag.vvb = totalbidrag.vvb/ (mk_modell.b + totalbidrag.vvb*mk_modell.a);	}
 800168c:	4b19      	ldr	r3, [pc, #100]	; (80016f4 <thruster_retning_korreksjon+0x2a0>)
 800168e:	ed93 7a06 	vldr	s14, [r3, #24]
 8001692:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 8001696:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800169a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800169e:	dd0d      	ble.n	80016bc <thruster_retning_korreksjon+0x268>
 80016a0:	4b15      	ldr	r3, [pc, #84]	; (80016f8 <thruster_retning_korreksjon+0x2a4>)
 80016a2:	edd3 7a00 	vldr	s15, [r3]
 80016a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016aa:	edd3 6a01 	vldr	s13, [r3, #4]
 80016ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80016b2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80016b6:	4b0f      	ldr	r3, [pc, #60]	; (80016f4 <thruster_retning_korreksjon+0x2a0>)
 80016b8:	edc3 6a06 	vstr	s13, [r3, #24]
	if (totalbidrag.vvf > 10){	totalbidrag.vvf = totalbidrag.vvf/ (mk_modell.b + totalbidrag.vvf*mk_modell.a);	}
 80016bc:	4b0d      	ldr	r3, [pc, #52]	; (80016f4 <thruster_retning_korreksjon+0x2a0>)
 80016be:	ed93 7a07 	vldr	s14, [r3, #28]
 80016c2:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 80016c6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80016ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016ce:	dd0d      	ble.n	80016ec <thruster_retning_korreksjon+0x298>
 80016d0:	4b09      	ldr	r3, [pc, #36]	; (80016f8 <thruster_retning_korreksjon+0x2a4>)
 80016d2:	edd3 7a00 	vldr	s15, [r3]
 80016d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016da:	edd3 6a01 	vldr	s13, [r3, #4]
 80016de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80016e2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80016e6:	4b03      	ldr	r3, [pc, #12]	; (80016f4 <thruster_retning_korreksjon+0x2a0>)
 80016e8:	edc3 6a07 	vstr	s13, [r3, #28]
}
 80016ec:	ecbd 8b02 	vpop	{d8}
 80016f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80016f4:	20000d34 	.word	0x20000d34
 80016f8:	20000544 	.word	0x20000544

080016fc <skaler_paadrag>:

void skaler_paadrag(void){
	t_skalering.ph = 1.0;
 80016fc:	4b9e      	ldr	r3, [pc, #632]	; (8001978 <skaler_paadrag+0x27c>)
 80016fe:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001702:	601a      	str	r2, [r3, #0]
	t_skalering.pv = 1.0;
 8001704:	605a      	str	r2, [r3, #4]
	t_skalering.hhf = 1.0;
 8001706:	609a      	str	r2, [r3, #8]
	t_skalering.hhb = 1.0;
 8001708:	60da      	str	r2, [r3, #12]
	t_skalering.hvb = 1.0;
 800170a:	611a      	str	r2, [r3, #16]
	t_skalering.hvf = 1.0;
 800170c:	615a      	str	r2, [r3, #20]
	t_skalering.vhf = 1.0;
 800170e:	619a      	str	r2, [r3, #24]
	t_skalering.vhb = 1.0;
 8001710:	61da      	str	r2, [r3, #28]
	t_skalering.vvb = 1.0;
 8001712:	621a      	str	r2, [r3, #32]
	t_skalering.vvf = 1.0;
 8001714:	625a      	str	r2, [r3, #36]	; 0x24


	if(fabs(totalbidrag.hhf)>100){	t_skalering.hhf = 100.0 / fabs(totalbidrag.hhf);	}
 8001716:	4b99      	ldr	r3, [pc, #612]	; (800197c <skaler_paadrag+0x280>)
 8001718:	edd3 3a00 	vldr	s7, [r3]
 800171c:	eef0 7ae3 	vabs.f32	s15, s7
 8001720:	ed9f 7a97 	vldr	s14, [pc, #604]	; 8001980 <skaler_paadrag+0x284>
 8001724:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001728:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800172c:	dd06      	ble.n	800173c <skaler_paadrag+0x40>
 800172e:	eef0 6a47 	vmov.f32	s13, s14
 8001732:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001736:	4b90      	ldr	r3, [pc, #576]	; (8001978 <skaler_paadrag+0x27c>)
 8001738:	ed83 7a02 	vstr	s14, [r3, #8]
	if(fabs(totalbidrag.hhb)>100){	t_skalering.hhb = 100.0 / fabs(totalbidrag.hhb);	}
 800173c:	4b8f      	ldr	r3, [pc, #572]	; (800197c <skaler_paadrag+0x280>)
 800173e:	ed93 4a01 	vldr	s8, [r3, #4]
 8001742:	eef0 7ac4 	vabs.f32	s15, s8
 8001746:	ed9f 7a8e 	vldr	s14, [pc, #568]	; 8001980 <skaler_paadrag+0x284>
 800174a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800174e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001752:	dd06      	ble.n	8001762 <skaler_paadrag+0x66>
 8001754:	eef0 6a47 	vmov.f32	s13, s14
 8001758:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800175c:	4b86      	ldr	r3, [pc, #536]	; (8001978 <skaler_paadrag+0x27c>)
 800175e:	ed83 7a03 	vstr	s14, [r3, #12]
	if(fabs(totalbidrag.hvb)>100){	t_skalering.hvb = 100.0 / fabs(totalbidrag.hvb);	}
 8001762:	4b86      	ldr	r3, [pc, #536]	; (800197c <skaler_paadrag+0x280>)
 8001764:	edd3 4a02 	vldr	s9, [r3, #8]
 8001768:	eef0 7ae4 	vabs.f32	s15, s9
 800176c:	ed9f 7a84 	vldr	s14, [pc, #528]	; 8001980 <skaler_paadrag+0x284>
 8001770:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001774:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001778:	dd06      	ble.n	8001788 <skaler_paadrag+0x8c>
 800177a:	eef0 6a47 	vmov.f32	s13, s14
 800177e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001782:	4b7d      	ldr	r3, [pc, #500]	; (8001978 <skaler_paadrag+0x27c>)
 8001784:	ed83 7a04 	vstr	s14, [r3, #16]
	if(fabs(totalbidrag.hvf)>100){	t_skalering.hvf = 100.0 / fabs(totalbidrag.hvf);	}
 8001788:	4b7c      	ldr	r3, [pc, #496]	; (800197c <skaler_paadrag+0x280>)
 800178a:	ed93 5a03 	vldr	s10, [r3, #12]
 800178e:	eef0 7ac5 	vabs.f32	s15, s10
 8001792:	ed9f 7a7b 	vldr	s14, [pc, #492]	; 8001980 <skaler_paadrag+0x284>
 8001796:	eef4 7ac7 	vcmpe.f32	s15, s14
 800179a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800179e:	dd06      	ble.n	80017ae <skaler_paadrag+0xb2>
 80017a0:	eef0 6a47 	vmov.f32	s13, s14
 80017a4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80017a8:	4b73      	ldr	r3, [pc, #460]	; (8001978 <skaler_paadrag+0x27c>)
 80017aa:	ed83 7a05 	vstr	s14, [r3, #20]
	if(fabs(totalbidrag.vhf)>100){	t_skalering.vhf = 100.0 / fabs(totalbidrag.vhf);	}
 80017ae:	4b73      	ldr	r3, [pc, #460]	; (800197c <skaler_paadrag+0x280>)
 80017b0:	edd3 5a04 	vldr	s11, [r3, #16]
 80017b4:	eef0 7ae5 	vabs.f32	s15, s11
 80017b8:	ed9f 7a71 	vldr	s14, [pc, #452]	; 8001980 <skaler_paadrag+0x284>
 80017bc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017c4:	dd06      	ble.n	80017d4 <skaler_paadrag+0xd8>
 80017c6:	eef0 6a47 	vmov.f32	s13, s14
 80017ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80017ce:	4b6a      	ldr	r3, [pc, #424]	; (8001978 <skaler_paadrag+0x27c>)
 80017d0:	ed83 7a06 	vstr	s14, [r3, #24]
	if(fabs(totalbidrag.vhb)>100){	t_skalering.vhb = 100.0 / fabs(totalbidrag.vhb);	}
 80017d4:	4b69      	ldr	r3, [pc, #420]	; (800197c <skaler_paadrag+0x280>)
 80017d6:	ed93 6a05 	vldr	s12, [r3, #20]
 80017da:	eef0 7ac6 	vabs.f32	s15, s12
 80017de:	ed9f 7a68 	vldr	s14, [pc, #416]	; 8001980 <skaler_paadrag+0x284>
 80017e2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017ea:	dd06      	ble.n	80017fa <skaler_paadrag+0xfe>
 80017ec:	eef0 6a47 	vmov.f32	s13, s14
 80017f0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80017f4:	4b60      	ldr	r3, [pc, #384]	; (8001978 <skaler_paadrag+0x27c>)
 80017f6:	ed83 7a07 	vstr	s14, [r3, #28]
	if(fabs(totalbidrag.vvb)>100){	t_skalering.vvb = 100.0 / fabs(totalbidrag.vvb);	}
 80017fa:	4b60      	ldr	r3, [pc, #384]	; (800197c <skaler_paadrag+0x280>)
 80017fc:	edd3 6a06 	vldr	s13, [r3, #24]
 8001800:	eef0 7ae6 	vabs.f32	s15, s13
 8001804:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 8001980 <skaler_paadrag+0x284>
 8001808:	eef4 7ac7 	vcmpe.f32	s15, s14
 800180c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001810:	dd06      	ble.n	8001820 <skaler_paadrag+0x124>
 8001812:	eeb0 3a47 	vmov.f32	s6, s14
 8001816:	ee83 7a27 	vdiv.f32	s14, s6, s15
 800181a:	4b57      	ldr	r3, [pc, #348]	; (8001978 <skaler_paadrag+0x27c>)
 800181c:	ed83 7a08 	vstr	s14, [r3, #32]
	if(fabs(totalbidrag.vvf)>100){	t_skalering.vvf = 100.0 / fabs(totalbidrag.vvf);	}
 8001820:	4b56      	ldr	r3, [pc, #344]	; (800197c <skaler_paadrag+0x280>)
 8001822:	ed93 7a07 	vldr	s14, [r3, #28]
 8001826:	eef0 7ac7 	vabs.f32	s15, s14
 800182a:	ed9f 3a55 	vldr	s6, [pc, #340]	; 8001980 <skaler_paadrag+0x284>
 800182e:	eef4 7ac3 	vcmpe.f32	s15, s6
 8001832:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001836:	dd06      	ble.n	8001846 <skaler_paadrag+0x14a>
 8001838:	eef0 2a43 	vmov.f32	s5, s6
 800183c:	ee82 3aa7 	vdiv.f32	s6, s5, s15
 8001840:	4b4d      	ldr	r3, [pc, #308]	; (8001978 <skaler_paadrag+0x27c>)
 8001842:	ed83 3a09 	vstr	s6, [r3, #36]	; 0x24

	if(t_skalering.ph > t_skalering.hhf){			t_skalering.ph = t_skalering.hhf;		}
 8001846:	4b4c      	ldr	r3, [pc, #304]	; (8001978 <skaler_paadrag+0x27c>)
 8001848:	edd3 7a02 	vldr	s15, [r3, #8]
 800184c:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
 8001850:	eef4 7ac3 	vcmpe.f32	s15, s6
 8001854:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001858:	bf48      	it	mi
 800185a:	edc3 7a00 	vstrmi	s15, [r3]
	if(t_skalering.ph > t_skalering.hhb){			t_skalering.ph = t_skalering.hhb;		}
 800185e:	4b46      	ldr	r3, [pc, #280]	; (8001978 <skaler_paadrag+0x27c>)
 8001860:	edd3 7a03 	vldr	s15, [r3, #12]
 8001864:	ed93 3a00 	vldr	s6, [r3]
 8001868:	eeb4 3ae7 	vcmpe.f32	s6, s15
 800186c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001870:	bfc8      	it	gt
 8001872:	edc3 7a00 	vstrgt	s15, [r3]
	if(t_skalering.ph > t_skalering.hvb){			t_skalering.ph = t_skalering.hvb;		}
 8001876:	4b40      	ldr	r3, [pc, #256]	; (8001978 <skaler_paadrag+0x27c>)
 8001878:	edd3 7a04 	vldr	s15, [r3, #16]
 800187c:	ed93 3a00 	vldr	s6, [r3]
 8001880:	eeb4 3ae7 	vcmpe.f32	s6, s15
 8001884:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001888:	bfc8      	it	gt
 800188a:	edc3 7a00 	vstrgt	s15, [r3]
	if(t_skalering.ph > t_skalering.hvf){			t_skalering.ph = t_skalering.hvf;		}
 800188e:	4b3a      	ldr	r3, [pc, #232]	; (8001978 <skaler_paadrag+0x27c>)
 8001890:	edd3 7a05 	vldr	s15, [r3, #20]
 8001894:	ed93 3a00 	vldr	s6, [r3]
 8001898:	eeb4 3ae7 	vcmpe.f32	s6, s15
 800189c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018a0:	bfc8      	it	gt
 80018a2:	edc3 7a00 	vstrgt	s15, [r3]
	if(t_skalering.pv > t_skalering.vhf){			t_skalering.pv = t_skalering.vhf;		}
 80018a6:	4b34      	ldr	r3, [pc, #208]	; (8001978 <skaler_paadrag+0x27c>)
 80018a8:	edd3 7a06 	vldr	s15, [r3, #24]
 80018ac:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
 80018b0:	eef4 7ac3 	vcmpe.f32	s15, s6
 80018b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018b8:	bf48      	it	mi
 80018ba:	edc3 7a01 	vstrmi	s15, [r3, #4]
	if(t_skalering.pv > t_skalering.vhb){			t_skalering.pv = t_skalering.vhb;		}
 80018be:	4b2e      	ldr	r3, [pc, #184]	; (8001978 <skaler_paadrag+0x27c>)
 80018c0:	edd3 7a07 	vldr	s15, [r3, #28]
 80018c4:	ed93 3a01 	vldr	s6, [r3, #4]
 80018c8:	eeb4 3ae7 	vcmpe.f32	s6, s15
 80018cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018d0:	bfc8      	it	gt
 80018d2:	edc3 7a01 	vstrgt	s15, [r3, #4]
	if(t_skalering.pv > t_skalering.vvb){			t_skalering.pv = t_skalering.vvb;		}
 80018d6:	4b28      	ldr	r3, [pc, #160]	; (8001978 <skaler_paadrag+0x27c>)
 80018d8:	edd3 7a08 	vldr	s15, [r3, #32]
 80018dc:	ed93 3a01 	vldr	s6, [r3, #4]
 80018e0:	eeb4 3ae7 	vcmpe.f32	s6, s15
 80018e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018e8:	bfc8      	it	gt
 80018ea:	edc3 7a01 	vstrgt	s15, [r3, #4]
	if(t_skalering.pv > t_skalering.vvf){			t_skalering.pv = t_skalering.vvf;		}
 80018ee:	4b22      	ldr	r3, [pc, #136]	; (8001978 <skaler_paadrag+0x27c>)
 80018f0:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80018f4:	ed93 3a01 	vldr	s6, [r3, #4]
 80018f8:	eeb4 3ae7 	vcmpe.f32	s6, s15
 80018fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001900:	bfc8      	it	gt
 8001902:	edc3 7a01 	vstrgt	s15, [r3, #4]

	if(t_skalering.ph < 1.0){
 8001906:	4b1c      	ldr	r3, [pc, #112]	; (8001978 <skaler_paadrag+0x27c>)
 8001908:	edd3 7a00 	vldr	s15, [r3]
 800190c:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
 8001910:	eef4 7ac3 	vcmpe.f32	s15, s6
 8001914:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001918:	d40a      	bmi.n	8001930 <skaler_paadrag+0x234>
		totalbidrag.hhf *= t_skalering.ph;
		totalbidrag.hhb *= t_skalering.ph;
		totalbidrag.hvb *= t_skalering.ph;
		totalbidrag.hvf *= t_skalering.ph;
	}
	if(t_skalering.pv < 1.0){
 800191a:	4b17      	ldr	r3, [pc, #92]	; (8001978 <skaler_paadrag+0x27c>)
 800191c:	edd3 7a01 	vldr	s15, [r3, #4]
 8001920:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 8001924:	eef4 7ac5 	vcmpe.f32	s15, s10
 8001928:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800192c:	d412      	bmi.n	8001954 <skaler_paadrag+0x258>
		totalbidrag.vhf *= t_skalering.pv;
		totalbidrag.vhb *= t_skalering.pv;
		totalbidrag.vvb *= t_skalering.pv;
		totalbidrag.vvf *= t_skalering.pv;
	}
}
 800192e:	4770      	bx	lr
		totalbidrag.hhf *= t_skalering.ph;
 8001930:	4b12      	ldr	r3, [pc, #72]	; (800197c <skaler_paadrag+0x280>)
 8001932:	ee63 3aa7 	vmul.f32	s7, s7, s15
 8001936:	edc3 3a00 	vstr	s7, [r3]
		totalbidrag.hhb *= t_skalering.ph;
 800193a:	ee24 4a27 	vmul.f32	s8, s8, s15
 800193e:	ed83 4a01 	vstr	s8, [r3, #4]
		totalbidrag.hvb *= t_skalering.ph;
 8001942:	ee64 4aa7 	vmul.f32	s9, s9, s15
 8001946:	edc3 4a02 	vstr	s9, [r3, #8]
		totalbidrag.hvf *= t_skalering.ph;
 800194a:	ee65 7a27 	vmul.f32	s15, s10, s15
 800194e:	edc3 7a03 	vstr	s15, [r3, #12]
 8001952:	e7e2      	b.n	800191a <skaler_paadrag+0x21e>
		totalbidrag.vhf *= t_skalering.pv;
 8001954:	4b09      	ldr	r3, [pc, #36]	; (800197c <skaler_paadrag+0x280>)
 8001956:	ee65 5aa7 	vmul.f32	s11, s11, s15
 800195a:	edc3 5a04 	vstr	s11, [r3, #16]
		totalbidrag.vhb *= t_skalering.pv;
 800195e:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001962:	ed83 6a05 	vstr	s12, [r3, #20]
		totalbidrag.vvb *= t_skalering.pv;
 8001966:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800196a:	edc3 6a06 	vstr	s13, [r3, #24]
		totalbidrag.vvf *= t_skalering.pv;
 800196e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001972:	edc3 7a07 	vstr	s15, [r3, #28]
}
 8001976:	e7da      	b.n	800192e <skaler_paadrag+0x232>
 8001978:	20000cb0 	.word	0x20000cb0
 800197c:	20000d34 	.word	0x20000d34
 8001980:	42c80000 	.word	0x42c80000

08001984 <skriv_thruster_PWM>:

void skriv_thruster_PWM(void){		// Skriver ny pulsbredde for PWM-signalet til hver respektive Compare Register.
	TIM2->CCR1 = thruster_PWM.hhf;  		// HHF
 8001984:	4b0e      	ldr	r3, [pc, #56]	; (80019c0 <skriv_thruster_PWM+0x3c>)
 8001986:	f9b3 1000 	ldrsh.w	r1, [r3]
 800198a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800198e:	6351      	str	r1, [r2, #52]	; 0x34
	TIM2->CCR2 = thruster_PWM.hhb;  		// HHB
 8001990:	f9b3 1002 	ldrsh.w	r1, [r3, #2]
 8001994:	6391      	str	r1, [r2, #56]	; 0x38
	TIM2->CCR3 = thruster_PWM.hvb;  		// HVB
 8001996:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 800199a:	63d1      	str	r1, [r2, #60]	; 0x3c
	TIM2->CCR4 = thruster_PWM.hvf;  		// HVF
 800199c:	f9b3 1006 	ldrsh.w	r1, [r3, #6]
 80019a0:	6411      	str	r1, [r2, #64]	; 0x40
	TIM3->CCR1 = thruster_PWM.vhf;  		// VHF
 80019a2:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80019a6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80019aa:	6351      	str	r1, [r2, #52]	; 0x34
	TIM3->CCR2 = thruster_PWM.vhb;  		// VHB
 80019ac:	f9b3 100a 	ldrsh.w	r1, [r3, #10]
 80019b0:	6391      	str	r1, [r2, #56]	; 0x38
	TIM3->CCR3 = thruster_PWM.vvb;  		// VVB
 80019b2:	f9b3 100c 	ldrsh.w	r1, [r3, #12]
 80019b6:	63d1      	str	r1, [r2, #60]	; 0x3c
	TIM3->CCR4 = thruster_PWM.vvf;  		// VVF
 80019b8:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80019bc:	6413      	str	r3, [r2, #64]	; 0x40
}
 80019be:	4770      	bx	lr
 80019c0:	20000d1c 	.word	0x20000d1c

080019c4 <skriv_manipulator_PWM>:

void skriv_manipulator_PWM(void){	// Skriver ny pulsbredde for PWM-signalet til hver respektive Compare Register.

	if(flagg.manipulator_null){
 80019c4:	4b34      	ldr	r3, [pc, #208]	; (8001a98 <skriv_manipulator_PWM+0xd4>)
 80019c6:	7c5b      	ldrb	r3, [r3, #17]
 80019c8:	b1c3      	cbz	r3, 80019fc <skriv_manipulator_PWM+0x38>
		manipulator_PWM.teleskop = NEUTRAL;
 80019ca:	4b34      	ldr	r3, [pc, #208]	; (8001a9c <skriv_manipulator_PWM+0xd8>)
 80019cc:	f240 52db 	movw	r2, #1499	; 0x5db
 80019d0:	801a      	strh	r2, [r3, #0]
		manipulator_PWM.vri = NEUTRAL;
 80019d2:	805a      	strh	r2, [r3, #2]
		manipulator_PWM.klype = NEUTRAL;
 80019d4:	809a      	strh	r2, [r3, #4]
		flagg.manipulator_null = 0;
 80019d6:	4b30      	ldr	r3, [pc, #192]	; (8001a98 <skriv_manipulator_PWM+0xd4>)
 80019d8:	2200      	movs	r2, #0
 80019da:	745a      	strb	r2, [r3, #17]
		manipulator_PWM.teleskop = manipulator_filter.teleskop * param.demping.pfa + param.demping.pfb * manipulator_PWM.teleskop;
		manipulator_PWM.vri = manipulator_filter.vri * param.demping.pfa + param.demping.pfb * manipulator_PWM.vri;
		manipulator_PWM.klype = manipulator_filter.klype * param.demping.pfa + param.demping.pfb * manipulator_PWM.klype;
	}

	TIM4->CCR1 = manipulator_PWM.teleskop;	// Teleskop
 80019dc:	4a2f      	ldr	r2, [pc, #188]	; (8001a9c <skriv_manipulator_PWM+0xd8>)
 80019de:	f9b2 0000 	ldrsh.w	r0, [r2]
 80019e2:	4b2f      	ldr	r3, [pc, #188]	; (8001aa0 <skriv_manipulator_PWM+0xdc>)
 80019e4:	6358      	str	r0, [r3, #52]	; 0x34
	TIM4->CCR2 = manipulator_PWM.vri;	// Rull
 80019e6:	f9b2 1002 	ldrsh.w	r1, [r2, #2]
 80019ea:	6399      	str	r1, [r3, #56]	; 0x38
	TIM4->CCR3 = manipulator_PWM.klype;	// Klype
 80019ec:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 80019f0:	63da      	str	r2, [r3, #60]	; 0x3c

	manipulator_filter.teleskop = manipulator_PWM.teleskop;
 80019f2:	4b2c      	ldr	r3, [pc, #176]	; (8001aa4 <skriv_manipulator_PWM+0xe0>)
 80019f4:	8018      	strh	r0, [r3, #0]
	manipulator_filter.vri = manipulator_PWM.vri;
 80019f6:	8059      	strh	r1, [r3, #2]
	manipulator_filter.klype = manipulator_PWM.klype;
 80019f8:	809a      	strh	r2, [r3, #4]
}
 80019fa:	4770      	bx	lr
		manipulator_PWM.teleskop = manipulator_filter.teleskop * param.demping.pfa + param.demping.pfb * manipulator_PWM.teleskop;
 80019fc:	4b2a      	ldr	r3, [pc, #168]	; (8001aa8 <skriv_manipulator_PWM+0xe4>)
 80019fe:	ed93 7a07 	vldr	s14, [r3, #28]
 8001a02:	edd3 5a08 	vldr	s11, [r3, #32]
 8001a06:	4b25      	ldr	r3, [pc, #148]	; (8001a9c <skriv_manipulator_PWM+0xd8>)
 8001a08:	4a26      	ldr	r2, [pc, #152]	; (8001aa4 <skriv_manipulator_PWM+0xe0>)
 8001a0a:	f9b2 1000 	ldrsh.w	r1, [r2]
 8001a0e:	ee06 1a90 	vmov	s13, r1
 8001a12:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8001a16:	ee66 6a87 	vmul.f32	s13, s13, s14
 8001a1a:	f9b3 1000 	ldrsh.w	r1, [r3]
 8001a1e:	ee06 1a10 	vmov	s12, r1
 8001a22:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8001a26:	ee26 6a25 	vmul.f32	s12, s12, s11
 8001a2a:	ee76 6a86 	vadd.f32	s13, s13, s12
 8001a2e:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 8001a32:	ee16 1a90 	vmov	r1, s13
 8001a36:	8019      	strh	r1, [r3, #0]
		manipulator_PWM.vri = manipulator_filter.vri * param.demping.pfa + param.demping.pfb * manipulator_PWM.vri;
 8001a38:	f9b2 1002 	ldrsh.w	r1, [r2, #2]
 8001a3c:	ee06 1a90 	vmov	s13, r1
 8001a40:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8001a44:	ee66 6a87 	vmul.f32	s13, s13, s14
 8001a48:	f9b3 1002 	ldrsh.w	r1, [r3, #2]
 8001a4c:	ee06 1a10 	vmov	s12, r1
 8001a50:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8001a54:	ee26 6a25 	vmul.f32	s12, s12, s11
 8001a58:	ee76 6a86 	vadd.f32	s13, s13, s12
 8001a5c:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 8001a60:	ee16 1a90 	vmov	r1, s13
 8001a64:	8059      	strh	r1, [r3, #2]
		manipulator_PWM.klype = manipulator_filter.klype * param.demping.pfa + param.demping.pfb * manipulator_PWM.klype;
 8001a66:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8001a6a:	ee07 2a90 	vmov	s15, r2
 8001a6e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a72:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001a76:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8001a7a:	ee07 2a90 	vmov	s15, r2
 8001a7e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a82:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8001a86:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a8a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a8e:	ee17 2a90 	vmov	r2, s15
 8001a92:	809a      	strh	r2, [r3, #4]
 8001a94:	e7a2      	b.n	80019dc <skriv_manipulator_PWM+0x18>
 8001a96:	bf00      	nop
 8001a98:	20000244 	.word	0x20000244
 8001a9c:	20000534 	.word	0x20000534
 8001aa0:	40000800 	.word	0x40000800
 8001aa4:	2000053c 	.word	0x2000053c
 8001aa8:	200006ec 	.word	0x200006ec

08001aac <manipulator_styring>:
void manipulator_styring(void){
 8001aac:	b510      	push	{r4, lr}
	uint8_t COM = styremelding.manipulator; // 
 8001aae:	4b74      	ldr	r3, [pc, #464]	; (8001c80 <manipulator_styring+0x1d4>)
 8001ab0:	791c      	ldrb	r4, [r3, #4]
	if ((COM & MAN_KLYPE) && controller_status) {
 8001ab2:	f014 0f30 	tst.w	r4, #48	; 0x30
 8001ab6:	f000 80c2 	beq.w	8001c3e <manipulator_styring+0x192>
 8001aba:	4b72      	ldr	r3, [pc, #456]	; (8001c84 <manipulator_styring+0x1d8>)
 8001abc:	781b      	ldrb	r3, [r3, #0]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d035      	beq.n	8001b2e <manipulator_styring+0x82>
		test_thrustere = 0;
 8001ac2:	4b71      	ldr	r3, [pc, #452]	; (8001c88 <manipulator_styring+0x1dc>)
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	701a      	strb	r2, [r3, #0]
		if (active_step.SEQ_STATUS){
 8001ac8:	4b70      	ldr	r3, [pc, #448]	; (8001c8c <manipulator_styring+0x1e0>)
 8001aca:	781b      	ldrb	r3, [r3, #0]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d13a      	bne.n	8001b46 <manipulator_styring+0x9a>
		controller_status = 0;
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	4b6c      	ldr	r3, [pc, #432]	; (8001c84 <manipulator_styring+0x1d8>)
 8001ad4:	701a      	strb	r2, [r3, #0]
		memset(&ctrl_ref, 0, sizeof(NED_eta));
 8001ad6:	4b6e      	ldr	r3, [pc, #440]	; (8001c90 <manipulator_styring+0x1e4>)
 8001ad8:	601a      	str	r2, [r3, #0]
 8001ada:	605a      	str	r2, [r3, #4]
 8001adc:	60da      	str	r2, [r3, #12]
 8001ade:	611a      	str	r2, [r3, #16]
 8001ae0:	615a      	str	r2, [r3, #20]
		ctrl_ref.z = model_states.z;
 8001ae2:	4a6c      	ldr	r2, [pc, #432]	; (8001c94 <manipulator_styring+0x1e8>)
 8001ae4:	6892      	ldr	r2, [r2, #8]
 8001ae6:	609a      	str	r2, [r3, #8]
		reset_pid_values(&pid_heave); reset_pid_values(&pid_roll); reset_pid_values(&pid_pitch);
 8001ae8:	486b      	ldr	r0, [pc, #428]	; (8001c98 <manipulator_styring+0x1ec>)
 8001aea:	f003 f97f 	bl	8004dec <reset_pid_values>
 8001aee:	486b      	ldr	r0, [pc, #428]	; (8001c9c <manipulator_styring+0x1f0>)
 8001af0:	f003 f97c 	bl	8004dec <reset_pid_values>
 8001af4:	486a      	ldr	r0, [pc, #424]	; (8001ca0 <manipulator_styring+0x1f4>)
 8001af6:	f003 f979 	bl	8004dec <reset_pid_values>
		reset_lqr_values(&lqr_reg);
 8001afa:	486a      	ldr	r0, [pc, #424]	; (8001ca4 <manipulator_styring+0x1f8>)
 8001afc:	f003 f97b 	bl	8004df6 <reset_lqr_values>
		reset_smc_values(&smc_heave); reset_smc_values(&smc_roll); reset_smc_values(&smc_pitch);
 8001b00:	4869      	ldr	r0, [pc, #420]	; (8001ca8 <manipulator_styring+0x1fc>)
 8001b02:	f003 f980 	bl	8004e06 <reset_smc_values>
 8001b06:	4869      	ldr	r0, [pc, #420]	; (8001cac <manipulator_styring+0x200>)
 8001b08:	f003 f97d 	bl	8004e06 <reset_smc_values>
 8001b0c:	4868      	ldr	r0, [pc, #416]	; (8001cb0 <manipulator_styring+0x204>)
 8001b0e:	f003 f97a 	bl	8004e06 <reset_smc_values>
		memcpy(&thruster_PWM, &oppstart_PWM, sizeof(thruster_sett));
 8001b12:	4b68      	ldr	r3, [pc, #416]	; (8001cb4 <manipulator_styring+0x208>)
 8001b14:	4a68      	ldr	r2, [pc, #416]	; (8001cb8 <manipulator_styring+0x20c>)
 8001b16:	f8d2 c000 	ldr.w	ip, [r2]
 8001b1a:	6850      	ldr	r0, [r2, #4]
 8001b1c:	6891      	ldr	r1, [r2, #8]
 8001b1e:	68d2      	ldr	r2, [r2, #12]
 8001b20:	f8c3 c000 	str.w	ip, [r3]
 8001b24:	6058      	str	r0, [r3, #4]
 8001b26:	6099      	str	r1, [r3, #8]
 8001b28:	60da      	str	r2, [r3, #12]
		skriv_thruster_PWM();
 8001b2a:	f7ff ff2b 	bl	8001984 <skriv_thruster_PWM>
	if (COM & MAN_ON){
 8001b2e:	f014 0f40 	tst.w	r4, #64	; 0x40
 8001b32:	d110      	bne.n	8001b56 <manipulator_styring+0xaa>
		memcpy(&manipulator_PWM, &oppstart_PWM, sizeof(manipulator_sett));
 8001b34:	4b61      	ldr	r3, [pc, #388]	; (8001cbc <manipulator_styring+0x210>)
 8001b36:	4a60      	ldr	r2, [pc, #384]	; (8001cb8 <manipulator_styring+0x20c>)
 8001b38:	6811      	ldr	r1, [r2, #0]
 8001b3a:	6019      	str	r1, [r3, #0]
 8001b3c:	8892      	ldrh	r2, [r2, #4]
 8001b3e:	809a      	strh	r2, [r3, #4]
	skriv_manipulator_PWM();
 8001b40:	f7ff ff40 	bl	80019c4 <skriv_manipulator_PWM>
}
 8001b44:	bd10      	pop	{r4, pc}
			active_step.SEQ_STATUS = 0;
 8001b46:	4613      	mov	r3, r2
 8001b48:	4a50      	ldr	r2, [pc, #320]	; (8001c8c <manipulator_styring+0x1e0>)
 8001b4a:	7013      	strb	r3, [r2, #0]
			memset(&step_counter, 0, sizeof(step_timers));
 8001b4c:	4a5c      	ldr	r2, [pc, #368]	; (8001cc0 <manipulator_styring+0x214>)
 8001b4e:	6013      	str	r3, [r2, #0]
 8001b50:	6053      	str	r3, [r2, #4]
 8001b52:	6093      	str	r3, [r2, #8]
 8001b54:	e7bc      	b.n	8001ad0 <manipulator_styring+0x24>
			if(COM & MAN_KLYPE_LUKKE){	manipulator_PWM.klype = NEUTRAL-(param.demping.klype*400);}	// Lukke kloa
 8001b56:	f014 0f20 	tst.w	r4, #32
 8001b5a:	d016      	beq.n	8001b8a <manipulator_styring+0xde>
 8001b5c:	4b59      	ldr	r3, [pc, #356]	; (8001cc4 <manipulator_styring+0x218>)
 8001b5e:	edd3 7a06 	vldr	s15, [r3, #24]
 8001b62:	ed9f 7a59 	vldr	s14, [pc, #356]	; 8001cc8 <manipulator_styring+0x21c>
 8001b66:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001b6a:	eddf 7a58 	vldr	s15, [pc, #352]	; 8001ccc <manipulator_styring+0x220>
 8001b6e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001b72:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b76:	ee17 3a90 	vmov	r3, s15
 8001b7a:	b21b      	sxth	r3, r3
 8001b7c:	4a4f      	ldr	r2, [pc, #316]	; (8001cbc <manipulator_styring+0x210>)
 8001b7e:	8093      	strh	r3, [r2, #4]
			manipulator_PWM.vri = 		NEUTRAL;
 8001b80:	f240 53db 	movw	r3, #1499	; 0x5db
 8001b84:	8053      	strh	r3, [r2, #2]
			manipulator_PWM.teleskop = 	NEUTRAL;
 8001b86:	8013      	strh	r3, [r2, #0]
 8001b88:	e7da      	b.n	8001b40 <manipulator_styring+0x94>
			else{						manipulator_PWM.klype = NEUTRAL+(param.demping.klype*400);}	// Åpne kloa
 8001b8a:	4b4e      	ldr	r3, [pc, #312]	; (8001cc4 <manipulator_styring+0x218>)
 8001b8c:	edd3 7a06 	vldr	s15, [r3, #24]
 8001b90:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 8001cc8 <manipulator_styring+0x21c>
 8001b94:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b98:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 8001ccc <manipulator_styring+0x220>
 8001b9c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001ba0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001ba4:	ee17 3a90 	vmov	r3, s15
 8001ba8:	b21b      	sxth	r3, r3
 8001baa:	e7e7      	b.n	8001b7c <manipulator_styring+0xd0>
			else{						manipulator_PWM.vri = NEUTRAL+(param.demping.vri*400);}		// kloa roterer med klokka
 8001bac:	4b45      	ldr	r3, [pc, #276]	; (8001cc4 <manipulator_styring+0x218>)
 8001bae:	edd3 7a05 	vldr	s15, [r3, #20]
 8001bb2:	ed9f 7a45 	vldr	s14, [pc, #276]	; 8001cc8 <manipulator_styring+0x21c>
 8001bb6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001bba:	ed9f 7a44 	vldr	s14, [pc, #272]	; 8001ccc <manipulator_styring+0x220>
 8001bbe:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001bc2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001bc6:	ee17 3a90 	vmov	r3, s15
 8001bca:	b21b      	sxth	r3, r3
 8001bcc:	e051      	b.n	8001c72 <manipulator_styring+0x1c6>
		else if(COM & MAN_TELESKOP){	// manipulator rotering aktiv
 8001bce:	f014 0f03 	tst.w	r4, #3
 8001bd2:	d02a      	beq.n	8001c2a <manipulator_styring+0x17e>
			if(COM & MAN_TELESKOP_UT){	manipulator_PWM.teleskop = NEUTRAL+(param.demping.teleskop*400);}		// manipulatoren går ut
 8001bd4:	f014 0f02 	tst.w	r4, #2
 8001bd8:	d016      	beq.n	8001c08 <manipulator_styring+0x15c>
 8001bda:	4b3a      	ldr	r3, [pc, #232]	; (8001cc4 <manipulator_styring+0x218>)
 8001bdc:	edd3 7a04 	vldr	s15, [r3, #16]
 8001be0:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8001cc8 <manipulator_styring+0x21c>
 8001be4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001be8:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8001ccc <manipulator_styring+0x220>
 8001bec:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001bf0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001bf4:	ee17 3a90 	vmov	r3, s15
 8001bf8:	b21b      	sxth	r3, r3
 8001bfa:	4a30      	ldr	r2, [pc, #192]	; (8001cbc <manipulator_styring+0x210>)
 8001bfc:	8013      	strh	r3, [r2, #0]
			manipulator_PWM.klype =		NEUTRAL;
 8001bfe:	f240 53db 	movw	r3, #1499	; 0x5db
 8001c02:	8093      	strh	r3, [r2, #4]
			manipulator_PWM.vri = 		NEUTRAL;
 8001c04:	8053      	strh	r3, [r2, #2]
 8001c06:	e79b      	b.n	8001b40 <manipulator_styring+0x94>
			else{						manipulator_PWM.teleskop = NEUTRAL-(param.demping.teleskop*400);}		// manipulatoren går inn
 8001c08:	4b2e      	ldr	r3, [pc, #184]	; (8001cc4 <manipulator_styring+0x218>)
 8001c0a:	edd3 7a04 	vldr	s15, [r3, #16]
 8001c0e:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8001cc8 <manipulator_styring+0x21c>
 8001c12:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001c16:	eddf 7a2d 	vldr	s15, [pc, #180]	; 8001ccc <manipulator_styring+0x220>
 8001c1a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001c1e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001c22:	ee17 3a90 	vmov	r3, s15
 8001c26:	b21b      	sxth	r3, r3
 8001c28:	e7e7      	b.n	8001bfa <manipulator_styring+0x14e>
			manipulator_PWM.klype =		NEUTRAL;
 8001c2a:	4b24      	ldr	r3, [pc, #144]	; (8001cbc <manipulator_styring+0x210>)
 8001c2c:	f240 52db 	movw	r2, #1499	; 0x5db
 8001c30:	809a      	strh	r2, [r3, #4]
			manipulator_PWM.vri = 		NEUTRAL;
 8001c32:	805a      	strh	r2, [r3, #2]
			manipulator_PWM.teleskop =	NEUTRAL;
 8001c34:	801a      	strh	r2, [r3, #0]
			flagg.manipulator_null = 1;
 8001c36:	4b26      	ldr	r3, [pc, #152]	; (8001cd0 <manipulator_styring+0x224>)
 8001c38:	2201      	movs	r2, #1
 8001c3a:	745a      	strb	r2, [r3, #17]
 8001c3c:	e780      	b.n	8001b40 <manipulator_styring+0x94>
	if (COM & MAN_ON){
 8001c3e:	f014 0f40 	tst.w	r4, #64	; 0x40
 8001c42:	f43f af77 	beq.w	8001b34 <manipulator_styring+0x88>
		else if(COM & MAN_VRI){			// manipulator rotering aktiv
 8001c46:	f014 0f0c 	tst.w	r4, #12
 8001c4a:	d0c0      	beq.n	8001bce <manipulator_styring+0x122>
			if(COM & MAN_VRI_CCW){		manipulator_PWM.vri = NEUTRAL-(param.demping.vri*400);}		// kloa roterer mot klokka
 8001c4c:	f014 0f08 	tst.w	r4, #8
 8001c50:	d0ac      	beq.n	8001bac <manipulator_styring+0x100>
 8001c52:	4b1c      	ldr	r3, [pc, #112]	; (8001cc4 <manipulator_styring+0x218>)
 8001c54:	edd3 7a05 	vldr	s15, [r3, #20]
 8001c58:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8001cc8 <manipulator_styring+0x21c>
 8001c5c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001c60:	eddf 7a1a 	vldr	s15, [pc, #104]	; 8001ccc <manipulator_styring+0x220>
 8001c64:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001c68:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001c6c:	ee17 3a90 	vmov	r3, s15
 8001c70:	b21b      	sxth	r3, r3
 8001c72:	4a12      	ldr	r2, [pc, #72]	; (8001cbc <manipulator_styring+0x210>)
 8001c74:	8053      	strh	r3, [r2, #2]
			manipulator_PWM.klype =		NEUTRAL;
 8001c76:	f240 53db 	movw	r3, #1499	; 0x5db
 8001c7a:	8093      	strh	r3, [r2, #4]
			manipulator_PWM.teleskop = 	NEUTRAL;
 8001c7c:	8013      	strh	r3, [r2, #0]
 8001c7e:	e75f      	b.n	8001b40 <manipulator_styring+0x94>
 8001c80:	20000ca0 	.word	0x20000ca0
 8001c84:	200001fc 	.word	0x200001fc
 8001c88:	20000ce4 	.word	0x20000ce4
 8001c8c:	200000f0 	.word	0x200000f0
 8001c90:	20000220 	.word	0x20000220
 8001c94:	2000054c 	.word	0x2000054c
 8001c98:	200007c0 	.word	0x200007c0
 8001c9c:	20000820 	.word	0x20000820
 8001ca0:	200007f0 	.word	0x200007f0
 8001ca4:	20000504 	.word	0x20000504
 8001ca8:	20000b70 	.word	0x20000b70
 8001cac:	20000bd0 	.word	0x20000bd0
 8001cb0:	20000ba0 	.word	0x20000ba0
 8001cb4:	20000d1c 	.word	0x20000d1c
 8001cb8:	20000008 	.word	0x20000008
 8001cbc:	20000534 	.word	0x20000534
 8001cc0:	20000c54 	.word	0x20000c54
 8001cc4:	200006ec 	.word	0x200006ec
 8001cc8:	43c80000 	.word	0x43c80000
 8001ccc:	44bb6000 	.word	0x44bb6000
 8001cd0:	20000244 	.word	0x20000244
 8001cd4:	00000000 	.word	0x00000000

08001cd8 <effekt_kontroll>:

void effekt_kontroll(void){
	if(effekt_forbruk.thruster_12v > 10000){
 8001cd8:	4b0d      	ldr	r3, [pc, #52]	; (8001d10 <effekt_kontroll+0x38>)
 8001cda:	881a      	ldrh	r2, [r3, #0]
 8001cdc:	f242 7310 	movw	r3, #10000	; 0x2710
 8001ce0:	429a      	cmp	r2, r3
 8001ce2:	d90d      	bls.n	8001d00 <effekt_kontroll+0x28>
void effekt_kontroll(void){
 8001ce4:	b510      	push	{r4, lr}
		gain *= 0.8;
 8001ce6:	4c0b      	ldr	r4, [pc, #44]	; (8001d14 <effekt_kontroll+0x3c>)
 8001ce8:	6820      	ldr	r0, [r4, #0]
 8001cea:	f7fe fbd1 	bl	8000490 <__aeabi_f2d>
 8001cee:	a306      	add	r3, pc, #24	; (adr r3, 8001d08 <effekt_kontroll+0x30>)
 8001cf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cf4:	f7fe fc24 	bl	8000540 <__aeabi_dmul>
 8001cf8:	f7fe fefa 	bl	8000af0 <__aeabi_d2f>
 8001cfc:	6020      	str	r0, [r4, #0]
	}
}
 8001cfe:	bd10      	pop	{r4, pc}
 8001d00:	4770      	bx	lr
 8001d02:	bf00      	nop
 8001d04:	f3af 8000 	nop.w
 8001d08:	9999999a 	.word	0x9999999a
 8001d0c:	3fe99999 	.word	0x3fe99999
 8001d10:	20000238 	.word	0x20000238
 8001d14:	2000025c 	.word	0x2000025c

08001d18 <ESC_status>:

void ESC_status(void){
	sum_paadrag = abs(thrusterdata.hhf) + abs(thrusterdata.hhb) + abs(thrusterdata.hvb) + abs(thrusterdata.hvf)
 8001d18:	4b2e      	ldr	r3, [pc, #184]	; (8001dd4 <ESC_status+0xbc>)
 8001d1a:	f993 2000 	ldrsb.w	r2, [r3]
 8001d1e:	2a00      	cmp	r2, #0
 8001d20:	bfb8      	it	lt
 8001d22:	4252      	neglt	r2, r2
 8001d24:	f993 1001 	ldrsb.w	r1, [r3, #1]
 8001d28:	2900      	cmp	r1, #0
 8001d2a:	bfb8      	it	lt
 8001d2c:	4249      	neglt	r1, r1
 8001d2e:	b2c9      	uxtb	r1, r1
 8001d30:	fa51 f182 	uxtab	r1, r1, r2
 8001d34:	f993 2002 	ldrsb.w	r2, [r3, #2]
 8001d38:	2a00      	cmp	r2, #0
 8001d3a:	bfb8      	it	lt
 8001d3c:	4252      	neglt	r2, r2
 8001d3e:	fa51 f282 	uxtab	r2, r1, r2
 8001d42:	f993 1003 	ldrsb.w	r1, [r3, #3]
 8001d46:	2900      	cmp	r1, #0
 8001d48:	bfb8      	it	lt
 8001d4a:	4249      	neglt	r1, r1
 8001d4c:	fa52 f281 	uxtab	r2, r2, r1
			+ abs(thrusterdata.vhf) + abs(thrusterdata.vhb) + abs(thrusterdata.vvb) + abs(thrusterdata.vvf);
 8001d50:	f993 1004 	ldrsb.w	r1, [r3, #4]
 8001d54:	2900      	cmp	r1, #0
 8001d56:	bfb8      	it	lt
 8001d58:	4249      	neglt	r1, r1
 8001d5a:	fa52 f181 	uxtab	r1, r2, r1
 8001d5e:	f993 2005 	ldrsb.w	r2, [r3, #5]
 8001d62:	2a00      	cmp	r2, #0
 8001d64:	bfb8      	it	lt
 8001d66:	4252      	neglt	r2, r2
 8001d68:	fa51 f182 	uxtab	r1, r1, r2
 8001d6c:	f993 2006 	ldrsb.w	r2, [r3, #6]
 8001d70:	2a00      	cmp	r2, #0
 8001d72:	bfb8      	it	lt
 8001d74:	4252      	neglt	r2, r2
 8001d76:	fa51 f282 	uxtab	r2, r1, r2
 8001d7a:	f993 3007 	ldrsb.w	r3, [r3, #7]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	bfb8      	it	lt
 8001d82:	425b      	neglt	r3, r3
 8001d84:	fa52 f383 	uxtab	r3, r2, r3
	sum_paadrag = abs(thrusterdata.hhf) + abs(thrusterdata.hhb) + abs(thrusterdata.hvb) + abs(thrusterdata.hvf)
 8001d88:	4a13      	ldr	r2, [pc, #76]	; (8001dd8 <ESC_status+0xc0>)
 8001d8a:	6013      	str	r3, [r2, #0]
	if((sum_paadrag > 300) && (effekt_forbruk.thruster_12v < 50) && (effekt_forbruk.thruster_12v != 0)){esc_status_avprell++;}
 8001d8c:	6813      	ldr	r3, [r2, #0]
 8001d8e:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001d92:	d91b      	bls.n	8001dcc <ESC_status+0xb4>
 8001d94:	4b11      	ldr	r3, [pc, #68]	; (8001ddc <ESC_status+0xc4>)
 8001d96:	881b      	ldrh	r3, [r3, #0]
 8001d98:	3b01      	subs	r3, #1
 8001d9a:	b29b      	uxth	r3, r3
 8001d9c:	2b30      	cmp	r3, #48	; 0x30
 8001d9e:	d80c      	bhi.n	8001dba <ESC_status+0xa2>
 8001da0:	4b0f      	ldr	r3, [pc, #60]	; (8001de0 <ESC_status+0xc8>)
 8001da2:	781b      	ldrb	r3, [r3, #0]
 8001da4:	3301      	adds	r3, #1
 8001da6:	b25b      	sxtb	r3, r3
	else{esc_status_avprell = 0;}
	if(esc_status_avprell >= 24){
 8001da8:	2b17      	cmp	r3, #23
 8001daa:	dd07      	ble.n	8001dbc <ESC_status+0xa4>
		esc_status_avprell = 0;
 8001dac:	4b0c      	ldr	r3, [pc, #48]	; (8001de0 <ESC_status+0xc8>)
 8001dae:	2200      	movs	r2, #0
 8001db0:	701a      	strb	r2, [r3, #0]
		esc_reset = 1;
 8001db2:	4b0c      	ldr	r3, [pc, #48]	; (8001de4 <ESC_status+0xcc>)
 8001db4:	2201      	movs	r2, #1
 8001db6:	701a      	strb	r2, [r3, #0]
	}
	if(esc_status_avprell < 0){esc_status_avprell = 0;}
 8001db8:	4770      	bx	lr
	else{esc_status_avprell = 0;}
 8001dba:	2300      	movs	r3, #0
 8001dbc:	4a08      	ldr	r2, [pc, #32]	; (8001de0 <ESC_status+0xc8>)
 8001dbe:	7013      	strb	r3, [r2, #0]
	if(esc_status_avprell < 0){esc_status_avprell = 0;}
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	da06      	bge.n	8001dd2 <ESC_status+0xba>
 8001dc4:	4613      	mov	r3, r2
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	701a      	strb	r2, [r3, #0]
}
 8001dca:	4770      	bx	lr
 8001dcc:	4b04      	ldr	r3, [pc, #16]	; (8001de0 <ESC_status+0xc8>)
 8001dce:	2200      	movs	r2, #0
 8001dd0:	701a      	strb	r2, [r3, #0]
 8001dd2:	4770      	bx	lr
 8001dd4:	20000d2c 	.word	0x20000d2c
 8001dd8:	20000cac 	.word	0x20000cac
 8001ddc:	20000238 	.word	0x20000238
 8001de0:	20000241 	.word	0x20000241
 8001de4:	20000240 	.word	0x20000240

08001de8 <sjekk_brytertrykk>:

void sjekk_brytertrykk(void){
	if (GPIOA->IDR & GPIO_PIN_0 ) { 			// Sjekker om bryteren er trykket inn
 8001de8:	4b08      	ldr	r3, [pc, #32]	; (8001e0c <sjekk_brytertrykk+0x24>)
 8001dea:	691b      	ldr	r3, [r3, #16]
 8001dec:	f013 0f01 	tst.w	r3, #1
 8001df0:	d008      	beq.n	8001e04 <sjekk_brytertrykk+0x1c>
       if(!forrige_bryterstatus) { 				// Var bryteren trykket inn sist kontrollsjekk
 8001df2:	4b07      	ldr	r3, [pc, #28]	; (8001e10 <sjekk_brytertrykk+0x28>)
 8001df4:	781b      	ldrb	r3, [r3, #0]
 8001df6:	b943      	cbnz	r3, 8001e0a <sjekk_brytertrykk+0x22>
    	   forrige_bryterstatus = 1;
 8001df8:	2301      	movs	r3, #1
 8001dfa:	4a05      	ldr	r2, [pc, #20]	; (8001e10 <sjekk_brytertrykk+0x28>)
 8001dfc:	7013      	strb	r3, [r2, #0]
    	   brytertrykk = 1;      				// Nytt brytertrykk registrert
 8001dfe:	4a05      	ldr	r2, [pc, #20]	; (8001e14 <sjekk_brytertrykk+0x2c>)
 8001e00:	7013      	strb	r3, [r2, #0]
 8001e02:	4770      	bx	lr
       }
	}
    else {                 						// Hvis bryteren ikke er trykket inn
    	 forrige_bryterstatus = 0; 				// Bryterstatus settes til 0.
 8001e04:	4b02      	ldr	r3, [pc, #8]	; (8001e10 <sjekk_brytertrykk+0x28>)
 8001e06:	2200      	movs	r2, #0
 8001e08:	701a      	strb	r2, [r3, #0]
    }
}
 8001e0a:	4770      	bx	lr
 8001e0c:	40020000 	.word	0x40020000
 8001e10:	20000258 	.word	0x20000258
 8001e14:	200001c4 	.word	0x200001c4

08001e18 <oppdater_ledlys>:


void oppdater_ledlys(void){
	if((thruster_PWM.hhf > 1520) || ((thruster_PWM.hhf < 1480) && led_status)){
 8001e18:	4b61      	ldr	r3, [pc, #388]	; (8001fa0 <oppdater_ledlys+0x188>)
 8001e1a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e1e:	f5b3 6fbe 	cmp.w	r3, #1520	; 0x5f0
 8001e22:	dc08      	bgt.n	8001e36 <oppdater_ledlys+0x1e>
 8001e24:	f5b3 6fb9 	cmp.w	r3, #1480	; 0x5c8
 8001e28:	f280 8089 	bge.w	8001f3e <oppdater_ledlys+0x126>
 8001e2c:	4b5d      	ldr	r3, [pc, #372]	; (8001fa4 <oppdater_ledlys+0x18c>)
 8001e2e:	781b      	ldrb	r3, [r3, #0]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	f000 8084 	beq.w	8001f3e <oppdater_ledlys+0x126>
			GPIOE->ODR |= LED_HHF;	}
 8001e36:	4a5c      	ldr	r2, [pc, #368]	; (8001fa8 <oppdater_ledlys+0x190>)
 8001e38:	6953      	ldr	r3, [r2, #20]
 8001e3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001e3e:	6153      	str	r3, [r2, #20]
	else{	GPIOE->ODR &= ~LED_HHF;	}
	if((thruster_PWM.hhb > 1520) || ((thruster_PWM.hhb < 1480) && led_status)){
 8001e40:	4b57      	ldr	r3, [pc, #348]	; (8001fa0 <oppdater_ledlys+0x188>)
 8001e42:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001e46:	f5b3 6fbe 	cmp.w	r3, #1520	; 0x5f0
 8001e4a:	dc06      	bgt.n	8001e5a <oppdater_ledlys+0x42>
 8001e4c:	f5b3 6fb9 	cmp.w	r3, #1480	; 0x5c8
 8001e50:	da7b      	bge.n	8001f4a <oppdater_ledlys+0x132>
 8001e52:	4b54      	ldr	r3, [pc, #336]	; (8001fa4 <oppdater_ledlys+0x18c>)
 8001e54:	781b      	ldrb	r3, [r3, #0]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d077      	beq.n	8001f4a <oppdater_ledlys+0x132>
			GPIOE->ODR |= LED_HHB;	}
 8001e5a:	4a53      	ldr	r2, [pc, #332]	; (8001fa8 <oppdater_ledlys+0x190>)
 8001e5c:	6953      	ldr	r3, [r2, #20]
 8001e5e:	f043 0320 	orr.w	r3, r3, #32
 8001e62:	6153      	str	r3, [r2, #20]
	else{	GPIOE->ODR &= ~LED_HHB;	}
	if((thruster_PWM.hvb > 1520) || ((thruster_PWM.hvb < 1480) && led_status)){
 8001e64:	4b4e      	ldr	r3, [pc, #312]	; (8001fa0 <oppdater_ledlys+0x188>)
 8001e66:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001e6a:	f5b3 6fbe 	cmp.w	r3, #1520	; 0x5f0
 8001e6e:	dc06      	bgt.n	8001e7e <oppdater_ledlys+0x66>
 8001e70:	f5b3 6fb9 	cmp.w	r3, #1480	; 0x5c8
 8001e74:	da6f      	bge.n	8001f56 <oppdater_ledlys+0x13e>
 8001e76:	4b4b      	ldr	r3, [pc, #300]	; (8001fa4 <oppdater_ledlys+0x18c>)
 8001e78:	781b      	ldrb	r3, [r3, #0]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d06b      	beq.n	8001f56 <oppdater_ledlys+0x13e>
			GPIOE->ODR |= LED_HVB;	}
 8001e7e:	4a4a      	ldr	r2, [pc, #296]	; (8001fa8 <oppdater_ledlys+0x190>)
 8001e80:	6953      	ldr	r3, [r2, #20]
 8001e82:	f043 0304 	orr.w	r3, r3, #4
 8001e86:	6153      	str	r3, [r2, #20]
	else{	GPIOE->ODR &= ~LED_HVB;	}
	if((thruster_PWM.hvf > 1520) || ((thruster_PWM.hvf < 1480) && led_status)){
 8001e88:	4b45      	ldr	r3, [pc, #276]	; (8001fa0 <oppdater_ledlys+0x188>)
 8001e8a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001e8e:	f5b3 6fbe 	cmp.w	r3, #1520	; 0x5f0
 8001e92:	dc06      	bgt.n	8001ea2 <oppdater_ledlys+0x8a>
 8001e94:	f5b3 6fb9 	cmp.w	r3, #1480	; 0x5c8
 8001e98:	da63      	bge.n	8001f62 <oppdater_ledlys+0x14a>
 8001e9a:	4b42      	ldr	r3, [pc, #264]	; (8001fa4 <oppdater_ledlys+0x18c>)
 8001e9c:	781b      	ldrb	r3, [r3, #0]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d05f      	beq.n	8001f62 <oppdater_ledlys+0x14a>
			GPIOE->ODR |= LED_HVF;	}
 8001ea2:	4a41      	ldr	r2, [pc, #260]	; (8001fa8 <oppdater_ledlys+0x190>)
 8001ea4:	6953      	ldr	r3, [r2, #20]
 8001ea6:	f043 0310 	orr.w	r3, r3, #16
 8001eaa:	6153      	str	r3, [r2, #20]
	else{	GPIOE->ODR &= ~LED_HVF;	}
	if((thruster_PWM.vhf > 1520) || ((thruster_PWM.vhf < 1480) && led_status)){
 8001eac:	4b3c      	ldr	r3, [pc, #240]	; (8001fa0 <oppdater_ledlys+0x188>)
 8001eae:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001eb2:	f5b3 6fbe 	cmp.w	r3, #1520	; 0x5f0
 8001eb6:	dc06      	bgt.n	8001ec6 <oppdater_ledlys+0xae>
 8001eb8:	f5b3 6fb9 	cmp.w	r3, #1480	; 0x5c8
 8001ebc:	da57      	bge.n	8001f6e <oppdater_ledlys+0x156>
 8001ebe:	4b39      	ldr	r3, [pc, #228]	; (8001fa4 <oppdater_ledlys+0x18c>)
 8001ec0:	781b      	ldrb	r3, [r3, #0]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d053      	beq.n	8001f6e <oppdater_ledlys+0x156>
			GPIOE->ODR |= LED_VHF;	}
 8001ec6:	4a38      	ldr	r2, [pc, #224]	; (8001fa8 <oppdater_ledlys+0x190>)
 8001ec8:	6953      	ldr	r3, [r2, #20]
 8001eca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ece:	6153      	str	r3, [r2, #20]
	else{	GPIOE->ODR &= ~LED_VHF;	}
	if((thruster_PWM.vhb > 1520) || ((thruster_PWM.vhb < 1480) && led_status)){
 8001ed0:	4b33      	ldr	r3, [pc, #204]	; (8001fa0 <oppdater_ledlys+0x188>)
 8001ed2:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001ed6:	f5b3 6fbe 	cmp.w	r3, #1520	; 0x5f0
 8001eda:	dc06      	bgt.n	8001eea <oppdater_ledlys+0xd2>
 8001edc:	f5b3 6fb9 	cmp.w	r3, #1480	; 0x5c8
 8001ee0:	da4b      	bge.n	8001f7a <oppdater_ledlys+0x162>
 8001ee2:	4b30      	ldr	r3, [pc, #192]	; (8001fa4 <oppdater_ledlys+0x18c>)
 8001ee4:	781b      	ldrb	r3, [r3, #0]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d047      	beq.n	8001f7a <oppdater_ledlys+0x162>
			GPIOE->ODR |= LED_VHB;	}
 8001eea:	4a2f      	ldr	r2, [pc, #188]	; (8001fa8 <oppdater_ledlys+0x190>)
 8001eec:	6953      	ldr	r3, [r2, #20]
 8001eee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ef2:	6153      	str	r3, [r2, #20]
	else{	GPIOE->ODR &= ~LED_VHB;	}
	if((thruster_PWM.vvb > 1520) || ((thruster_PWM.vvb < 1480) && led_status)){
 8001ef4:	4b2a      	ldr	r3, [pc, #168]	; (8001fa0 <oppdater_ledlys+0x188>)
 8001ef6:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001efa:	f5b3 6fbe 	cmp.w	r3, #1520	; 0x5f0
 8001efe:	dc06      	bgt.n	8001f0e <oppdater_ledlys+0xf6>
 8001f00:	f5b3 6fb9 	cmp.w	r3, #1480	; 0x5c8
 8001f04:	da3f      	bge.n	8001f86 <oppdater_ledlys+0x16e>
 8001f06:	4b27      	ldr	r3, [pc, #156]	; (8001fa4 <oppdater_ledlys+0x18c>)
 8001f08:	781b      	ldrb	r3, [r3, #0]
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d03b      	beq.n	8001f86 <oppdater_ledlys+0x16e>
			GPIOE->ODR |= LED_VVB;	}
 8001f0e:	4a26      	ldr	r2, [pc, #152]	; (8001fa8 <oppdater_ledlys+0x190>)
 8001f10:	6953      	ldr	r3, [r2, #20]
 8001f12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f16:	6153      	str	r3, [r2, #20]
	else{	GPIOE->ODR &= ~LED_VVB;	}
	if((thruster_PWM.vvf > 1520) || ((thruster_PWM.vvf < 1480) && led_status)){
 8001f18:	4b21      	ldr	r3, [pc, #132]	; (8001fa0 <oppdater_ledlys+0x188>)
 8001f1a:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001f1e:	f5b3 6fbe 	cmp.w	r3, #1520	; 0x5f0
 8001f22:	dc06      	bgt.n	8001f32 <oppdater_ledlys+0x11a>
 8001f24:	f5b3 6fb9 	cmp.w	r3, #1480	; 0x5c8
 8001f28:	da33      	bge.n	8001f92 <oppdater_ledlys+0x17a>
 8001f2a:	4b1e      	ldr	r3, [pc, #120]	; (8001fa4 <oppdater_ledlys+0x18c>)
 8001f2c:	781b      	ldrb	r3, [r3, #0]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d02f      	beq.n	8001f92 <oppdater_ledlys+0x17a>
			GPIOE->ODR |= LED_VVF;	}
 8001f32:	4a1d      	ldr	r2, [pc, #116]	; (8001fa8 <oppdater_ledlys+0x190>)
 8001f34:	6953      	ldr	r3, [r2, #20]
 8001f36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f3a:	6153      	str	r3, [r2, #20]
 8001f3c:	4770      	bx	lr
	else{	GPIOE->ODR &= ~LED_HHF;	}
 8001f3e:	4a1a      	ldr	r2, [pc, #104]	; (8001fa8 <oppdater_ledlys+0x190>)
 8001f40:	6953      	ldr	r3, [r2, #20]
 8001f42:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001f46:	6153      	str	r3, [r2, #20]
 8001f48:	e77a      	b.n	8001e40 <oppdater_ledlys+0x28>
	else{	GPIOE->ODR &= ~LED_HHB;	}
 8001f4a:	4a17      	ldr	r2, [pc, #92]	; (8001fa8 <oppdater_ledlys+0x190>)
 8001f4c:	6953      	ldr	r3, [r2, #20]
 8001f4e:	f023 0320 	bic.w	r3, r3, #32
 8001f52:	6153      	str	r3, [r2, #20]
 8001f54:	e786      	b.n	8001e64 <oppdater_ledlys+0x4c>
	else{	GPIOE->ODR &= ~LED_HVB;	}
 8001f56:	4a14      	ldr	r2, [pc, #80]	; (8001fa8 <oppdater_ledlys+0x190>)
 8001f58:	6953      	ldr	r3, [r2, #20]
 8001f5a:	f023 0304 	bic.w	r3, r3, #4
 8001f5e:	6153      	str	r3, [r2, #20]
 8001f60:	e792      	b.n	8001e88 <oppdater_ledlys+0x70>
	else{	GPIOE->ODR &= ~LED_HVF;	}
 8001f62:	4a11      	ldr	r2, [pc, #68]	; (8001fa8 <oppdater_ledlys+0x190>)
 8001f64:	6953      	ldr	r3, [r2, #20]
 8001f66:	f023 0310 	bic.w	r3, r3, #16
 8001f6a:	6153      	str	r3, [r2, #20]
 8001f6c:	e79e      	b.n	8001eac <oppdater_ledlys+0x94>
	else{	GPIOE->ODR &= ~LED_VHF;	}
 8001f6e:	4a0e      	ldr	r2, [pc, #56]	; (8001fa8 <oppdater_ledlys+0x190>)
 8001f70:	6953      	ldr	r3, [r2, #20]
 8001f72:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001f76:	6153      	str	r3, [r2, #20]
 8001f78:	e7aa      	b.n	8001ed0 <oppdater_ledlys+0xb8>
	else{	GPIOE->ODR &= ~LED_VHB;	}
 8001f7a:	4a0b      	ldr	r2, [pc, #44]	; (8001fa8 <oppdater_ledlys+0x190>)
 8001f7c:	6953      	ldr	r3, [r2, #20]
 8001f7e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001f82:	6153      	str	r3, [r2, #20]
 8001f84:	e7b6      	b.n	8001ef4 <oppdater_ledlys+0xdc>
	else{	GPIOE->ODR &= ~LED_VVB;	}
 8001f86:	4a08      	ldr	r2, [pc, #32]	; (8001fa8 <oppdater_ledlys+0x190>)
 8001f88:	6953      	ldr	r3, [r2, #20]
 8001f8a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001f8e:	6153      	str	r3, [r2, #20]
 8001f90:	e7c2      	b.n	8001f18 <oppdater_ledlys+0x100>
	else{	GPIOE->ODR &= ~LED_VVF;	}
 8001f92:	4a05      	ldr	r2, [pc, #20]	; (8001fa8 <oppdater_ledlys+0x190>)
 8001f94:	6953      	ldr	r3, [r2, #20]
 8001f96:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001f9a:	6153      	str	r3, [r2, #20]
}
 8001f9c:	4770      	bx	lr
 8001f9e:	bf00      	nop
 8001fa0:	20000d1c 	.word	0x20000d1c
 8001fa4:	20000500 	.word	0x20000500
 8001fa8:	40021000 	.word	0x40021000
 8001fac:	00000000 	.word	0x00000000

08001fb0 <kg_til_paadrag>:

float kg_til_paadrag(float kg_thrust){
 8001fb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001fb2:	ed2d 8b02 	vpush	{d8}
 8001fb6:	eeb0 8a40 	vmov.f32	s16, s0
	float kg_float = (float) (fabs(kg_thrust));
	float paadrag = (24.44*kg_float*kg_float+39.94*kg_float + 0.0)/(kg_float+0.21); // + 0.52
 8001fba:	eef0 7ac0 	vabs.f32	s15, s0
 8001fbe:	ee17 0a90 	vmov	r0, s15
 8001fc2:	f7fe fa65 	bl	8000490 <__aeabi_f2d>
 8001fc6:	4604      	mov	r4, r0
 8001fc8:	460d      	mov	r5, r1
 8001fca:	a31d      	add	r3, pc, #116	; (adr r3, 8002040 <kg_til_paadrag+0x90>)
 8001fcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fd0:	f7fe fab6 	bl	8000540 <__aeabi_dmul>
 8001fd4:	4622      	mov	r2, r4
 8001fd6:	462b      	mov	r3, r5
 8001fd8:	f7fe fab2 	bl	8000540 <__aeabi_dmul>
 8001fdc:	4606      	mov	r6, r0
 8001fde:	460f      	mov	r7, r1
 8001fe0:	a319      	add	r3, pc, #100	; (adr r3, 8002048 <kg_til_paadrag+0x98>)
 8001fe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fe6:	4620      	mov	r0, r4
 8001fe8:	4629      	mov	r1, r5
 8001fea:	f7fe faa9 	bl	8000540 <__aeabi_dmul>
 8001fee:	4602      	mov	r2, r0
 8001ff0:	460b      	mov	r3, r1
 8001ff2:	4630      	mov	r0, r6
 8001ff4:	4639      	mov	r1, r7
 8001ff6:	f7fe f8ed 	bl	80001d4 <__adddf3>
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	f7fe f8e9 	bl	80001d4 <__adddf3>
 8002002:	4606      	mov	r6, r0
 8002004:	460f      	mov	r7, r1
 8002006:	a312      	add	r3, pc, #72	; (adr r3, 8002050 <kg_til_paadrag+0xa0>)
 8002008:	e9d3 2300 	ldrd	r2, r3, [r3]
 800200c:	4620      	mov	r0, r4
 800200e:	4629      	mov	r1, r5
 8002010:	f7fe f8e0 	bl	80001d4 <__adddf3>
 8002014:	4602      	mov	r2, r0
 8002016:	460b      	mov	r3, r1
 8002018:	4630      	mov	r0, r6
 800201a:	4639      	mov	r1, r7
 800201c:	f7fe fbba 	bl	8000794 <__aeabi_ddiv>
 8002020:	f7fe fd66 	bl	8000af0 <__aeabi_d2f>
 8002024:	ee00 0a10 	vmov	s0, r0
	if(kg_thrust<0.0){
 8002028:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800202c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		return -paadrag;	}
 8002030:	bf48      	it	mi
 8002032:	eeb1 0a40 	vnegmi.f32	s0, s0
	else {
		return paadrag;		}
}
 8002036:	ecbd 8b02 	vpop	{d8}
 800203a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800203c:	f3af 8000 	nop.w
 8002040:	d70a3d71 	.word	0xd70a3d71
 8002044:	403870a3 	.word	0x403870a3
 8002048:	eb851eb8 	.word	0xeb851eb8
 800204c:	4043f851 	.word	0x4043f851
 8002050:	ae147ae1 	.word	0xae147ae1
 8002054:	3fcae147 	.word	0x3fcae147

08002058 <add_contribution>:
%        p3 =      0.5184  (-1.446, 2.482)
%        q1 =      0.2079  (-0.1737, 0.5895)
*/


void add_contribution(thruster_sett_float *result, thruster_sett_float *added) {
 8002058:	b508      	push	{r3, lr}
 800205a:	4603      	mov	r3, r0
 800205c:	4608      	mov	r0, r1
    result->hhf += added->hhf;
 800205e:	edd3 7a00 	vldr	s15, [r3]
 8002062:	ed91 7a00 	vldr	s14, [r1]
 8002066:	ee77 7a87 	vadd.f32	s15, s15, s14
 800206a:	edc3 7a00 	vstr	s15, [r3]
    result->hhb += added->hhb;
 800206e:	edd3 7a01 	vldr	s15, [r3, #4]
 8002072:	ed91 7a01 	vldr	s14, [r1, #4]
 8002076:	ee77 7a87 	vadd.f32	s15, s15, s14
 800207a:	edc3 7a01 	vstr	s15, [r3, #4]
    result->hvb += added->hvb;
 800207e:	edd3 7a02 	vldr	s15, [r3, #8]
 8002082:	ed91 7a02 	vldr	s14, [r1, #8]
 8002086:	ee77 7a87 	vadd.f32	s15, s15, s14
 800208a:	edc3 7a02 	vstr	s15, [r3, #8]
    result->hvf += added->hvf;
 800208e:	edd3 7a03 	vldr	s15, [r3, #12]
 8002092:	ed91 7a03 	vldr	s14, [r1, #12]
 8002096:	ee77 7a87 	vadd.f32	s15, s15, s14
 800209a:	edc3 7a03 	vstr	s15, [r3, #12]
    result->vhf += added->vhf;
 800209e:	edd3 7a04 	vldr	s15, [r3, #16]
 80020a2:	ed91 7a04 	vldr	s14, [r1, #16]
 80020a6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80020aa:	edc3 7a04 	vstr	s15, [r3, #16]
    result->vhb += added->vhb;
 80020ae:	edd3 7a05 	vldr	s15, [r3, #20]
 80020b2:	ed91 7a05 	vldr	s14, [r1, #20]
 80020b6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80020ba:	edc3 7a05 	vstr	s15, [r3, #20]
    result->vvb += added->vvb;
 80020be:	edd3 7a06 	vldr	s15, [r3, #24]
 80020c2:	ed91 7a06 	vldr	s14, [r1, #24]
 80020c6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80020ca:	edc3 7a06 	vstr	s15, [r3, #24]
    result->vvf += added->vvf;
 80020ce:	edd3 7a07 	vldr	s15, [r3, #28]
 80020d2:	ed91 7a07 	vldr	s14, [r1, #28]
 80020d6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80020da:	edc3 7a07 	vstr	s15, [r3, #28]

	memset(added, 0, sizeof(thruster_sett_float));
 80020de:	2220      	movs	r2, #32
 80020e0:	2100      	movs	r1, #0
 80020e2:	f007 ff13 	bl	8009f0c <memset>
}
 80020e6:	bd08      	pop	{r3, pc}

080020e8 <behandle_paadrag>:
void behandle_paadrag(void){
 80020e8:	b538      	push	{r3, r4, r5, lr}
	memset(&totalbidrag, 0, sizeof(totalbidrag));
 80020ea:	4c8d      	ldr	r4, [pc, #564]	; (8002320 <behandle_paadrag+0x238>)
 80020ec:	2220      	movs	r2, #32
 80020ee:	2100      	movs	r1, #0
 80020f0:	4620      	mov	r0, r4
 80020f2:	f007 ff0b 	bl	8009f0c <memset>
	add_contribution(&totalbidrag, &styrebidrag);
 80020f6:	498b      	ldr	r1, [pc, #556]	; (8002324 <behandle_paadrag+0x23c>)
 80020f8:	4620      	mov	r0, r4
 80020fa:	f7ff ffad 	bl	8002058 <add_contribution>
	if(controller_status){
 80020fe:	4b8a      	ldr	r3, [pc, #552]	; (8002328 <behandle_paadrag+0x240>)
 8002100:	781b      	ldrb	r3, [r3, #0]
 8002102:	2b00      	cmp	r3, #0
 8002104:	f040 80f8 	bne.w	80022f8 <behandle_paadrag+0x210>
	if(flagg.spid){  add_contribution(&totalbidrag, &stampbidrag); }	// PID regulering av stampvinkelen
 8002108:	4b88      	ldr	r3, [pc, #544]	; (800232c <behandle_paadrag+0x244>)
 800210a:	795b      	ldrb	r3, [r3, #5]
 800210c:	2b00      	cmp	r3, #0
 800210e:	f040 80f8 	bne.w	8002302 <behandle_paadrag+0x21a>
	if(flagg.rpid){  add_contribution(&totalbidrag, &rullbidrag);  }	// PID regulering av rullvinkelen
 8002112:	4b86      	ldr	r3, [pc, #536]	; (800232c <behandle_paadrag+0x244>)
 8002114:	799b      	ldrb	r3, [r3, #6]
 8002116:	2b00      	cmp	r3, #0
 8002118:	f040 80f8 	bne.w	800230c <behandle_paadrag+0x224>
	if(flagg.hpid){  add_contribution(&totalbidrag, &hivbidrag);   }	// PID regulering av hivposisjon
 800211c:	4b83      	ldr	r3, [pc, #524]	; (800232c <behandle_paadrag+0x244>)
 800211e:	79db      	ldrb	r3, [r3, #7]
 8002120:	2b00      	cmp	r3, #0
 8002122:	f040 80f8 	bne.w	8002316 <behandle_paadrag+0x22e>
	thruster_retning_korreksjon();
 8002126:	f7ff f995 	bl	8001454 <thruster_retning_korreksjon>
	skaler_paadrag();
 800212a:	f7ff fae7 	bl	80016fc <skaler_paadrag>
	effekt_kontroll();
 800212e:	f7ff fdd3 	bl	8001cd8 <effekt_kontroll>
	thrust_filtering(&totalbidrag ,&active_thrust);
 8002132:	4c7f      	ldr	r4, [pc, #508]	; (8002330 <behandle_paadrag+0x248>)
 8002134:	4621      	mov	r1, r4
 8002136:	487a      	ldr	r0, [pc, #488]	; (8002320 <behandle_paadrag+0x238>)
 8002138:	f7ff f848 	bl	80011cc <thrust_filtering>
	thruster_PWM.hhf = (int16_t) (NEUTRAL + gain*active_thrust.hhf);
 800213c:	4d7d      	ldr	r5, [pc, #500]	; (8002334 <behandle_paadrag+0x24c>)
 800213e:	ed95 7a00 	vldr	s14, [r5]
 8002142:	4b7d      	ldr	r3, [pc, #500]	; (8002338 <behandle_paadrag+0x250>)
 8002144:	edd4 7a00 	vldr	s15, [r4]
 8002148:	ee27 7a27 	vmul.f32	s14, s14, s15
 800214c:	eddf 7a7b 	vldr	s15, [pc, #492]	; 800233c <behandle_paadrag+0x254>
 8002150:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002154:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8002158:	ee17 2a10 	vmov	r2, s14
 800215c:	801a      	strh	r2, [r3, #0]
	thruster_PWM.hhb = (int16_t) (NEUTRAL + gain*active_thrust.hhb);
 800215e:	ed95 7a00 	vldr	s14, [r5]
 8002162:	edd4 6a01 	vldr	s13, [r4, #4]
 8002166:	ee27 7a26 	vmul.f32	s14, s14, s13
 800216a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800216e:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8002172:	ee17 2a10 	vmov	r2, s14
 8002176:	805a      	strh	r2, [r3, #2]
	thruster_PWM.hvb = (int16_t) (NEUTRAL + gain*active_thrust.hvb);
 8002178:	ed95 7a00 	vldr	s14, [r5]
 800217c:	edd4 6a02 	vldr	s13, [r4, #8]
 8002180:	ee27 7a26 	vmul.f32	s14, s14, s13
 8002184:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002188:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 800218c:	ee17 2a10 	vmov	r2, s14
 8002190:	809a      	strh	r2, [r3, #4]
	thruster_PWM.hvf = (int16_t) (NEUTRAL + gain*active_thrust.hvf);
 8002192:	ed95 7a00 	vldr	s14, [r5]
 8002196:	edd4 6a03 	vldr	s13, [r4, #12]
 800219a:	ee27 7a26 	vmul.f32	s14, s14, s13
 800219e:	ee37 7a27 	vadd.f32	s14, s14, s15
 80021a2:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 80021a6:	ee17 2a10 	vmov	r2, s14
 80021aa:	80da      	strh	r2, [r3, #6]
	thruster_PWM.vhf = (int16_t) (NEUTRAL + gain*active_thrust.vhf);
 80021ac:	ed95 7a00 	vldr	s14, [r5]
 80021b0:	edd4 6a04 	vldr	s13, [r4, #16]
 80021b4:	ee27 7a26 	vmul.f32	s14, s14, s13
 80021b8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80021bc:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 80021c0:	ee17 2a10 	vmov	r2, s14
 80021c4:	811a      	strh	r2, [r3, #8]
	thruster_PWM.vhb = (int16_t) (NEUTRAL + gain*active_thrust.vhb);
 80021c6:	ed95 7a00 	vldr	s14, [r5]
 80021ca:	edd4 6a05 	vldr	s13, [r4, #20]
 80021ce:	ee27 7a26 	vmul.f32	s14, s14, s13
 80021d2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80021d6:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 80021da:	ee17 2a10 	vmov	r2, s14
 80021de:	815a      	strh	r2, [r3, #10]
	thruster_PWM.vvb = (int16_t) (NEUTRAL + gain*active_thrust.vvb);
 80021e0:	ed95 7a00 	vldr	s14, [r5]
 80021e4:	edd4 6a06 	vldr	s13, [r4, #24]
 80021e8:	ee27 7a26 	vmul.f32	s14, s14, s13
 80021ec:	ee37 7a27 	vadd.f32	s14, s14, s15
 80021f0:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 80021f4:	ee17 2a10 	vmov	r2, s14
 80021f8:	819a      	strh	r2, [r3, #12]
	thruster_PWM.vvf = (int16_t) (NEUTRAL + gain*active_thrust.vvf);
 80021fa:	ed95 7a00 	vldr	s14, [r5]
 80021fe:	edd4 6a07 	vldr	s13, [r4, #28]
 8002202:	ee27 7a26 	vmul.f32	s14, s14, s13
 8002206:	ee77 7a27 	vadd.f32	s15, s14, s15
 800220a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800220e:	ee17 2a90 	vmov	r2, s15
 8002212:	81da      	strh	r2, [r3, #14]
	oppdater_ledlys();
 8002214:	f7ff fe00 	bl	8001e18 <oppdater_ledlys>
	skriv_thruster_PWM();
 8002218:	f7ff fbb4 	bl	8001984 <skriv_thruster_PWM>
	thrusterdata.hhf = (int8_t) (gain*active_thrust.hhf/4);
 800221c:	ed95 7a00 	vldr	s14, [r5]
 8002220:	4b47      	ldr	r3, [pc, #284]	; (8002340 <behandle_paadrag+0x258>)
 8002222:	edd4 7a00 	vldr	s15, [r4]
 8002226:	ee27 7a27 	vmul.f32	s14, s14, s15
 800222a:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 800222e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002232:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8002236:	ee17 2a10 	vmov	r2, s14
 800223a:	701a      	strb	r2, [r3, #0]
	thrusterdata.hhb = (int8_t) (gain*active_thrust.hhb/4);
 800223c:	ed95 7a00 	vldr	s14, [r5]
 8002240:	edd4 6a01 	vldr	s13, [r4, #4]
 8002244:	ee27 7a26 	vmul.f32	s14, s14, s13
 8002248:	ee27 7a27 	vmul.f32	s14, s14, s15
 800224c:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8002250:	ee17 2a10 	vmov	r2, s14
 8002254:	705a      	strb	r2, [r3, #1]
	thrusterdata.hvb = (int8_t) (gain*active_thrust.hvb/4);
 8002256:	ed95 7a00 	vldr	s14, [r5]
 800225a:	edd4 6a02 	vldr	s13, [r4, #8]
 800225e:	ee27 7a26 	vmul.f32	s14, s14, s13
 8002262:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002266:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 800226a:	ee17 2a10 	vmov	r2, s14
 800226e:	709a      	strb	r2, [r3, #2]
	thrusterdata.hvf = (int8_t) (gain*active_thrust.hvf/4);
 8002270:	ed95 7a00 	vldr	s14, [r5]
 8002274:	edd4 6a03 	vldr	s13, [r4, #12]
 8002278:	ee27 7a26 	vmul.f32	s14, s14, s13
 800227c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002280:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8002284:	ee17 2a10 	vmov	r2, s14
 8002288:	70da      	strb	r2, [r3, #3]
	thrusterdata.vhf = (int8_t) (gain*active_thrust.vhf/4);
 800228a:	ed95 7a00 	vldr	s14, [r5]
 800228e:	edd4 6a04 	vldr	s13, [r4, #16]
 8002292:	ee27 7a26 	vmul.f32	s14, s14, s13
 8002296:	ee27 7a27 	vmul.f32	s14, s14, s15
 800229a:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 800229e:	ee17 2a10 	vmov	r2, s14
 80022a2:	711a      	strb	r2, [r3, #4]
	thrusterdata.vhb = (int8_t) (gain*active_thrust.vhb/4);
 80022a4:	ed95 7a00 	vldr	s14, [r5]
 80022a8:	edd4 6a05 	vldr	s13, [r4, #20]
 80022ac:	ee27 7a26 	vmul.f32	s14, s14, s13
 80022b0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80022b4:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 80022b8:	ee17 2a10 	vmov	r2, s14
 80022bc:	715a      	strb	r2, [r3, #5]
	thrusterdata.vvb = (int8_t) (gain*active_thrust.vvb/4);
 80022be:	ed95 7a00 	vldr	s14, [r5]
 80022c2:	edd4 6a06 	vldr	s13, [r4, #24]
 80022c6:	ee27 7a26 	vmul.f32	s14, s14, s13
 80022ca:	ee27 7a27 	vmul.f32	s14, s14, s15
 80022ce:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 80022d2:	ee17 2a10 	vmov	r2, s14
 80022d6:	719a      	strb	r2, [r3, #6]
	thrusterdata.vvf = (int8_t) (gain*active_thrust.vvf/4);
 80022d8:	ed95 7a00 	vldr	s14, [r5]
 80022dc:	edd4 6a07 	vldr	s13, [r4, #28]
 80022e0:	ee27 7a26 	vmul.f32	s14, s14, s13
 80022e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022e8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80022ec:	ee17 2a90 	vmov	r2, s15
 80022f0:	71da      	strb	r2, [r3, #7]
	ESC_status();
 80022f2:	f7ff fd11 	bl	8001d18 <ESC_status>
}
 80022f6:	bd38      	pop	{r3, r4, r5, pc}
		add_contribution(&totalbidrag, &ctrl_contribution);
 80022f8:	4912      	ldr	r1, [pc, #72]	; (8002344 <behandle_paadrag+0x25c>)
 80022fa:	4620      	mov	r0, r4
 80022fc:	f7ff feac 	bl	8002058 <add_contribution>
 8002300:	e702      	b.n	8002108 <behandle_paadrag+0x20>
	if(flagg.spid){  add_contribution(&totalbidrag, &stampbidrag); }	// PID regulering av stampvinkelen
 8002302:	4911      	ldr	r1, [pc, #68]	; (8002348 <behandle_paadrag+0x260>)
 8002304:	4806      	ldr	r0, [pc, #24]	; (8002320 <behandle_paadrag+0x238>)
 8002306:	f7ff fea7 	bl	8002058 <add_contribution>
 800230a:	e702      	b.n	8002112 <behandle_paadrag+0x2a>
	if(flagg.rpid){  add_contribution(&totalbidrag, &rullbidrag);  }	// PID regulering av rullvinkelen
 800230c:	490f      	ldr	r1, [pc, #60]	; (800234c <behandle_paadrag+0x264>)
 800230e:	4804      	ldr	r0, [pc, #16]	; (8002320 <behandle_paadrag+0x238>)
 8002310:	f7ff fea2 	bl	8002058 <add_contribution>
 8002314:	e702      	b.n	800211c <behandle_paadrag+0x34>
	if(flagg.hpid){  add_contribution(&totalbidrag, &hivbidrag);   }	// PID regulering av hivposisjon
 8002316:	490e      	ldr	r1, [pc, #56]	; (8002350 <behandle_paadrag+0x268>)
 8002318:	4801      	ldr	r0, [pc, #4]	; (8002320 <behandle_paadrag+0x238>)
 800231a:	f7ff fe9d 	bl	8002058 <add_contribution>
 800231e:	e702      	b.n	8002126 <behandle_paadrag+0x3e>
 8002320:	20000d34 	.word	0x20000d34
 8002324:	20000c60 	.word	0x20000c60
 8002328:	200001fc 	.word	0x200001fc
 800232c:	20000244 	.word	0x20000244
 8002330:	20000194 	.word	0x20000194
 8002334:	2000025c 	.word	0x2000025c
 8002338:	20000d1c 	.word	0x20000d1c
 800233c:	44bb6000 	.word	0x44bb6000
 8002340:	20000d2c 	.word	0x20000d2c
 8002344:	20000200 	.word	0x20000200
 8002348:	20000c34 	.word	0x20000c34
 800234c:	200009d0 	.word	0x200009d0
 8002350:	200003dc 	.word	0x200003dc

08002354 <NED2BFF>:

void NED2BFF(NED_eta *NED, NED_eta *BFF, const state_struct *state){
 8002354:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002358:	4604      	mov	r4, r0
 800235a:	468a      	mov	sl, r1
 800235c:	4615      	mov	r5, r2
	// relies on x,y and psi in NED are 0
	BFF->x = -NED->z *sin(state->theta);
 800235e:	6910      	ldr	r0, [r2, #16]
 8002360:	f7fe f896 	bl	8000490 <__aeabi_f2d>
 8002364:	ec41 0b10 	vmov	d0, r0, r1
 8002368:	f007 ff2a 	bl	800a1c0 <sin>
 800236c:	ec57 6b10 	vmov	r6, r7, d0
 8002370:	68a0      	ldr	r0, [r4, #8]
 8002372:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8002376:	f7fe f88b 	bl	8000490 <__aeabi_f2d>
 800237a:	4632      	mov	r2, r6
 800237c:	463b      	mov	r3, r7
 800237e:	f7fe f8df 	bl	8000540 <__aeabi_dmul>
 8002382:	f7fe fbb5 	bl	8000af0 <__aeabi_d2f>
 8002386:	f8ca 0000 	str.w	r0, [sl]
	BFF->y = NED->z * cos(state->theta) * sin(state->phi);
 800238a:	6928      	ldr	r0, [r5, #16]
 800238c:	f7fe f880 	bl	8000490 <__aeabi_f2d>
 8002390:	ec41 0b10 	vmov	d0, r0, r1
 8002394:	f007 fec0 	bl	800a118 <cos>
 8002398:	ec59 8b10 	vmov	r8, r9, d0
 800239c:	68e8      	ldr	r0, [r5, #12]
 800239e:	f7fe f877 	bl	8000490 <__aeabi_f2d>
 80023a2:	ec41 0b10 	vmov	d0, r0, r1
 80023a6:	f007 ff0b 	bl	800a1c0 <sin>
 80023aa:	ec57 6b10 	vmov	r6, r7, d0
 80023ae:	68a0      	ldr	r0, [r4, #8]
 80023b0:	f7fe f86e 	bl	8000490 <__aeabi_f2d>
 80023b4:	4642      	mov	r2, r8
 80023b6:	464b      	mov	r3, r9
 80023b8:	f7fe f8c2 	bl	8000540 <__aeabi_dmul>
 80023bc:	4632      	mov	r2, r6
 80023be:	463b      	mov	r3, r7
 80023c0:	f7fe f8be 	bl	8000540 <__aeabi_dmul>
 80023c4:	f7fe fb94 	bl	8000af0 <__aeabi_d2f>
 80023c8:	f8ca 0004 	str.w	r0, [sl, #4]
	BFF->z = NED->z * cos(state->phi) * cos(state->theta);
 80023cc:	68e8      	ldr	r0, [r5, #12]
 80023ce:	f7fe f85f 	bl	8000490 <__aeabi_f2d>
 80023d2:	ec41 0b10 	vmov	d0, r0, r1
 80023d6:	f007 fe9f 	bl	800a118 <cos>
 80023da:	ec59 8b10 	vmov	r8, r9, d0
 80023de:	6928      	ldr	r0, [r5, #16]
 80023e0:	f7fe f856 	bl	8000490 <__aeabi_f2d>
 80023e4:	ec41 0b10 	vmov	d0, r0, r1
 80023e8:	f007 fe96 	bl	800a118 <cos>
 80023ec:	ec57 6b10 	vmov	r6, r7, d0
 80023f0:	68a0      	ldr	r0, [r4, #8]
 80023f2:	f7fe f84d 	bl	8000490 <__aeabi_f2d>
 80023f6:	4642      	mov	r2, r8
 80023f8:	464b      	mov	r3, r9
 80023fa:	f7fe f8a1 	bl	8000540 <__aeabi_dmul>
 80023fe:	4632      	mov	r2, r6
 8002400:	463b      	mov	r3, r7
 8002402:	f7fe f89d 	bl	8000540 <__aeabi_dmul>
 8002406:	f7fe fb73 	bl	8000af0 <__aeabi_d2f>
 800240a:	f8ca 0008 	str.w	r0, [sl, #8]
	BFF->phi = NED->phi;
 800240e:	68e3      	ldr	r3, [r4, #12]
 8002410:	f8ca 300c 	str.w	r3, [sl, #12]
	BFF->theta = NED->theta * cos(state->phi);
 8002414:	68e8      	ldr	r0, [r5, #12]
 8002416:	f7fe f83b 	bl	8000490 <__aeabi_f2d>
 800241a:	ec41 0b10 	vmov	d0, r0, r1
 800241e:	f007 fe7b 	bl	800a118 <cos>
 8002422:	ec57 6b10 	vmov	r6, r7, d0
 8002426:	6920      	ldr	r0, [r4, #16]
 8002428:	f7fe f832 	bl	8000490 <__aeabi_f2d>
 800242c:	4632      	mov	r2, r6
 800242e:	463b      	mov	r3, r7
 8002430:	f7fe f886 	bl	8000540 <__aeabi_dmul>
 8002434:	f7fe fb5c 	bl	8000af0 <__aeabi_d2f>
 8002438:	f8ca 0010 	str.w	r0, [sl, #16]
	BFF->psi = -NED->theta * sin(state->phi);
 800243c:	68e8      	ldr	r0, [r5, #12]
 800243e:	f7fe f827 	bl	8000490 <__aeabi_f2d>
 8002442:	ec41 0b10 	vmov	d0, r0, r1
 8002446:	f007 febb 	bl	800a1c0 <sin>
 800244a:	ec57 6b10 	vmov	r6, r7, d0
 800244e:	6920      	ldr	r0, [r4, #16]
 8002450:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8002454:	f7fe f81c 	bl	8000490 <__aeabi_f2d>
 8002458:	4632      	mov	r2, r6
 800245a:	463b      	mov	r3, r7
 800245c:	f7fe f870 	bl	8000540 <__aeabi_dmul>
 8002460:	f7fe fb46 	bl	8000af0 <__aeabi_d2f>
 8002464:	f8ca 0014 	str.w	r0, [sl, #20]

	memset(NED, 0, sizeof(NED_eta));
 8002468:	2300      	movs	r3, #0
 800246a:	6023      	str	r3, [r4, #0]
 800246c:	6063      	str	r3, [r4, #4]
 800246e:	60a3      	str	r3, [r4, #8]
 8002470:	60e3      	str	r3, [r4, #12]
 8002472:	6123      	str	r3, [r4, #16]
 8002474:	6163      	str	r3, [r4, #20]
}
 8002476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800247a:	0000      	movs	r0, r0
 800247c:	0000      	movs	r0, r0
	...

08002480 <thrust2percent>:
//	else {
//		test_thrustere = 0;
//	}
}

float thrust2percent(float thrust){
 8002480:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002482:	ed2d 8b02 	vpush	{d8}
 8002486:	eeb0 8a40 	vmov.f32	s16, s0
	float ftrust = fabs(thrust)/9.81;
 800248a:	eef0 7ac0 	vabs.f32	s15, s0
 800248e:	ee17 0a90 	vmov	r0, s15
 8002492:	f7fd fffd 	bl	8000490 <__aeabi_f2d>
 8002496:	a328      	add	r3, pc, #160	; (adr r3, 8002538 <thrust2percent+0xb8>)
 8002498:	e9d3 2300 	ldrd	r2, r3, [r3]
 800249c:	f7fe f97a 	bl	8000794 <__aeabi_ddiv>
 80024a0:	f7fe fb26 	bl	8000af0 <__aeabi_d2f>
	float percent = (24.44*ftrust*ftrust+39.94*ftrust + 0.0)/(ftrust+0.21); // + 0.52
 80024a4:	f7fd fff4 	bl	8000490 <__aeabi_f2d>
 80024a8:	4604      	mov	r4, r0
 80024aa:	460d      	mov	r5, r1
 80024ac:	a324      	add	r3, pc, #144	; (adr r3, 8002540 <thrust2percent+0xc0>)
 80024ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024b2:	f7fe f845 	bl	8000540 <__aeabi_dmul>
 80024b6:	4622      	mov	r2, r4
 80024b8:	462b      	mov	r3, r5
 80024ba:	f7fe f841 	bl	8000540 <__aeabi_dmul>
 80024be:	4606      	mov	r6, r0
 80024c0:	460f      	mov	r7, r1
 80024c2:	a321      	add	r3, pc, #132	; (adr r3, 8002548 <thrust2percent+0xc8>)
 80024c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024c8:	4620      	mov	r0, r4
 80024ca:	4629      	mov	r1, r5
 80024cc:	f7fe f838 	bl	8000540 <__aeabi_dmul>
 80024d0:	4602      	mov	r2, r0
 80024d2:	460b      	mov	r3, r1
 80024d4:	4630      	mov	r0, r6
 80024d6:	4639      	mov	r1, r7
 80024d8:	f7fd fe7c 	bl	80001d4 <__adddf3>
 80024dc:	2200      	movs	r2, #0
 80024de:	2300      	movs	r3, #0
 80024e0:	f7fd fe78 	bl	80001d4 <__adddf3>
 80024e4:	4606      	mov	r6, r0
 80024e6:	460f      	mov	r7, r1
 80024e8:	a319      	add	r3, pc, #100	; (adr r3, 8002550 <thrust2percent+0xd0>)
 80024ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024ee:	4620      	mov	r0, r4
 80024f0:	4629      	mov	r1, r5
 80024f2:	f7fd fe6f 	bl	80001d4 <__adddf3>
 80024f6:	4602      	mov	r2, r0
 80024f8:	460b      	mov	r3, r1
 80024fa:	4630      	mov	r0, r6
 80024fc:	4639      	mov	r1, r7
 80024fe:	f7fe f949 	bl	8000794 <__aeabi_ddiv>
 8002502:	f7fe faf5 	bl	8000af0 <__aeabi_d2f>
	return copysign(percent, thrust);
 8002506:	f7fd ffc3 	bl	8000490 <__aeabi_f2d>
 800250a:	4604      	mov	r4, r0
 800250c:	460d      	mov	r5, r1
 800250e:	ee18 0a10 	vmov	r0, s16
 8002512:	f7fd ffbd 	bl	8000490 <__aeabi_f2d>
 8002516:	4622      	mov	r2, r4
 8002518:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 800251c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8002520:	ea44 0301 	orr.w	r3, r4, r1
 8002524:	4610      	mov	r0, r2
 8002526:	4619      	mov	r1, r3
 8002528:	f7fe fae2 	bl	8000af0 <__aeabi_d2f>
}
 800252c:	ee00 0a10 	vmov	s0, r0
 8002530:	ecbd 8b02 	vpop	{d8}
 8002534:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002536:	bf00      	nop
 8002538:	51eb851f 	.word	0x51eb851f
 800253c:	40239eb8 	.word	0x40239eb8
 8002540:	d70a3d71 	.word	0xd70a3d71
 8002544:	403870a3 	.word	0x403870a3
 8002548:	eb851eb8 	.word	0xeb851eb8
 800254c:	4043f851 	.word	0x4043f851
 8002550:	ae147ae1 	.word	0xae147ae1
 8002554:	3fcae147 	.word	0x3fcae147

08002558 <BFF2ThrustPercent>:
void BFF2ThrustPercent(const NED_eta *BFF, thruster_sett_float *thrust) {
 8002558:	b5f0      	push	{r4, r5, r6, r7, lr}
 800255a:	ed2d 8b06 	vpush	{d8-d10}
 800255e:	b089      	sub	sp, #36	; 0x24
 8002560:	460f      	mov	r7, r1
	for (int i = 0; i < Tmat.rows; i++) {
 8002562:	4b29      	ldr	r3, [pc, #164]	; (8002608 <BFF2ThrustPercent+0xb0>)
 8002564:	681e      	ldr	r6, [r3, #0]
 8002566:	2e00      	cmp	r6, #0
 8002568:	dd39      	ble.n	80025de <BFF2ThrustPercent+0x86>
		result = Tmat.data[i][0]*BFF->x + Tmat.data[i][1]*BFF->y + Tmat.data[i][2]*BFF->z + Tmat.data[i][3]*BFF->phi + Tmat.data[i][4]*BFF->theta + Tmat.data[i][5]*BFF->psi;
 800256a:	edd0 aa00 	vldr	s21, [r0]
 800256e:	ed90 aa01 	vldr	s20, [r0, #4]
 8002572:	edd0 9a02 	vldr	s19, [r0, #8]
 8002576:	ed90 9a03 	vldr	s18, [r0, #12]
 800257a:	edd0 8a04 	vldr	s17, [r0, #16]
 800257e:	ed90 8a05 	vldr	s16, [r0, #20]
 8002582:	689c      	ldr	r4, [r3, #8]
 8002584:	466d      	mov	r5, sp
 8002586:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800258a:	f854 3b04 	ldr.w	r3, [r4], #4
 800258e:	edd3 7a00 	vldr	s15, [r3]
 8002592:	ee6a 7aa7 	vmul.f32	s15, s21, s15
 8002596:	ed93 0a01 	vldr	s0, [r3, #4]
 800259a:	ee2a 0a00 	vmul.f32	s0, s20, s0
 800259e:	ee77 7a80 	vadd.f32	s15, s15, s0
 80025a2:	ed93 0a02 	vldr	s0, [r3, #8]
 80025a6:	ee29 0a80 	vmul.f32	s0, s19, s0
 80025aa:	ee77 7a80 	vadd.f32	s15, s15, s0
 80025ae:	ed93 0a03 	vldr	s0, [r3, #12]
 80025b2:	ee29 0a00 	vmul.f32	s0, s18, s0
 80025b6:	ee77 7a80 	vadd.f32	s15, s15, s0
 80025ba:	ed93 0a04 	vldr	s0, [r3, #16]
 80025be:	ee28 0a80 	vmul.f32	s0, s17, s0
 80025c2:	ee77 7a80 	vadd.f32	s15, s15, s0
 80025c6:	ed93 0a05 	vldr	s0, [r3, #20]
 80025ca:	ee28 0a00 	vmul.f32	s0, s16, s0
		result_in_percent[i] = thrust2percent(result);
 80025ce:	ee37 0a80 	vadd.f32	s0, s15, s0
 80025d2:	f7ff ff55 	bl	8002480 <thrust2percent>
 80025d6:	eca5 0a01 	vstmia	r5!, {s0}
	for (int i = 0; i < Tmat.rows; i++) {
 80025da:	42b4      	cmp	r4, r6
 80025dc:	d1d5      	bne.n	800258a <BFF2ThrustPercent+0x32>
	thrust->hhf = result_in_percent[0];
 80025de:	9b00      	ldr	r3, [sp, #0]
 80025e0:	603b      	str	r3, [r7, #0]
	thrust->hhb = result_in_percent[1];
 80025e2:	9b01      	ldr	r3, [sp, #4]
 80025e4:	607b      	str	r3, [r7, #4]
	thrust->hvb = result_in_percent[2];
 80025e6:	9b02      	ldr	r3, [sp, #8]
 80025e8:	60bb      	str	r3, [r7, #8]
	thrust->hvf = result_in_percent[3];
 80025ea:	9b03      	ldr	r3, [sp, #12]
 80025ec:	60fb      	str	r3, [r7, #12]
	thrust->vhf = result_in_percent[4];
 80025ee:	9b04      	ldr	r3, [sp, #16]
 80025f0:	613b      	str	r3, [r7, #16]
	thrust->vhb = result_in_percent[5];
 80025f2:	9b05      	ldr	r3, [sp, #20]
 80025f4:	617b      	str	r3, [r7, #20]
	thrust->vvb = result_in_percent[6];
 80025f6:	9b06      	ldr	r3, [sp, #24]
 80025f8:	61bb      	str	r3, [r7, #24]
	thrust->vvf = result_in_percent[7];
 80025fa:	9b07      	ldr	r3, [sp, #28]
 80025fc:	61fb      	str	r3, [r7, #28]
}
 80025fe:	b009      	add	sp, #36	; 0x24
 8002600:	ecbd 8b06 	vpop	{d8-d10}
 8002604:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002606:	bf00      	nop
 8002608:	200000e4 	.word	0x200000e4
 800260c:	00000000 	.word	0x00000000

08002610 <calc_acceleration_smc>:
// New Control Law
//-z_d * (cos(theta)^2 * (6.11 * abs(z_d) * cos(phi)^2 - sin(phi)^2) - 0.33 * sin(theta)^2 + 1)
// F_z =  -z_d*(6.11*abs(z_d)*(cos(phi)^2*cos(theta)^2)-sin(phi)^2-0.33*sin(theta)^2+sin(phi)^2*sin(theta)^2 +1)
// F_phi  = -(sin(phi)*(3.63-0.66*cos(theta)^2+theta_d*cos(phi)*sin(theta)*(2.18+1.3*abs(theta_d)))/cos(theta) -2.66*phi_d*abs(phi_d)
// F_theta = -cos(phi)*(3.1*sin(theta)+theta_d*cos(phi)*(2.16+1.27*abs(theta_d)))
float calc_acceleration_smc(smc_struct *smc, state_struct *states){
 8002610:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
 8002614:	ed2d 8b06 	vpush	{d8-d10}
 8002618:	4605      	mov	r5, r0
 800261a:	460c      	mov	r4, r1
	float result = 0.0;
	float s4 = sin(states->phi);
 800261c:	68c8      	ldr	r0, [r1, #12]
 800261e:	f7fd ff37 	bl	8000490 <__aeabi_f2d>
 8002622:	ec41 0b19 	vmov	d9, r0, r1
 8002626:	ec41 0b10 	vmov	d0, r0, r1
 800262a:	f007 fdc9 	bl	800a1c0 <sin>
 800262e:	ec51 0b10 	vmov	r0, r1, d0
 8002632:	f7fe fa5d 	bl	8000af0 <__aeabi_d2f>
 8002636:	ee0a 0a10 	vmov	s20, r0
	float s5 = sin(states->theta);
 800263a:	6920      	ldr	r0, [r4, #16]
 800263c:	f7fd ff28 	bl	8000490 <__aeabi_f2d>
 8002640:	ec41 0b18 	vmov	d8, r0, r1
 8002644:	ec41 0b10 	vmov	d0, r0, r1
 8002648:	f007 fdba 	bl	800a1c0 <sin>
 800264c:	ec51 0b10 	vmov	r0, r1, d0
 8002650:	f7fe fa4e 	bl	8000af0 <__aeabi_d2f>
 8002654:	4606      	mov	r6, r0
	float c4 = cos(states->phi);
 8002656:	eeb0 0a49 	vmov.f32	s0, s18
 800265a:	eef0 0a69 	vmov.f32	s1, s19
 800265e:	f007 fd5b 	bl	800a118 <cos>
 8002662:	ec51 0b10 	vmov	r0, r1, d0
 8002666:	f7fe fa43 	bl	8000af0 <__aeabi_d2f>
 800266a:	ee09 0a10 	vmov	s18, r0
	float c5 = cos(states->theta);
 800266e:	eeb0 0a48 	vmov.f32	s0, s16
 8002672:	eef0 0a68 	vmov.f32	s1, s17
 8002676:	f007 fd4f 	bl	800a118 <cos>
 800267a:	ec51 0b10 	vmov	r0, r1, d0
 800267e:	f7fe fa37 	bl	8000af0 <__aeabi_d2f>
 8002682:	ee08 0a10 	vmov	s16, r0
	switch(smc->reg_state){
 8002686:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
 800268a:	2b04      	cmp	r3, #4
 800268c:	d070      	beq.n	8002770 <calc_acceleration_smc+0x160>
 800268e:	2b05      	cmp	r3, #5
 8002690:	f000 80e7 	beq.w	8002862 <calc_acceleration_smc+0x252>
 8002694:	2b03      	cmp	r3, #3
 8002696:	d005      	beq.n	80026a4 <calc_acceleration_smc+0x94>
 8002698:	ed9f 0aa7 	vldr	s0, [pc, #668]	; 8002938 <calc_acceleration_smc+0x328>
//		result = 0.0;
		break;
	}

	return result;
}
 800269c:	ecbd 8b06 	vpop	{d8-d10}
 80026a0:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
		result = - states->w * (c5*c5 * (6.11 * fabs(states->w)*c4*c4 - s4*s4) - 0.33*s5*s5 + 1);
 80026a4:	edd4 8a08 	vldr	s17, [r4, #32]
 80026a8:	ee19 0a10 	vmov	r0, s18
 80026ac:	f7fd fef0 	bl	8000490 <__aeabi_f2d>
 80026b0:	4680      	mov	r8, r0
 80026b2:	4689      	mov	r9, r1
 80026b4:	4630      	mov	r0, r6
 80026b6:	f7fd feeb 	bl	8000490 <__aeabi_f2d>
 80026ba:	4604      	mov	r4, r0
 80026bc:	460d      	mov	r5, r1
 80026be:	eef0 7ae8 	vabs.f32	s15, s17
 80026c2:	ee17 0a90 	vmov	r0, s15
 80026c6:	f7fd fee3 	bl	8000490 <__aeabi_f2d>
 80026ca:	a387      	add	r3, pc, #540	; (adr r3, 80028e8 <calc_acceleration_smc+0x2d8>)
 80026cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026d0:	f7fd ff36 	bl	8000540 <__aeabi_dmul>
 80026d4:	4642      	mov	r2, r8
 80026d6:	464b      	mov	r3, r9
 80026d8:	f7fd ff32 	bl	8000540 <__aeabi_dmul>
 80026dc:	4642      	mov	r2, r8
 80026de:	464b      	mov	r3, r9
 80026e0:	f7fd ff2e 	bl	8000540 <__aeabi_dmul>
 80026e4:	4680      	mov	r8, r0
 80026e6:	4689      	mov	r9, r1
 80026e8:	ee6a 7a0a 	vmul.f32	s15, s20, s20
 80026ec:	ee17 0a90 	vmov	r0, s15
 80026f0:	f7fd fece 	bl	8000490 <__aeabi_f2d>
 80026f4:	4602      	mov	r2, r0
 80026f6:	460b      	mov	r3, r1
 80026f8:	4640      	mov	r0, r8
 80026fa:	4649      	mov	r1, r9
 80026fc:	f7fd fd68 	bl	80001d0 <__aeabi_dsub>
 8002700:	4680      	mov	r8, r0
 8002702:	4689      	mov	r9, r1
 8002704:	ee68 7a08 	vmul.f32	s15, s16, s16
 8002708:	ee17 0a90 	vmov	r0, s15
 800270c:	f7fd fec0 	bl	8000490 <__aeabi_f2d>
 8002710:	4602      	mov	r2, r0
 8002712:	460b      	mov	r3, r1
 8002714:	4640      	mov	r0, r8
 8002716:	4649      	mov	r1, r9
 8002718:	f7fd ff12 	bl	8000540 <__aeabi_dmul>
 800271c:	4680      	mov	r8, r0
 800271e:	4689      	mov	r9, r1
 8002720:	a373      	add	r3, pc, #460	; (adr r3, 80028f0 <calc_acceleration_smc+0x2e0>)
 8002722:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002726:	4620      	mov	r0, r4
 8002728:	4629      	mov	r1, r5
 800272a:	f7fd ff09 	bl	8000540 <__aeabi_dmul>
 800272e:	4622      	mov	r2, r4
 8002730:	462b      	mov	r3, r5
 8002732:	f7fd ff05 	bl	8000540 <__aeabi_dmul>
 8002736:	4602      	mov	r2, r0
 8002738:	460b      	mov	r3, r1
 800273a:	4640      	mov	r0, r8
 800273c:	4649      	mov	r1, r9
 800273e:	f7fd fd47 	bl	80001d0 <__aeabi_dsub>
 8002742:	2200      	movs	r2, #0
 8002744:	4b7d      	ldr	r3, [pc, #500]	; (800293c <calc_acceleration_smc+0x32c>)
 8002746:	f7fd fd45 	bl	80001d4 <__adddf3>
 800274a:	4604      	mov	r4, r0
 800274c:	460d      	mov	r5, r1
 800274e:	eef1 7a68 	vneg.f32	s15, s17
 8002752:	ee17 0a90 	vmov	r0, s15
 8002756:	f7fd fe9b 	bl	8000490 <__aeabi_f2d>
 800275a:	4602      	mov	r2, r0
 800275c:	460b      	mov	r3, r1
 800275e:	4620      	mov	r0, r4
 8002760:	4629      	mov	r1, r5
 8002762:	f7fd feed 	bl	8000540 <__aeabi_dmul>
 8002766:	f7fe f9c3 	bl	8000af0 <__aeabi_d2f>
 800276a:	ee00 0a10 	vmov	s0, r0
		break;
 800276e:	e795      	b.n	800269c <calc_acceleration_smc+0x8c>
		result = - (s4*(3.63 - 0.66*c5*c5 + states->q*c4*s5*(2.18+1.3*fabs(states->q))) / c5) - 2.66*states->p*fabs(states->p);
 8002770:	f7fd fe8e 	bl	8000490 <__aeabi_f2d>
 8002774:	4680      	mov	r8, r0
 8002776:	4689      	mov	r9, r1
 8002778:	ed94 8a0a 	vldr	s16, [r4, #40]	; 0x28
 800277c:	edd4 8a09 	vldr	s17, [r4, #36]	; 0x24
 8002780:	eef0 7ac8 	vabs.f32	s15, s16
 8002784:	ee17 0a90 	vmov	r0, s15
 8002788:	f7fd fe82 	bl	8000490 <__aeabi_f2d>
 800278c:	a35a      	add	r3, pc, #360	; (adr r3, 80028f8 <calc_acceleration_smc+0x2e8>)
 800278e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002792:	f7fd fed5 	bl	8000540 <__aeabi_dmul>
 8002796:	a35a      	add	r3, pc, #360	; (adr r3, 8002900 <calc_acceleration_smc+0x2f0>)
 8002798:	e9d3 2300 	ldrd	r2, r3, [r3]
 800279c:	f7fd fd1a 	bl	80001d4 <__adddf3>
 80027a0:	4604      	mov	r4, r0
 80027a2:	460d      	mov	r5, r1
 80027a4:	ee28 8a09 	vmul.f32	s16, s16, s18
 80027a8:	ee07 6a90 	vmov	s15, r6
 80027ac:	ee68 7a27 	vmul.f32	s15, s16, s15
 80027b0:	ee17 0a90 	vmov	r0, s15
 80027b4:	f7fd fe6c 	bl	8000490 <__aeabi_f2d>
 80027b8:	4602      	mov	r2, r0
 80027ba:	460b      	mov	r3, r1
 80027bc:	4620      	mov	r0, r4
 80027be:	4629      	mov	r1, r5
 80027c0:	f7fd febe 	bl	8000540 <__aeabi_dmul>
 80027c4:	4604      	mov	r4, r0
 80027c6:	460d      	mov	r5, r1
 80027c8:	a34f      	add	r3, pc, #316	; (adr r3, 8002908 <calc_acceleration_smc+0x2f8>)
 80027ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027ce:	4640      	mov	r0, r8
 80027d0:	4649      	mov	r1, r9
 80027d2:	f7fd feb5 	bl	8000540 <__aeabi_dmul>
 80027d6:	4642      	mov	r2, r8
 80027d8:	464b      	mov	r3, r9
 80027da:	f7fd feb1 	bl	8000540 <__aeabi_dmul>
 80027de:	4602      	mov	r2, r0
 80027e0:	460b      	mov	r3, r1
 80027e2:	a14b      	add	r1, pc, #300	; (adr r1, 8002910 <calc_acceleration_smc+0x300>)
 80027e4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80027e8:	f7fd fcf2 	bl	80001d0 <__aeabi_dsub>
 80027ec:	4602      	mov	r2, r0
 80027ee:	460b      	mov	r3, r1
 80027f0:	4620      	mov	r0, r4
 80027f2:	4629      	mov	r1, r5
 80027f4:	f7fd fcee 	bl	80001d4 <__adddf3>
 80027f8:	4604      	mov	r4, r0
 80027fa:	460d      	mov	r5, r1
 80027fc:	ee1a 0a10 	vmov	r0, s20
 8002800:	f7fd fe46 	bl	8000490 <__aeabi_f2d>
 8002804:	4602      	mov	r2, r0
 8002806:	460b      	mov	r3, r1
 8002808:	4620      	mov	r0, r4
 800280a:	4629      	mov	r1, r5
 800280c:	f7fd fe98 	bl	8000540 <__aeabi_dmul>
 8002810:	4642      	mov	r2, r8
 8002812:	464b      	mov	r3, r9
 8002814:	f7fd ffbe 	bl	8000794 <__aeabi_ddiv>
 8002818:	4604      	mov	r4, r0
 800281a:	f101 4500 	add.w	r5, r1, #2147483648	; 0x80000000
 800281e:	ee18 0a90 	vmov	r0, s17
 8002822:	f7fd fe35 	bl	8000490 <__aeabi_f2d>
 8002826:	a33c      	add	r3, pc, #240	; (adr r3, 8002918 <calc_acceleration_smc+0x308>)
 8002828:	e9d3 2300 	ldrd	r2, r3, [r3]
 800282c:	f7fd fe88 	bl	8000540 <__aeabi_dmul>
 8002830:	4680      	mov	r8, r0
 8002832:	4689      	mov	r9, r1
 8002834:	eef0 7ae8 	vabs.f32	s15, s17
 8002838:	ee17 0a90 	vmov	r0, s15
 800283c:	f7fd fe28 	bl	8000490 <__aeabi_f2d>
 8002840:	4602      	mov	r2, r0
 8002842:	460b      	mov	r3, r1
 8002844:	4640      	mov	r0, r8
 8002846:	4649      	mov	r1, r9
 8002848:	f7fd fe7a 	bl	8000540 <__aeabi_dmul>
 800284c:	4602      	mov	r2, r0
 800284e:	460b      	mov	r3, r1
 8002850:	4620      	mov	r0, r4
 8002852:	4629      	mov	r1, r5
 8002854:	f7fd fcbc 	bl	80001d0 <__aeabi_dsub>
 8002858:	f7fe f94a 	bl	8000af0 <__aeabi_d2f>
 800285c:	ee00 0a10 	vmov	s0, r0
		break;
 8002860:	e71c      	b.n	800269c <calc_acceleration_smc+0x8c>
		result = -c4*(3.1*s5 + states->q*c4*(2.16+1.27*fabs(states->q)));
 8002862:	ed94 8a0a 	vldr	s16, [r4, #40]	; 0x28
 8002866:	eef0 7ac8 	vabs.f32	s15, s16
 800286a:	ee17 0a90 	vmov	r0, s15
 800286e:	f7fd fe0f 	bl	8000490 <__aeabi_f2d>
 8002872:	a32b      	add	r3, pc, #172	; (adr r3, 8002920 <calc_acceleration_smc+0x310>)
 8002874:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002878:	f7fd fe62 	bl	8000540 <__aeabi_dmul>
 800287c:	a32a      	add	r3, pc, #168	; (adr r3, 8002928 <calc_acceleration_smc+0x318>)
 800287e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002882:	f7fd fca7 	bl	80001d4 <__adddf3>
 8002886:	4604      	mov	r4, r0
 8002888:	460d      	mov	r5, r1
 800288a:	ee68 7a09 	vmul.f32	s15, s16, s18
 800288e:	ee17 0a90 	vmov	r0, s15
 8002892:	f7fd fdfd 	bl	8000490 <__aeabi_f2d>
 8002896:	4602      	mov	r2, r0
 8002898:	460b      	mov	r3, r1
 800289a:	4620      	mov	r0, r4
 800289c:	4629      	mov	r1, r5
 800289e:	f7fd fe4f 	bl	8000540 <__aeabi_dmul>
 80028a2:	4604      	mov	r4, r0
 80028a4:	460d      	mov	r5, r1
 80028a6:	4630      	mov	r0, r6
 80028a8:	f7fd fdf2 	bl	8000490 <__aeabi_f2d>
 80028ac:	a320      	add	r3, pc, #128	; (adr r3, 8002930 <calc_acceleration_smc+0x320>)
 80028ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028b2:	f7fd fe45 	bl	8000540 <__aeabi_dmul>
 80028b6:	4602      	mov	r2, r0
 80028b8:	460b      	mov	r3, r1
 80028ba:	4620      	mov	r0, r4
 80028bc:	4629      	mov	r1, r5
 80028be:	f7fd fc89 	bl	80001d4 <__adddf3>
 80028c2:	4604      	mov	r4, r0
 80028c4:	460d      	mov	r5, r1
 80028c6:	eef1 7a49 	vneg.f32	s15, s18
 80028ca:	ee17 0a90 	vmov	r0, s15
 80028ce:	f7fd fddf 	bl	8000490 <__aeabi_f2d>
 80028d2:	4602      	mov	r2, r0
 80028d4:	460b      	mov	r3, r1
 80028d6:	4620      	mov	r0, r4
 80028d8:	4629      	mov	r1, r5
 80028da:	f7fd fe31 	bl	8000540 <__aeabi_dmul>
 80028de:	f7fe f907 	bl	8000af0 <__aeabi_d2f>
 80028e2:	ee00 0a10 	vmov	s0, r0
		break;
 80028e6:	e6d9      	b.n	800269c <calc_acceleration_smc+0x8c>
 80028e8:	d70a3d71 	.word	0xd70a3d71
 80028ec:	401870a3 	.word	0x401870a3
 80028f0:	51eb851f 	.word	0x51eb851f
 80028f4:	3fd51eb8 	.word	0x3fd51eb8
 80028f8:	cccccccd 	.word	0xcccccccd
 80028fc:	3ff4cccc 	.word	0x3ff4cccc
 8002900:	d70a3d71 	.word	0xd70a3d71
 8002904:	400170a3 	.word	0x400170a3
 8002908:	51eb851f 	.word	0x51eb851f
 800290c:	3fe51eb8 	.word	0x3fe51eb8
 8002910:	70a3d70a 	.word	0x70a3d70a
 8002914:	400d0a3d 	.word	0x400d0a3d
 8002918:	147ae148 	.word	0x147ae148
 800291c:	400547ae 	.word	0x400547ae
 8002920:	851eb852 	.word	0x851eb852
 8002924:	3ff451eb 	.word	0x3ff451eb
 8002928:	147ae148 	.word	0x147ae148
 800292c:	400147ae 	.word	0x400147ae
 8002930:	cccccccd 	.word	0xcccccccd
 8002934:	4008cccc 	.word	0x4008cccc
 8002938:	00000000 	.word	0x00000000
 800293c:	3ff00000 	.word	0x3ff00000

08002940 <step_machine>:

void step_machine(const step_test *step, float *c_ref, float old_ref){
 8002940:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002944:	ed2d 8b02 	vpush	{d8}
 8002948:	b083      	sub	sp, #12
	float step_ref = 0.0;
	if (step_counter.seq_time < step->step_start){
 800294a:	4b73      	ldr	r3, [pc, #460]	; (8002b18 <step_machine+0x1d8>)
 800294c:	681e      	ldr	r6, [r3, #0]
 800294e:	6847      	ldr	r7, [r0, #4]
 8002950:	42be      	cmp	r6, r7
 8002952:	f0c0 8099 	bcc.w	8002a88 <step_machine+0x148>
 8002956:	4604      	mov	r4, r0
 8002958:	460d      	mov	r5, r1
 800295a:	eeb0 8a40 	vmov.f32	s16, s0

		return;
	}

	if (step->sine_trajectory){
 800295e:	7803      	ldrb	r3, [r0, #0]
 8002960:	2b00      	cmp	r3, #0
 8002962:	f000 8096 	beq.w	8002a92 <step_machine+0x152>
		step_ref = old_ref + step->amp1*sin((step_counter.seq_time-step->step_start)*step->freq1*0.001) + step->amp2*sin((step_counter.seq_time-step->step_start*0.001)*step->freq2);
 8002966:	1bf3      	subs	r3, r6, r7
 8002968:	ee07 3a90 	vmov	s15, r3
 800296c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002970:	ed90 7a05 	vldr	s14, [r0, #20]
 8002974:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002978:	ee17 0a90 	vmov	r0, s15
 800297c:	f7fd fd88 	bl	8000490 <__aeabi_f2d>
 8002980:	a363      	add	r3, pc, #396	; (adr r3, 8002b10 <step_machine+0x1d0>)
 8002982:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002986:	f7fd fddb 	bl	8000540 <__aeabi_dmul>
 800298a:	ec41 0b10 	vmov	d0, r0, r1
 800298e:	f007 fc17 	bl	800a1c0 <sin>
 8002992:	ec5b ab10 	vmov	sl, fp, d0
 8002996:	4630      	mov	r0, r6
 8002998:	f7fd fd58 	bl	800044c <__aeabi_ui2d>
 800299c:	4680      	mov	r8, r0
 800299e:	4689      	mov	r9, r1
 80029a0:	4638      	mov	r0, r7
 80029a2:	f7fd fd53 	bl	800044c <__aeabi_ui2d>
 80029a6:	a35a      	add	r3, pc, #360	; (adr r3, 8002b10 <step_machine+0x1d0>)
 80029a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029ac:	f7fd fdc8 	bl	8000540 <__aeabi_dmul>
 80029b0:	4602      	mov	r2, r0
 80029b2:	460b      	mov	r3, r1
 80029b4:	4640      	mov	r0, r8
 80029b6:	4649      	mov	r1, r9
 80029b8:	f7fd fc0a 	bl	80001d0 <__aeabi_dsub>
 80029bc:	4680      	mov	r8, r0
 80029be:	4689      	mov	r9, r1
 80029c0:	69e0      	ldr	r0, [r4, #28]
 80029c2:	f7fd fd65 	bl	8000490 <__aeabi_f2d>
 80029c6:	4602      	mov	r2, r0
 80029c8:	460b      	mov	r3, r1
 80029ca:	4640      	mov	r0, r8
 80029cc:	4649      	mov	r1, r9
 80029ce:	f7fd fdb7 	bl	8000540 <__aeabi_dmul>
 80029d2:	ec41 0b10 	vmov	d0, r0, r1
 80029d6:	f007 fbf3 	bl	800a1c0 <sin>
 80029da:	ed8d 0b00 	vstr	d0, [sp]
 80029de:	69a0      	ldr	r0, [r4, #24]
 80029e0:	f7fd fd56 	bl	8000490 <__aeabi_f2d>
 80029e4:	4652      	mov	r2, sl
 80029e6:	465b      	mov	r3, fp
 80029e8:	f7fd fdaa 	bl	8000540 <__aeabi_dmul>
 80029ec:	4680      	mov	r8, r0
 80029ee:	4689      	mov	r9, r1
 80029f0:	ee18 0a10 	vmov	r0, s16
 80029f4:	f7fd fd4c 	bl	8000490 <__aeabi_f2d>
 80029f8:	4602      	mov	r2, r0
 80029fa:	460b      	mov	r3, r1
 80029fc:	4640      	mov	r0, r8
 80029fe:	4649      	mov	r1, r9
 8002a00:	f7fd fbe8 	bl	80001d4 <__adddf3>
 8002a04:	4680      	mov	r8, r0
 8002a06:	4689      	mov	r9, r1
 8002a08:	6a20      	ldr	r0, [r4, #32]
 8002a0a:	f7fd fd41 	bl	8000490 <__aeabi_f2d>
 8002a0e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8002a12:	f7fd fd95 	bl	8000540 <__aeabi_dmul>
 8002a16:	4602      	mov	r2, r0
 8002a18:	460b      	mov	r3, r1
 8002a1a:	4640      	mov	r0, r8
 8002a1c:	4649      	mov	r1, r9
 8002a1e:	f7fd fbd9 	bl	80001d4 <__adddf3>
 8002a22:	f7fe f865 	bl	8000af0 <__aeabi_d2f>
 8002a26:	ee07 0a90 	vmov	s15, r0
	else {
		step_ref = old_ref + step->step_size;
	}

	float delta_ref = 0.0;
	if (step_counter.seq_time < step->step_stop){
 8002a2a:	68a3      	ldr	r3, [r4, #8]
 8002a2c:	429e      	cmp	r6, r3
 8002a2e:	d23a      	bcs.n	8002aa6 <step_machine+0x166>
		if (step_counter.incr_timer >= 10){
 8002a30:	4b39      	ldr	r3, [pc, #228]	; (8002b18 <step_machine+0x1d8>)
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	2b09      	cmp	r3, #9
 8002a36:	d927      	bls.n	8002a88 <step_machine+0x148>
			delta_ref = step_ref - *c_ref;
 8002a38:	edd5 8a00 	vldr	s17, [r5]
 8002a3c:	ee37 8ae8 	vsub.f32	s16, s15, s17
			if(fabs(delta_ref) > step->ref_rate){ 	*c_ref += copysign(step->ref_rate, delta_ref);	}
 8002a40:	edd4 7a04 	vldr	s15, [r4, #16]
 8002a44:	eeb0 7ac8 	vabs.f32	s14, s16
 8002a48:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002a4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a50:	dd24      	ble.n	8002a9c <step_machine+0x15c>
 8002a52:	ee17 0a90 	vmov	r0, s15
 8002a56:	f7fd fd1b 	bl	8000490 <__aeabi_f2d>
 8002a5a:	4606      	mov	r6, r0
 8002a5c:	460f      	mov	r7, r1
 8002a5e:	ee18 0a10 	vmov	r0, s16
 8002a62:	f7fd fd15 	bl	8000490 <__aeabi_f2d>
 8002a66:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 8002a6a:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 8002a6e:	ea42 0903 	orr.w	r9, r2, r3
 8002a72:	ee18 0a90 	vmov	r0, s17
 8002a76:	f7fd fd0b 	bl	8000490 <__aeabi_f2d>
 8002a7a:	4632      	mov	r2, r6
 8002a7c:	464b      	mov	r3, r9
 8002a7e:	f7fd fba9 	bl	80001d4 <__adddf3>
 8002a82:	f7fe f835 	bl	8000af0 <__aeabi_d2f>
 8002a86:	6028      	str	r0, [r5, #0]
			if(fabs(delta_ref) > step->ref_rate){ 	*c_ref += copysign(step->ref_rate, delta_ref);	}
			else{									*c_ref += delta_ref;	}
		}
	}
	return;
}
 8002a88:	b003      	add	sp, #12
 8002a8a:	ecbd 8b02 	vpop	{d8}
 8002a8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		step_ref = old_ref + step->step_size;
 8002a92:	edd0 7a03 	vldr	s15, [r0, #12]
 8002a96:	ee70 7a27 	vadd.f32	s15, s0, s15
 8002a9a:	e7c6      	b.n	8002a2a <step_machine+0xea>
			else{									*c_ref += delta_ref;	}
 8002a9c:	ee78 7a88 	vadd.f32	s15, s17, s16
 8002aa0:	edc5 7a00 	vstr	s15, [r5]
 8002aa4:	e7f0      	b.n	8002a88 <step_machine+0x148>
		if (step_counter.incr_timer >= 10){
 8002aa6:	4b1c      	ldr	r3, [pc, #112]	; (8002b18 <step_machine+0x1d8>)
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	2b09      	cmp	r3, #9
 8002aac:	d9ec      	bls.n	8002a88 <step_machine+0x148>
			delta_ref = old_ref - *c_ref ;
 8002aae:	edd5 8a00 	vldr	s17, [r5]
 8002ab2:	ee38 8a68 	vsub.f32	s16, s16, s17
			if(fabs(delta_ref) > step->ref_rate){ 	*c_ref += copysign(step->ref_rate, delta_ref);	}
 8002ab6:	edd4 7a04 	vldr	s15, [r4, #16]
 8002aba:	eeb0 7ac8 	vabs.f32	s14, s16
 8002abe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002ac2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ac6:	dd1b      	ble.n	8002b00 <step_machine+0x1c0>
 8002ac8:	ee17 0a90 	vmov	r0, s15
 8002acc:	f7fd fce0 	bl	8000490 <__aeabi_f2d>
 8002ad0:	4606      	mov	r6, r0
 8002ad2:	460f      	mov	r7, r1
 8002ad4:	ee18 0a10 	vmov	r0, s16
 8002ad8:	f7fd fcda 	bl	8000490 <__aeabi_f2d>
 8002adc:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 8002ae0:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 8002ae4:	ea42 0903 	orr.w	r9, r2, r3
 8002ae8:	ee18 0a90 	vmov	r0, s17
 8002aec:	f7fd fcd0 	bl	8000490 <__aeabi_f2d>
 8002af0:	4632      	mov	r2, r6
 8002af2:	464b      	mov	r3, r9
 8002af4:	f7fd fb6e 	bl	80001d4 <__adddf3>
 8002af8:	f7fd fffa 	bl	8000af0 <__aeabi_d2f>
 8002afc:	6028      	str	r0, [r5, #0]
 8002afe:	e7c3      	b.n	8002a88 <step_machine+0x148>
			else{									*c_ref += delta_ref;	}
 8002b00:	ee38 8a88 	vadd.f32	s16, s17, s16
 8002b04:	ed85 8a00 	vstr	s16, [r5]
 8002b08:	e7be      	b.n	8002a88 <step_machine+0x148>
 8002b0a:	bf00      	nop
 8002b0c:	f3af 8000 	nop.w
 8002b10:	d2f1a9fc 	.word	0xd2f1a9fc
 8002b14:	3f50624d 	.word	0x3f50624d
 8002b18:	20000c54 	.word	0x20000c54

08002b1c <oppstartCAN>:
uint8_t canRX[8] = {0,0,0,0,0,0,0,0};  //CAN Bus Receive Buffer
uint8_t csend[8] = {0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08}; // Tx Buffer
CAN_FilterTypeDef canfilter;
uint32_t canMailbox; //CAN Bus Mail box variable

void oppstartCAN(uint8_t filterGruppe, CAN_HandleTypeDef *canPort) {
 8002b1c:	b510      	push	{r4, lr}
 8002b1e:	460c      	mov	r4, r1
    canfilter.FilterBank = 0;
 8002b20:	4913      	ldr	r1, [pc, #76]	; (8002b70 <oppstartCAN+0x54>)
 8002b22:	2300      	movs	r3, #0
 8002b24:	614b      	str	r3, [r1, #20]
    canfilter.FilterMode = CAN_FILTERMODE_IDMASK;
 8002b26:	618b      	str	r3, [r1, #24]
    canfilter.FilterFIFOAssignment = CAN_RX_FIFO0;
 8002b28:	610b      	str	r3, [r1, #16]
    canfilter.FilterIdHigh = filterGruppe << 10 | 0x1F;
 8002b2a:	0280      	lsls	r0, r0, #10
 8002b2c:	f040 001f 	orr.w	r0, r0, #31
 8002b30:	6008      	str	r0, [r1, #0]
    canfilter.FilterIdLow = 0xFFF8;
 8002b32:	f64f 72f8 	movw	r2, #65528	; 0xfff8
 8002b36:	604a      	str	r2, [r1, #4]
    canfilter.FilterMaskIdHigh = 0x3F << 10 | 0x1F;
 8002b38:	f64f 401f 	movw	r0, #64543	; 0xfc1f
 8002b3c:	6088      	str	r0, [r1, #8]
    canfilter.FilterMaskIdLow = 0xFFF8;
 8002b3e:	60ca      	str	r2, [r1, #12]
    canfilter.FilterScale = CAN_FILTERSCALE_32BIT;
 8002b40:	2201      	movs	r2, #1
 8002b42:	61ca      	str	r2, [r1, #28]
    canfilter.FilterActivation = ENABLE;
 8002b44:	620a      	str	r2, [r1, #32]
    canfilter.SlaveStartFilterBank = 14;
 8002b46:	220e      	movs	r2, #14
 8002b48:	624a      	str	r2, [r1, #36]	; 0x24

    txHeader.DLC = 8; // Number of bites to be transmitted max- 8
 8002b4a:	4a0a      	ldr	r2, [pc, #40]	; (8002b74 <oppstartCAN+0x58>)
 8002b4c:	2008      	movs	r0, #8
 8002b4e:	6110      	str	r0, [r2, #16]
    txHeader.IDE = CAN_ID_STD;
 8002b50:	6093      	str	r3, [r2, #8]
    txHeader.RTR = CAN_RTR_DATA;
 8002b52:	60d3      	str	r3, [r2, #12]
    txHeader.StdId = 0x00;
 8002b54:	6013      	str	r3, [r2, #0]
    txHeader.ExtId = 0x00;
 8002b56:	6053      	str	r3, [r2, #4]
    txHeader.TransmitGlobalTime = DISABLE;
 8002b58:	7513      	strb	r3, [r2, #20]

    HAL_CAN_ConfigFilter(canPort, &canfilter);
 8002b5a:	4620      	mov	r0, r4
 8002b5c:	f002 fe40 	bl	80057e0 <HAL_CAN_ConfigFilter>
    HAL_CAN_Start(canPort);
 8002b60:	4620      	mov	r0, r4
 8002b62:	f002 fed9 	bl	8005918 <HAL_CAN_Start>
    HAL_CAN_ActivateNotification(canPort, CAN_IT_RX_FIFO0_MSG_PENDING);
 8002b66:	2102      	movs	r1, #2
 8002b68:	4620      	mov	r0, r4
 8002b6a:	f003 f825 	bl	8005bb8 <HAL_CAN_ActivateNotification>
}
 8002b6e:	bd10      	pop	{r4, pc}
 8002b70:	200001d4 	.word	0x200001d4
 8002b74:	20000d54 	.word	0x20000d54

08002b78 <sendDataCAN>:

void sendDataCAN(uint16_t id, CAN_HandleTypeDef *canPort) {
 8002b78:	b508      	push	{r3, lr}
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	4608      	mov	r0, r1
    txHeader.StdId = id;
 8002b7e:	4903      	ldr	r1, [pc, #12]	; (8002b8c <sendDataCAN+0x14>)
 8002b80:	600b      	str	r3, [r1, #0]
    HAL_CAN_AddTxMessage(canPort, &txHeader, csend, &canMailbox);
 8002b82:	4b03      	ldr	r3, [pc, #12]	; (8002b90 <sendDataCAN+0x18>)
 8002b84:	4a03      	ldr	r2, [pc, #12]	; (8002b94 <sendDataCAN+0x1c>)
 8002b86:	f002 fef5 	bl	8005974 <HAL_CAN_AddTxMessage>
}
 8002b8a:	bd08      	pop	{r3, pc}
 8002b8c:	20000d54 	.word	0x20000d54
 8002b90:	200001c8 	.word	0x200001c8
 8002b94:	20000000 	.word	0x20000000

08002b98 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002b98:	b500      	push	{lr}
 8002b9a:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002b9c:	2230      	movs	r2, #48	; 0x30
 8002b9e:	2100      	movs	r1, #0
 8002ba0:	a808      	add	r0, sp, #32
 8002ba2:	f007 f9b3 	bl	8009f0c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	9303      	str	r3, [sp, #12]
 8002baa:	9304      	str	r3, [sp, #16]
 8002bac:	9305      	str	r3, [sp, #20]
 8002bae:	9306      	str	r3, [sp, #24]
 8002bb0:	9307      	str	r3, [sp, #28]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002bb2:	9301      	str	r3, [sp, #4]
 8002bb4:	4a20      	ldr	r2, [pc, #128]	; (8002c38 <SystemClock_Config+0xa0>)
 8002bb6:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8002bb8:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8002bbc:	6411      	str	r1, [r2, #64]	; 0x40
 8002bbe:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002bc0:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8002bc4:	9201      	str	r2, [sp, #4]
 8002bc6:	9a01      	ldr	r2, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002bc8:	9302      	str	r3, [sp, #8]
 8002bca:	4b1c      	ldr	r3, [pc, #112]	; (8002c3c <SystemClock_Config+0xa4>)
 8002bcc:	681a      	ldr	r2, [r3, #0]
 8002bce:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002bd2:	601a      	str	r2, [r3, #0]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002bda:	9302      	str	r3, [sp, #8]
 8002bdc:	9b02      	ldr	r3, [sp, #8]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002bde:	2301      	movs	r3, #1
 8002be0:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002be2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002be6:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002be8:	2302      	movs	r3, #2
 8002bea:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002bec:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8002bf0:	920f      	str	r2, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002bf2:	2204      	movs	r2, #4
 8002bf4:	9210      	str	r2, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 8002bf6:	2290      	movs	r2, #144	; 0x90
 8002bf8:	9211      	str	r2, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002bfa:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 6;
 8002bfc:	2306      	movs	r3, #6
 8002bfe:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002c00:	a808      	add	r0, sp, #32
 8002c02:	f004 fac1 	bl	8007188 <HAL_RCC_OscConfig>
 8002c06:	b998      	cbnz	r0, 8002c30 <SystemClock_Config+0x98>
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002c08:	230f      	movs	r3, #15
 8002c0a:	9303      	str	r3, [sp, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002c0c:	2302      	movs	r3, #2
 8002c0e:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002c10:	2300      	movs	r3, #0
 8002c12:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002c14:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002c18:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002c1a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c1e:	9307      	str	r3, [sp, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002c20:	2104      	movs	r1, #4
 8002c22:	a803      	add	r0, sp, #12
 8002c24:	f004 fd16 	bl	8007654 <HAL_RCC_ClockConfig>
 8002c28:	b920      	cbnz	r0, 8002c34 <SystemClock_Config+0x9c>
  {
    Error_Handler();
  }
}
 8002c2a:	b015      	add	sp, #84	; 0x54
 8002c2c:	f85d fb04 	ldr.w	pc, [sp], #4
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002c30:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002c32:	e7fe      	b.n	8002c32 <SystemClock_Config+0x9a>
 8002c34:	b672      	cpsid	i
 8002c36:	e7fe      	b.n	8002c36 <SystemClock_Config+0x9e>
 8002c38:	40023800 	.word	0x40023800
 8002c3c:	40007000 	.word	0x40007000

08002c40 <GPIO_setup>:
void GPIO_setup(void){
 8002c40:	b500      	push	{lr}
 8002c42:	b087      	sub	sp, #28
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c44:	2300      	movs	r3, #0
 8002c46:	9303      	str	r3, [sp, #12]
 8002c48:	9304      	str	r3, [sp, #16]
 8002c4a:	9305      	str	r3, [sp, #20]
	GPIO_InitStruct.Pin = LED_HHF | LED_HHB | LED_HVB | LED_HVF | LED_VHF | LED_VHB | LED_VVB | LED_VVF;
 8002c4c:	f240 73f4 	movw	r3, #2036	; 0x7f4
 8002c50:	9301      	str	r3, [sp, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c52:	2301      	movs	r3, #1
 8002c54:	9302      	str	r3, [sp, #8]
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002c56:	a901      	add	r1, sp, #4
 8002c58:	4802      	ldr	r0, [pc, #8]	; (8002c64 <GPIO_setup+0x24>)
 8002c5a:	f003 f95b 	bl	8005f14 <HAL_GPIO_Init>
}
 8002c5e:	b007      	add	sp, #28
 8002c60:	f85d fb04 	ldr.w	pc, [sp], #4
 8002c64:	40021000 	.word	0x40021000

08002c68 <main>:
{
 8002c68:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 8002c6c:	b095      	sub	sp, #84	; 0x54
  HAL_Init();
 8002c6e:	f002 fce7 	bl	8005640 <HAL_Init>
  SystemClock_Config();
 8002c72:	f7ff ff91 	bl	8002b98 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c76:	2400      	movs	r4, #0
 8002c78:	940d      	str	r4, [sp, #52]	; 0x34
 8002c7a:	940e      	str	r4, [sp, #56]	; 0x38
 8002c7c:	940f      	str	r4, [sp, #60]	; 0x3c
 8002c7e:	9410      	str	r4, [sp, #64]	; 0x40
 8002c80:	9411      	str	r4, [sp, #68]	; 0x44
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002c82:	9401      	str	r4, [sp, #4]
 8002c84:	4bad      	ldr	r3, [pc, #692]	; (8002f3c <main+0x2d4>)
 8002c86:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c88:	f042 0210 	orr.w	r2, r2, #16
 8002c8c:	631a      	str	r2, [r3, #48]	; 0x30
 8002c8e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c90:	f002 0210 	and.w	r2, r2, #16
 8002c94:	9201      	str	r2, [sp, #4]
 8002c96:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c98:	9402      	str	r4, [sp, #8]
 8002c9a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c9c:	f042 0204 	orr.w	r2, r2, #4
 8002ca0:	631a      	str	r2, [r3, #48]	; 0x30
 8002ca2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ca4:	f002 0204 	and.w	r2, r2, #4
 8002ca8:	9202      	str	r2, [sp, #8]
 8002caa:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002cac:	9403      	str	r4, [sp, #12]
 8002cae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002cb0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002cb4:	631a      	str	r2, [r3, #48]	; 0x30
 8002cb6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002cb8:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8002cbc:	9203      	str	r2, [sp, #12]
 8002cbe:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cc0:	9404      	str	r4, [sp, #16]
 8002cc2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002cc4:	f042 0201 	orr.w	r2, r2, #1
 8002cc8:	631a      	str	r2, [r3, #48]	; 0x30
 8002cca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ccc:	f002 0201 	and.w	r2, r2, #1
 8002cd0:	9204      	str	r2, [sp, #16]
 8002cd2:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002cd4:	9405      	str	r4, [sp, #20]
 8002cd6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002cd8:	f042 0202 	orr.w	r2, r2, #2
 8002cdc:	631a      	str	r2, [r3, #48]	; 0x30
 8002cde:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ce0:	f002 0202 	and.w	r2, r2, #2
 8002ce4:	9205      	str	r2, [sp, #20]
 8002ce6:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002ce8:	9406      	str	r4, [sp, #24]
 8002cea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002cec:	f042 0208 	orr.w	r2, r2, #8
 8002cf0:	631a      	str	r2, [r3, #48]	; 0x30
 8002cf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cf4:	f003 0308 	and.w	r3, r3, #8
 8002cf8:	9306      	str	r3, [sp, #24]
 8002cfa:	9b06      	ldr	r3, [sp, #24]
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8002cfc:	4f90      	ldr	r7, [pc, #576]	; (8002f40 <main+0x2d8>)
 8002cfe:	4622      	mov	r2, r4
 8002d00:	2108      	movs	r1, #8
 8002d02:	4638      	mov	r0, r7
 8002d04:	f003 fa0c 	bl	8006120 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8002d08:	f8df 8250 	ldr.w	r8, [pc, #592]	; 8002f5c <main+0x2f4>
 8002d0c:	2201      	movs	r2, #1
 8002d0e:	4611      	mov	r1, r2
 8002d10:	4640      	mov	r0, r8
 8002d12:	f003 fa05 	bl	8006120 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, LD3_Pin|LD5_Pin|Audio_RST_Pin, GPIO_PIN_RESET);
 8002d16:	f8df 9248 	ldr.w	r9, [pc, #584]	; 8002f60 <main+0x2f8>
 8002d1a:	4622      	mov	r2, r4
 8002d1c:	f246 0110 	movw	r1, #24592	; 0x6010
 8002d20:	4648      	mov	r0, r9
 8002d22:	f003 f9fd 	bl	8006120 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8002d26:	2608      	movs	r6, #8
 8002d28:	960d      	str	r6, [sp, #52]	; 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d2a:	2501      	movs	r5, #1
 8002d2c:	950e      	str	r5, [sp, #56]	; 0x38
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d2e:	940f      	str	r4, [sp, #60]	; 0x3c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d30:	9410      	str	r4, [sp, #64]	; 0x40
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8002d32:	a90d      	add	r1, sp, #52	; 0x34
 8002d34:	4638      	mov	r0, r7
 8002d36:	f003 f8ed 	bl	8005f14 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8002d3a:	950d      	str	r5, [sp, #52]	; 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d3c:	950e      	str	r5, [sp, #56]	; 0x38
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d3e:	940f      	str	r4, [sp, #60]	; 0x3c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d40:	9410      	str	r4, [sp, #64]	; 0x40
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8002d42:	a90d      	add	r1, sp, #52	; 0x34
 8002d44:	4640      	mov	r0, r8
 8002d46:	f003 f8e5 	bl	8005f14 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8002d4a:	960d      	str	r6, [sp, #52]	; 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d4c:	2602      	movs	r6, #2
 8002d4e:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d50:	940f      	str	r4, [sp, #60]	; 0x3c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d52:	9410      	str	r4, [sp, #64]	; 0x40
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002d54:	f04f 0a05 	mov.w	sl, #5
 8002d58:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8002d5c:	a90d      	add	r1, sp, #52	; 0x34
 8002d5e:	4640      	mov	r0, r8
 8002d60:	f003 f8d8 	bl	8005f14 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = B1_Pin;
 8002d64:	950d      	str	r5, [sp, #52]	; 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002d66:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8002d6a:	930e      	str	r3, [sp, #56]	; 0x38
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d6c:	940f      	str	r4, [sp, #60]	; 0x3c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002d6e:	f5a8 6800 	sub.w	r8, r8, #2048	; 0x800
 8002d72:	a90d      	add	r1, sp, #52	; 0x34
 8002d74:	4640      	mov	r0, r8
 8002d76:	f003 f8cd 	bl	8005f14 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8002d7a:	23e0      	movs	r3, #224	; 0xe0
 8002d7c:	930d      	str	r3, [sp, #52]	; 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d7e:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d80:	940f      	str	r4, [sp, #60]	; 0x3c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d82:	9410      	str	r4, [sp, #64]	; 0x40
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002d84:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d88:	a90d      	add	r1, sp, #52	; 0x34
 8002d8a:	4640      	mov	r0, r8
 8002d8c:	f003 f8c2 	bl	8005f14 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8002d90:	f04f 0b04 	mov.w	fp, #4
 8002d94:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002d98:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d9a:	940f      	str	r4, [sp, #60]	; 0x3c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8002d9c:	f508 6880 	add.w	r8, r8, #1024	; 0x400
 8002da0:	a90d      	add	r1, sp, #52	; 0x34
 8002da2:	4640      	mov	r0, r8
 8002da4:	f003 f8b6 	bl	8005f14 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8002da8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002dac:	930d      	str	r3, [sp, #52]	; 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dae:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002db0:	940f      	str	r4, [sp, #60]	; 0x3c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002db2:	9410      	str	r4, [sp, #64]	; 0x40
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002db4:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8002db8:	a90d      	add	r1, sp, #52	; 0x34
 8002dba:	4640      	mov	r0, r8
 8002dbc:	f003 f8aa 	bl	8005f14 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LD3_Pin|LD5_Pin|Audio_RST_Pin;
 8002dc0:	f246 0310 	movw	r3, #24592	; 0x6010
 8002dc4:	930d      	str	r3, [sp, #52]	; 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002dc6:	950e      	str	r5, [sp, #56]	; 0x38
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dc8:	940f      	str	r4, [sp, #60]	; 0x3c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dca:	9410      	str	r4, [sp, #64]	; 0x40
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002dcc:	a90d      	add	r1, sp, #52	; 0x34
 8002dce:	4648      	mov	r0, r9
 8002dd0:	f003 f8a0 	bl	8005f14 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8002dd4:	2320      	movs	r3, #32
 8002dd6:	930d      	str	r3, [sp, #52]	; 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002dd8:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dda:	940f      	str	r4, [sp, #60]	; 0x3c
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002ddc:	a90d      	add	r1, sp, #52	; 0x34
 8002dde:	4648      	mov	r0, r9
 8002de0:	f003 f898 	bl	8005f14 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8002de4:	f44f 7310 	mov.w	r3, #576	; 0x240
 8002de8:	930d      	str	r3, [sp, #52]	; 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002dea:	2312      	movs	r3, #18
 8002dec:	930e      	str	r3, [sp, #56]	; 0x38
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002dee:	950f      	str	r5, [sp, #60]	; 0x3c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002df0:	9410      	str	r4, [sp, #64]	; 0x40
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002df2:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002df6:	a90d      	add	r1, sp, #52	; 0x34
 8002df8:	4640      	mov	r0, r8
 8002dfa:	f003 f88b 	bl	8005f14 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8002dfe:	960d      	str	r6, [sp, #52]	; 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002e00:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8002e04:	930e      	str	r3, [sp, #56]	; 0x38
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e06:	940f      	str	r4, [sp, #60]	; 0x3c
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8002e08:	a90d      	add	r1, sp, #52	; 0x34
 8002e0a:	4638      	mov	r0, r7
 8002e0c:	f003 f882 	bl	8005f14 <HAL_GPIO_Init>
  hi2s3.Instance = SPI3;
 8002e10:	484c      	ldr	r0, [pc, #304]	; (8002f44 <main+0x2dc>)
 8002e12:	4b4d      	ldr	r3, [pc, #308]	; (8002f48 <main+0x2e0>)
 8002e14:	6003      	str	r3, [r0, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8002e16:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002e1a:	6043      	str	r3, [r0, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8002e1c:	6084      	str	r4, [r0, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8002e1e:	60c4      	str	r4, [r0, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8002e20:	6103      	str	r3, [r0, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8002e22:	4b4a      	ldr	r3, [pc, #296]	; (8002f4c <main+0x2e4>)
 8002e24:	6143      	str	r3, [r0, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8002e26:	6184      	str	r4, [r0, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8002e28:	61c4      	str	r4, [r0, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8002e2a:	6204      	str	r4, [r0, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8002e2c:	f003 fef2 	bl	8006c14 <HAL_I2S_Init>
 8002e30:	2800      	cmp	r0, #0
 8002e32:	f040 81a4 	bne.w	800317e <main+0x516>
  MX_USB_HOST_Init();
 8002e36:	f006 feb5 	bl	8009ba4 <MX_USB_HOST_Init>
  hcan1.Instance = CAN1;
 8002e3a:	4845      	ldr	r0, [pc, #276]	; (8002f50 <main+0x2e8>)
 8002e3c:	4b45      	ldr	r3, [pc, #276]	; (8002f54 <main+0x2ec>)
 8002e3e:	6003      	str	r3, [r0, #0]
  hcan1.Init.Prescaler = 3;
 8002e40:	2303      	movs	r3, #3
 8002e42:	6043      	str	r3, [r0, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8002e44:	2300      	movs	r3, #0
 8002e46:	6083      	str	r3, [r0, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8002e48:	60c3      	str	r3, [r0, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_11TQ;
 8002e4a:	f44f 2220 	mov.w	r2, #655360	; 0xa0000
 8002e4e:	6102      	str	r2, [r0, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_4TQ;
 8002e50:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 8002e54:	6142      	str	r2, [r0, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8002e56:	7603      	strb	r3, [r0, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8002e58:	7643      	strb	r3, [r0, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8002e5a:	7683      	strb	r3, [r0, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8002e5c:	76c3      	strb	r3, [r0, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8002e5e:	7703      	strb	r3, [r0, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8002e60:	7743      	strb	r3, [r0, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8002e62:	f002 fc2d 	bl	80056c0 <HAL_CAN_Init>
 8002e66:	2800      	cmp	r0, #0
 8002e68:	f040 818b 	bne.w	8003182 <main+0x51a>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	9309      	str	r3, [sp, #36]	; 0x24
 8002e70:	930a      	str	r3, [sp, #40]	; 0x28
 8002e72:	930b      	str	r3, [sp, #44]	; 0x2c
 8002e74:	930c      	str	r3, [sp, #48]	; 0x30
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002e76:	9307      	str	r3, [sp, #28]
 8002e78:	9308      	str	r3, [sp, #32]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002e7a:	930d      	str	r3, [sp, #52]	; 0x34
 8002e7c:	930e      	str	r3, [sp, #56]	; 0x38
 8002e7e:	930f      	str	r3, [sp, #60]	; 0x3c
 8002e80:	9310      	str	r3, [sp, #64]	; 0x40
 8002e82:	9311      	str	r3, [sp, #68]	; 0x44
 8002e84:	9312      	str	r3, [sp, #72]	; 0x48
 8002e86:	9313      	str	r3, [sp, #76]	; 0x4c
  htim2.Instance = TIM2;
 8002e88:	4833      	ldr	r0, [pc, #204]	; (8002f58 <main+0x2f0>)
 8002e8a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002e8e:	6002      	str	r2, [r0, #0]
  htim2.Init.Prescaler = 71;
 8002e90:	2247      	movs	r2, #71	; 0x47
 8002e92:	6042      	str	r2, [r0, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e94:	6083      	str	r3, [r0, #8]
  htim2.Init.Period = 9999;
 8002e96:	f242 720f 	movw	r2, #9999	; 0x270f
 8002e9a:	60c2      	str	r2, [r0, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e9c:	6103      	str	r3, [r0, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002e9e:	2380      	movs	r3, #128	; 0x80
 8002ea0:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002ea2:	f004 fe7b 	bl	8007b9c <HAL_TIM_Base_Init>
 8002ea6:	2800      	cmp	r0, #0
 8002ea8:	f040 816d 	bne.w	8003186 <main+0x51e>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002eac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002eb0:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002eb2:	a909      	add	r1, sp, #36	; 0x24
 8002eb4:	4828      	ldr	r0, [pc, #160]	; (8002f58 <main+0x2f0>)
 8002eb6:	f004 ffd9 	bl	8007e6c <HAL_TIM_ConfigClockSource>
 8002eba:	2800      	cmp	r0, #0
 8002ebc:	f040 8165 	bne.w	800318a <main+0x522>
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002ec0:	4825      	ldr	r0, [pc, #148]	; (8002f58 <main+0x2f0>)
 8002ec2:	f004 fec3 	bl	8007c4c <HAL_TIM_PWM_Init>
 8002ec6:	2800      	cmp	r0, #0
 8002ec8:	f040 8161 	bne.w	800318e <main+0x526>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002ecc:	2300      	movs	r3, #0
 8002ece:	9307      	str	r3, [sp, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ed0:	9308      	str	r3, [sp, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002ed2:	a907      	add	r1, sp, #28
 8002ed4:	4820      	ldr	r0, [pc, #128]	; (8002f58 <main+0x2f0>)
 8002ed6:	f005 f907 	bl	80080e8 <HAL_TIMEx_MasterConfigSynchronization>
 8002eda:	2800      	cmp	r0, #0
 8002edc:	f040 8159 	bne.w	8003192 <main+0x52a>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002ee0:	2360      	movs	r3, #96	; 0x60
 8002ee2:	930d      	str	r3, [sp, #52]	; 0x34
  sConfigOC.Pulse = 1499;
 8002ee4:	f240 53db 	movw	r3, #1499	; 0x5db
 8002ee8:	930e      	str	r3, [sp, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002eea:	2200      	movs	r2, #0
 8002eec:	920f      	str	r2, [sp, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002eee:	9211      	str	r2, [sp, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002ef0:	a90d      	add	r1, sp, #52	; 0x34
 8002ef2:	4819      	ldr	r0, [pc, #100]	; (8002f58 <main+0x2f0>)
 8002ef4:	f004 ff3f 	bl	8007d76 <HAL_TIM_PWM_ConfigChannel>
 8002ef8:	2800      	cmp	r0, #0
 8002efa:	f040 814c 	bne.w	8003196 <main+0x52e>
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002efe:	2204      	movs	r2, #4
 8002f00:	a90d      	add	r1, sp, #52	; 0x34
 8002f02:	4815      	ldr	r0, [pc, #84]	; (8002f58 <main+0x2f0>)
 8002f04:	f004 ff37 	bl	8007d76 <HAL_TIM_PWM_ConfigChannel>
 8002f08:	2800      	cmp	r0, #0
 8002f0a:	f040 8146 	bne.w	800319a <main+0x532>
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002f0e:	2208      	movs	r2, #8
 8002f10:	a90d      	add	r1, sp, #52	; 0x34
 8002f12:	4811      	ldr	r0, [pc, #68]	; (8002f58 <main+0x2f0>)
 8002f14:	f004 ff2f 	bl	8007d76 <HAL_TIM_PWM_ConfigChannel>
 8002f18:	2800      	cmp	r0, #0
 8002f1a:	f040 8140 	bne.w	800319e <main+0x536>
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002f1e:	220c      	movs	r2, #12
 8002f20:	a90d      	add	r1, sp, #52	; 0x34
 8002f22:	480d      	ldr	r0, [pc, #52]	; (8002f58 <main+0x2f0>)
 8002f24:	f004 ff27 	bl	8007d76 <HAL_TIM_PWM_ConfigChannel>
 8002f28:	2800      	cmp	r0, #0
 8002f2a:	f040 813a 	bne.w	80031a2 <main+0x53a>
  HAL_TIM_MspPostInit(&htim2);
 8002f2e:	480a      	ldr	r0, [pc, #40]	; (8002f58 <main+0x2f0>)
 8002f30:	f001 f9dc 	bl	80042ec <HAL_TIM_MspPostInit>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002f34:	2300      	movs	r3, #0
 8002f36:	9309      	str	r3, [sp, #36]	; 0x24
 8002f38:	930a      	str	r3, [sp, #40]	; 0x28
 8002f3a:	e013      	b.n	8002f64 <main+0x2fc>
 8002f3c:	40023800 	.word	0x40023800
 8002f40:	40021000 	.word	0x40021000
 8002f44:	2000038c 	.word	0x2000038c
 8002f48:	40003c00 	.word	0x40003c00
 8002f4c:	00017700 	.word	0x00017700
 8002f50:	200002c0 	.word	0x200002c0
 8002f54:	40006400 	.word	0x40006400
 8002f58:	20000428 	.word	0x20000428
 8002f5c:	40020800 	.word	0x40020800
 8002f60:	40020c00 	.word	0x40020c00
 8002f64:	930b      	str	r3, [sp, #44]	; 0x2c
 8002f66:	930c      	str	r3, [sp, #48]	; 0x30
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002f68:	9307      	str	r3, [sp, #28]
 8002f6a:	9308      	str	r3, [sp, #32]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002f6c:	930d      	str	r3, [sp, #52]	; 0x34
 8002f6e:	930e      	str	r3, [sp, #56]	; 0x38
 8002f70:	930f      	str	r3, [sp, #60]	; 0x3c
 8002f72:	9310      	str	r3, [sp, #64]	; 0x40
 8002f74:	9311      	str	r3, [sp, #68]	; 0x44
 8002f76:	9312      	str	r3, [sp, #72]	; 0x48
 8002f78:	9313      	str	r3, [sp, #76]	; 0x4c
  htim3.Instance = TIM3;
 8002f7a:	489c      	ldr	r0, [pc, #624]	; (80031ec <main+0x584>)
 8002f7c:	4a9c      	ldr	r2, [pc, #624]	; (80031f0 <main+0x588>)
 8002f7e:	6002      	str	r2, [r0, #0]
  htim3.Init.Prescaler = 71;
 8002f80:	2247      	movs	r2, #71	; 0x47
 8002f82:	6042      	str	r2, [r0, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f84:	6083      	str	r3, [r0, #8]
  htim3.Init.Period = 9999;
 8002f86:	f242 720f 	movw	r2, #9999	; 0x270f
 8002f8a:	60c2      	str	r2, [r0, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f8c:	6103      	str	r3, [r0, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002f8e:	2380      	movs	r3, #128	; 0x80
 8002f90:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002f92:	f004 fe03 	bl	8007b9c <HAL_TIM_Base_Init>
 8002f96:	2800      	cmp	r0, #0
 8002f98:	f040 8105 	bne.w	80031a6 <main+0x53e>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002f9c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002fa0:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002fa2:	a909      	add	r1, sp, #36	; 0x24
 8002fa4:	4891      	ldr	r0, [pc, #580]	; (80031ec <main+0x584>)
 8002fa6:	f004 ff61 	bl	8007e6c <HAL_TIM_ConfigClockSource>
 8002faa:	2800      	cmp	r0, #0
 8002fac:	f040 80fd 	bne.w	80031aa <main+0x542>
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002fb0:	488e      	ldr	r0, [pc, #568]	; (80031ec <main+0x584>)
 8002fb2:	f004 fe4b 	bl	8007c4c <HAL_TIM_PWM_Init>
 8002fb6:	2800      	cmp	r0, #0
 8002fb8:	f040 80f9 	bne.w	80031ae <main+0x546>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	9307      	str	r3, [sp, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002fc0:	9308      	str	r3, [sp, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002fc2:	a907      	add	r1, sp, #28
 8002fc4:	4889      	ldr	r0, [pc, #548]	; (80031ec <main+0x584>)
 8002fc6:	f005 f88f 	bl	80080e8 <HAL_TIMEx_MasterConfigSynchronization>
 8002fca:	2800      	cmp	r0, #0
 8002fcc:	f040 80f1 	bne.w	80031b2 <main+0x54a>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002fd0:	2360      	movs	r3, #96	; 0x60
 8002fd2:	930d      	str	r3, [sp, #52]	; 0x34
  sConfigOC.Pulse = 1499;
 8002fd4:	f240 53db 	movw	r3, #1499	; 0x5db
 8002fd8:	930e      	str	r3, [sp, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002fda:	2200      	movs	r2, #0
 8002fdc:	920f      	str	r2, [sp, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002fde:	9211      	str	r2, [sp, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002fe0:	a90d      	add	r1, sp, #52	; 0x34
 8002fe2:	4882      	ldr	r0, [pc, #520]	; (80031ec <main+0x584>)
 8002fe4:	f004 fec7 	bl	8007d76 <HAL_TIM_PWM_ConfigChannel>
 8002fe8:	2800      	cmp	r0, #0
 8002fea:	f040 80e4 	bne.w	80031b6 <main+0x54e>
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002fee:	2204      	movs	r2, #4
 8002ff0:	a90d      	add	r1, sp, #52	; 0x34
 8002ff2:	487e      	ldr	r0, [pc, #504]	; (80031ec <main+0x584>)
 8002ff4:	f004 febf 	bl	8007d76 <HAL_TIM_PWM_ConfigChannel>
 8002ff8:	2800      	cmp	r0, #0
 8002ffa:	f040 80de 	bne.w	80031ba <main+0x552>
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002ffe:	2208      	movs	r2, #8
 8003000:	a90d      	add	r1, sp, #52	; 0x34
 8003002:	487a      	ldr	r0, [pc, #488]	; (80031ec <main+0x584>)
 8003004:	f004 feb7 	bl	8007d76 <HAL_TIM_PWM_ConfigChannel>
 8003008:	2800      	cmp	r0, #0
 800300a:	f040 80d8 	bne.w	80031be <main+0x556>
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800300e:	220c      	movs	r2, #12
 8003010:	a90d      	add	r1, sp, #52	; 0x34
 8003012:	4876      	ldr	r0, [pc, #472]	; (80031ec <main+0x584>)
 8003014:	f004 feaf 	bl	8007d76 <HAL_TIM_PWM_ConfigChannel>
 8003018:	2800      	cmp	r0, #0
 800301a:	f040 80d2 	bne.w	80031c2 <main+0x55a>
  HAL_TIM_MspPostInit(&htim3);
 800301e:	4873      	ldr	r0, [pc, #460]	; (80031ec <main+0x584>)
 8003020:	f001 f964 	bl	80042ec <HAL_TIM_MspPostInit>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003024:	2300      	movs	r3, #0
 8003026:	9309      	str	r3, [sp, #36]	; 0x24
 8003028:	930a      	str	r3, [sp, #40]	; 0x28
 800302a:	930b      	str	r3, [sp, #44]	; 0x2c
 800302c:	930c      	str	r3, [sp, #48]	; 0x30
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800302e:	9307      	str	r3, [sp, #28]
 8003030:	9308      	str	r3, [sp, #32]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003032:	930d      	str	r3, [sp, #52]	; 0x34
 8003034:	930e      	str	r3, [sp, #56]	; 0x38
 8003036:	930f      	str	r3, [sp, #60]	; 0x3c
 8003038:	9310      	str	r3, [sp, #64]	; 0x40
 800303a:	9311      	str	r3, [sp, #68]	; 0x44
 800303c:	9312      	str	r3, [sp, #72]	; 0x48
 800303e:	9313      	str	r3, [sp, #76]	; 0x4c
  htim4.Instance = TIM4;
 8003040:	486c      	ldr	r0, [pc, #432]	; (80031f4 <main+0x58c>)
 8003042:	4a6d      	ldr	r2, [pc, #436]	; (80031f8 <main+0x590>)
 8003044:	6002      	str	r2, [r0, #0]
  htim4.Init.Prescaler = 71;
 8003046:	2247      	movs	r2, #71	; 0x47
 8003048:	6042      	str	r2, [r0, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800304a:	6083      	str	r3, [r0, #8]
  htim4.Init.Period = 9999;
 800304c:	f242 720f 	movw	r2, #9999	; 0x270f
 8003050:	60c2      	str	r2, [r0, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003052:	6103      	str	r3, [r0, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003054:	2380      	movs	r3, #128	; 0x80
 8003056:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8003058:	f004 fda0 	bl	8007b9c <HAL_TIM_Base_Init>
 800305c:	2800      	cmp	r0, #0
 800305e:	f040 80b2 	bne.w	80031c6 <main+0x55e>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003062:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003066:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8003068:	a909      	add	r1, sp, #36	; 0x24
 800306a:	4862      	ldr	r0, [pc, #392]	; (80031f4 <main+0x58c>)
 800306c:	f004 fefe 	bl	8007e6c <HAL_TIM_ConfigClockSource>
 8003070:	2800      	cmp	r0, #0
 8003072:	f040 80aa 	bne.w	80031ca <main+0x562>
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8003076:	485f      	ldr	r0, [pc, #380]	; (80031f4 <main+0x58c>)
 8003078:	f004 fde8 	bl	8007c4c <HAL_TIM_PWM_Init>
 800307c:	2800      	cmp	r0, #0
 800307e:	f040 80a6 	bne.w	80031ce <main+0x566>
  if (HAL_TIM_OC_Init(&htim4) != HAL_OK)
 8003082:	485c      	ldr	r0, [pc, #368]	; (80031f4 <main+0x58c>)
 8003084:	f004 fdb6 	bl	8007bf4 <HAL_TIM_OC_Init>
 8003088:	2800      	cmp	r0, #0
 800308a:	f040 80a2 	bne.w	80031d2 <main+0x56a>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800308e:	2300      	movs	r3, #0
 8003090:	9307      	str	r3, [sp, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003092:	9308      	str	r3, [sp, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003094:	a907      	add	r1, sp, #28
 8003096:	4857      	ldr	r0, [pc, #348]	; (80031f4 <main+0x58c>)
 8003098:	f005 f826 	bl	80080e8 <HAL_TIMEx_MasterConfigSynchronization>
 800309c:	2800      	cmp	r0, #0
 800309e:	f040 809a 	bne.w	80031d6 <main+0x56e>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80030a2:	2360      	movs	r3, #96	; 0x60
 80030a4:	930d      	str	r3, [sp, #52]	; 0x34
  sConfigOC.Pulse = 1499;
 80030a6:	f240 53db 	movw	r3, #1499	; 0x5db
 80030aa:	930e      	str	r3, [sp, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80030ac:	2200      	movs	r2, #0
 80030ae:	920f      	str	r2, [sp, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80030b0:	9211      	str	r2, [sp, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80030b2:	a90d      	add	r1, sp, #52	; 0x34
 80030b4:	484f      	ldr	r0, [pc, #316]	; (80031f4 <main+0x58c>)
 80030b6:	f004 fe5e 	bl	8007d76 <HAL_TIM_PWM_ConfigChannel>
 80030ba:	2800      	cmp	r0, #0
 80030bc:	f040 808d 	bne.w	80031da <main+0x572>
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80030c0:	2204      	movs	r2, #4
 80030c2:	a90d      	add	r1, sp, #52	; 0x34
 80030c4:	484b      	ldr	r0, [pc, #300]	; (80031f4 <main+0x58c>)
 80030c6:	f004 fe56 	bl	8007d76 <HAL_TIM_PWM_ConfigChannel>
 80030ca:	2800      	cmp	r0, #0
 80030cc:	f040 8087 	bne.w	80031de <main+0x576>
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80030d0:	2208      	movs	r2, #8
 80030d2:	a90d      	add	r1, sp, #52	; 0x34
 80030d4:	4847      	ldr	r0, [pc, #284]	; (80031f4 <main+0x58c>)
 80030d6:	f004 fe4e 	bl	8007d76 <HAL_TIM_PWM_ConfigChannel>
 80030da:	2800      	cmp	r0, #0
 80030dc:	f040 8081 	bne.w	80031e2 <main+0x57a>
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80030e0:	2300      	movs	r3, #0
 80030e2:	930d      	str	r3, [sp, #52]	; 0x34
  sConfigOC.Pulse = 0;
 80030e4:	930e      	str	r3, [sp, #56]	; 0x38
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80030e6:	220c      	movs	r2, #12
 80030e8:	a90d      	add	r1, sp, #52	; 0x34
 80030ea:	4842      	ldr	r0, [pc, #264]	; (80031f4 <main+0x58c>)
 80030ec:	f004 fe14 	bl	8007d18 <HAL_TIM_OC_ConfigChannel>
 80030f0:	2800      	cmp	r0, #0
 80030f2:	d178      	bne.n	80031e6 <main+0x57e>
  HAL_TIM_MspPostInit(&htim4);
 80030f4:	4c3f      	ldr	r4, [pc, #252]	; (80031f4 <main+0x58c>)
 80030f6:	4620      	mov	r0, r4
 80030f8:	f001 f8f8 	bl	80042ec <HAL_TIM_MspPostInit>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80030fc:	4d3f      	ldr	r5, [pc, #252]	; (80031fc <main+0x594>)
 80030fe:	2100      	movs	r1, #0
 8003100:	4628      	mov	r0, r5
 8003102:	f004 ff77 	bl	8007ff4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8003106:	2104      	movs	r1, #4
 8003108:	4628      	mov	r0, r5
 800310a:	f004 ff73 	bl	8007ff4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 800310e:	2108      	movs	r1, #8
 8003110:	4628      	mov	r0, r5
 8003112:	f004 ff6f 	bl	8007ff4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8003116:	210c      	movs	r1, #12
 8003118:	4628      	mov	r0, r5
 800311a:	f004 ff6b 	bl	8007ff4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800311e:	4d33      	ldr	r5, [pc, #204]	; (80031ec <main+0x584>)
 8003120:	2100      	movs	r1, #0
 8003122:	4628      	mov	r0, r5
 8003124:	f004 ff66 	bl	8007ff4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8003128:	2104      	movs	r1, #4
 800312a:	4628      	mov	r0, r5
 800312c:	f004 ff62 	bl	8007ff4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8003130:	2108      	movs	r1, #8
 8003132:	4628      	mov	r0, r5
 8003134:	f004 ff5e 	bl	8007ff4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8003138:	210c      	movs	r1, #12
 800313a:	4628      	mov	r0, r5
 800313c:	f004 ff5a 	bl	8007ff4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8003140:	2100      	movs	r1, #0
 8003142:	4620      	mov	r0, r4
 8003144:	f004 ff56 	bl	8007ff4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8003148:	2104      	movs	r1, #4
 800314a:	4620      	mov	r0, r4
 800314c:	f004 ff52 	bl	8007ff4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8003150:	2108      	movs	r1, #8
 8003152:	4620      	mov	r0, r4
 8003154:	f004 ff4e 	bl	8007ff4 <HAL_TIM_PWM_Start>
  oppstartCAN(2, &hcan1);
 8003158:	4929      	ldr	r1, [pc, #164]	; (8003200 <main+0x598>)
 800315a:	2002      	movs	r0, #2
 800315c:	f7ff fcde 	bl	8002b1c <oppstartCAN>
  GPIO_setup();
 8003160:	f7ff fd6e 	bl	8002c40 <GPIO_setup>
  oppstartsverdier();
 8003164:	f001 fb34 	bl	80047d0 <oppstartsverdier>
		  if (active_step.SEQ_STATUS){
 8003168:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 800320c <main+0x5a4>
		  float nullpunkt2[2] = {10.0, ctrl_ref.z};
 800316c:	4f25      	ldr	r7, [pc, #148]	; (8003204 <main+0x59c>)
			  styrebidrag.hhf = 40.0;
 800316e:	ed9f 8a26 	vldr	s16, [pc, #152]	; 8003208 <main+0x5a0>
				step_machine(&active_step.heave, &ctrl_ref.z, active_step.old_ref.z);
 8003172:	f107 0b08 	add.w	fp, r7, #8
 8003176:	f109 0a08 	add.w	sl, r9, #8
      gpid.es = gpid.fbfs = gpid.uds = gpid.uis = 0; 	// nullstiller følgeverdier.
 800317a:	2500      	movs	r5, #0
 800317c:	e0ee      	b.n	800335c <main+0x6f4>
 800317e:	b672      	cpsid	i
  while (1)
 8003180:	e7fe      	b.n	8003180 <main+0x518>
 8003182:	b672      	cpsid	i
 8003184:	e7fe      	b.n	8003184 <main+0x51c>
 8003186:	b672      	cpsid	i
 8003188:	e7fe      	b.n	8003188 <main+0x520>
 800318a:	b672      	cpsid	i
 800318c:	e7fe      	b.n	800318c <main+0x524>
 800318e:	b672      	cpsid	i
 8003190:	e7fe      	b.n	8003190 <main+0x528>
 8003192:	b672      	cpsid	i
 8003194:	e7fe      	b.n	8003194 <main+0x52c>
 8003196:	b672      	cpsid	i
 8003198:	e7fe      	b.n	8003198 <main+0x530>
 800319a:	b672      	cpsid	i
 800319c:	e7fe      	b.n	800319c <main+0x534>
 800319e:	b672      	cpsid	i
 80031a0:	e7fe      	b.n	80031a0 <main+0x538>
 80031a2:	b672      	cpsid	i
 80031a4:	e7fe      	b.n	80031a4 <main+0x53c>
 80031a6:	b672      	cpsid	i
 80031a8:	e7fe      	b.n	80031a8 <main+0x540>
 80031aa:	b672      	cpsid	i
 80031ac:	e7fe      	b.n	80031ac <main+0x544>
 80031ae:	b672      	cpsid	i
 80031b0:	e7fe      	b.n	80031b0 <main+0x548>
 80031b2:	b672      	cpsid	i
 80031b4:	e7fe      	b.n	80031b4 <main+0x54c>
 80031b6:	b672      	cpsid	i
 80031b8:	e7fe      	b.n	80031b8 <main+0x550>
 80031ba:	b672      	cpsid	i
 80031bc:	e7fe      	b.n	80031bc <main+0x554>
 80031be:	b672      	cpsid	i
 80031c0:	e7fe      	b.n	80031c0 <main+0x558>
 80031c2:	b672      	cpsid	i
 80031c4:	e7fe      	b.n	80031c4 <main+0x55c>
 80031c6:	b672      	cpsid	i
 80031c8:	e7fe      	b.n	80031c8 <main+0x560>
 80031ca:	b672      	cpsid	i
 80031cc:	e7fe      	b.n	80031cc <main+0x564>
 80031ce:	b672      	cpsid	i
 80031d0:	e7fe      	b.n	80031d0 <main+0x568>
 80031d2:	b672      	cpsid	i
 80031d4:	e7fe      	b.n	80031d4 <main+0x56c>
 80031d6:	b672      	cpsid	i
 80031d8:	e7fe      	b.n	80031d8 <main+0x570>
 80031da:	b672      	cpsid	i
 80031dc:	e7fe      	b.n	80031dc <main+0x574>
 80031de:	b672      	cpsid	i
 80031e0:	e7fe      	b.n	80031e0 <main+0x578>
 80031e2:	b672      	cpsid	i
 80031e4:	e7fe      	b.n	80031e4 <main+0x57c>
 80031e6:	b672      	cpsid	i
 80031e8:	e7fe      	b.n	80031e8 <main+0x580>
 80031ea:	bf00      	nop
 80031ec:	20000470 	.word	0x20000470
 80031f0:	40000400 	.word	0x40000400
 80031f4:	200004b8 	.word	0x200004b8
 80031f8:	40000800 	.word	0x40000800
 80031fc:	20000428 	.word	0x20000428
 8003200:	200002c0 	.word	0x200002c0
 8003204:	20000220 	.word	0x20000220
 8003208:	42200000 	.word	0x42200000
 800320c:	200000f0 	.word	0x200000f0
				step_machine(&active_step.heave, &ctrl_ref.z, active_step.old_ref.z);
 8003210:	ed99 0a25 	vldr	s0, [r9, #148]	; 0x94
 8003214:	4659      	mov	r1, fp
 8003216:	4650      	mov	r0, sl
 8003218:	f7ff fb92 	bl	8002940 <step_machine>
				step_machine(&active_step.roll, &ctrl_ref.phi, active_step.old_ref.phi);
 800321c:	ed99 0a26 	vldr	s0, [r9, #152]	; 0x98
 8003220:	f107 010c 	add.w	r1, r7, #12
 8003224:	f109 002c 	add.w	r0, r9, #44	; 0x2c
 8003228:	f7ff fb8a 	bl	8002940 <step_machine>
				step_machine(&active_step.pitch, &ctrl_ref.theta, active_step.old_ref.theta);
 800322c:	ed99 0a27 	vldr	s0, [r9, #156]	; 0x9c
 8003230:	f107 0110 	add.w	r1, r7, #16
 8003234:	f109 0050 	add.w	r0, r9, #80	; 0x50
 8003238:	f7ff fb82 	bl	8002940 <step_machine>
				step_counter.incr_timer = 0;
 800323c:	4bb1      	ldr	r3, [pc, #708]	; (8003504 <main+0x89c>)
 800323e:	2200      	movs	r2, #0
 8003240:	605a      	str	r2, [r3, #4]
		  oppdater_styrebidrag();		// Behandler pilotinstruksjoner for navigasjon
 8003242:	f7fd fe27 	bl	8000e94 <oppdater_styrebidrag>
		  manipulator_styring();		// Behandler pilotinstruksjoner for manipulatoren
 8003246:	f7fe fc31 	bl	8001aac <manipulator_styring>
		  if (controller_status == 1){
 800324a:	4baf      	ldr	r3, [pc, #700]	; (8003508 <main+0x8a0>)
 800324c:	781b      	ldrb	r3, [r3, #0]
 800324e:	2b01      	cmp	r3, #1
 8003250:	f000 80a5 	beq.w	800339e <main+0x736>
		  else if (controller_status == 2){
 8003254:	2b02      	cmp	r3, #2
 8003256:	f000 80c0 	beq.w	80033da <main+0x772>
		  else if (controller_status == 3){
 800325a:	2b03      	cmp	r3, #3
 800325c:	f000 80c4 	beq.w	80033e8 <main+0x780>
		  else if (controller_status == 4){
 8003260:	2b04      	cmp	r3, #4
 8003262:	f000 80df 	beq.w	8003424 <main+0x7bc>
		  if (controller_status){
 8003266:	4ba8      	ldr	r3, [pc, #672]	; (8003508 <main+0x8a0>)
 8003268:	781b      	ldrb	r3, [r3, #0]
 800326a:	2b00      	cmp	r3, #0
 800326c:	f040 80ee 	bne.w	800344c <main+0x7e4>
		  if(test_thrustere){
 8003270:	4ba6      	ldr	r3, [pc, #664]	; (800350c <main+0x8a4>)
 8003272:	781b      	ldrb	r3, [r3, #0]
 8003274:	b143      	cbz	r3, 8003288 <main+0x620>
			  styrebidrag.hhf = 40.0;
 8003276:	4ba6      	ldr	r3, [pc, #664]	; (8003510 <main+0x8a8>)
 8003278:	ed83 8a00 	vstr	s16, [r3]
			  styrebidrag.hhb = 40.0;
 800327c:	ed83 8a01 	vstr	s16, [r3, #4]
			  styrebidrag.hvb = 40.0;
 8003280:	ed83 8a02 	vstr	s16, [r3, #8]
			  styrebidrag.hvf = 40.0;
 8003284:	ed83 8a03 	vstr	s16, [r3, #12]
		  behandle_paadrag();			// Pådragsprosessering
 8003288:	f7fe ff2e 	bl	80020e8 <behandle_paadrag>
		  memcpy(&csend, &thrusterdata, 8);	// Sender pådragsdata til toppsiden
 800328c:	4ca1      	ldr	r4, [pc, #644]	; (8003514 <main+0x8ac>)
 800328e:	4ba2      	ldr	r3, [pc, #648]	; (8003518 <main+0x8b0>)
 8003290:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003294:	e884 0003 	stmia.w	r4, {r0, r1}
		  sendDataCAN(170, &hcan1);
 8003298:	f8df 82cc 	ldr.w	r8, [pc, #716]	; 8003568 <main+0x900>
 800329c:	4641      	mov	r1, r8
 800329e:	20aa      	movs	r0, #170	; 0xaa
 80032a0:	f7ff fc6a 	bl	8002b78 <sendDataCAN>
		  csend[0] = flagg.spid;
 80032a4:	4e9d      	ldr	r6, [pc, #628]	; (800351c <main+0x8b4>)
 80032a6:	7973      	ldrb	r3, [r6, #5]
 80032a8:	7023      	strb	r3, [r4, #0]
		  csend[1] = flagg.rpid;
 80032aa:	79b3      	ldrb	r3, [r6, #6]
 80032ac:	7063      	strb	r3, [r4, #1]
		  csend[2] = flagg.hpid;
 80032ae:	79f3      	ldrb	r3, [r6, #7]
 80032b0:	70a3      	strb	r3, [r4, #2]
		  csend[3] = flagg.gpid;
 80032b2:	7a33      	ldrb	r3, [r6, #8]
 80032b4:	70e3      	strb	r3, [r4, #3]
		  csend[4] = flagg.stamp_pause;
 80032b6:	78f3      	ldrb	r3, [r6, #3]
 80032b8:	7123      	strb	r3, [r4, #4]
		  csend[5] = flagg.rull_pause;
 80032ba:	78b3      	ldrb	r3, [r6, #2]
 80032bc:	7163      	strb	r3, [r4, #5]
		  csend[6] = flagg.hiv_pause;
 80032be:	7873      	ldrb	r3, [r6, #1]
 80032c0:	71a3      	strb	r3, [r4, #6]
		  csend[7] = flagg.gir_pause;
 80032c2:	7933      	ldrb	r3, [r6, #4]
 80032c4:	71e3      	strb	r3, [r4, #7]
		  sendDataCAN(172, &hcan1);
 80032c6:	4641      	mov	r1, r8
 80032c8:	20ac      	movs	r0, #172	; 0xac
 80032ca:	f7ff fc55 	bl	8002b78 <sendDataCAN>
		  HAL_Delay(1);
 80032ce:	2001      	movs	r0, #1
 80032d0:	f002 f9e2 	bl	8005698 <HAL_Delay>
		  float nullpunkt[2] = {((float) controller_status), ((float) active_step.SEQ_STATUS)};
 80032d4:	f899 3000 	ldrb.w	r3, [r9]
 80032d8:	ee07 3a90 	vmov	s15, r3
 80032dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032e0:	4b89      	ldr	r3, [pc, #548]	; (8003508 <main+0x8a0>)
 80032e2:	781b      	ldrb	r3, [r3, #0]
 80032e4:	ee07 3a10 	vmov	s14, r3
 80032e8:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80032ec:	ed84 7a00 	vstr	s14, [r4]
		  memcpy(&csend, &nullpunkt, sizeof(nullpunkt));
 80032f0:	edc4 7a01 	vstr	s15, [r4, #4]
		  sendDataCAN(173, &hcan1);
 80032f4:	4641      	mov	r1, r8
 80032f6:	20ad      	movs	r0, #173	; 0xad
 80032f8:	f7ff fc3e 	bl	8002b78 <sendDataCAN>
		  HAL_Delay(1);
 80032fc:	2001      	movs	r0, #1
 80032fe:	f002 f9cb 	bl	8005698 <HAL_Delay>
		  float nullpunkt2[2] = {10.0, ctrl_ref.z};
 8003302:	68bb      	ldr	r3, [r7, #8]
		  memcpy(&csend, &nullpunkt2, sizeof(nullpunkt));
 8003304:	4a86      	ldr	r2, [pc, #536]	; (8003520 <main+0x8b8>)
 8003306:	6022      	str	r2, [r4, #0]
 8003308:	6063      	str	r3, [r4, #4]
		  sendDataCAN(173, &hcan1);
 800330a:	4641      	mov	r1, r8
 800330c:	20ad      	movs	r0, #173	; 0xad
 800330e:	f7ff fc33 	bl	8002b78 <sendDataCAN>
		  HAL_Delay(1);
 8003312:	2001      	movs	r0, #1
 8003314:	f002 f9c0 	bl	8005698 <HAL_Delay>
		  float nullpunkt3[2] = {20.0, ctrl_ref.phi};
 8003318:	68fb      	ldr	r3, [r7, #12]
		  memcpy(&csend, &nullpunkt3, sizeof(nullpunkt));
 800331a:	4a82      	ldr	r2, [pc, #520]	; (8003524 <main+0x8bc>)
 800331c:	6022      	str	r2, [r4, #0]
 800331e:	6063      	str	r3, [r4, #4]
		  sendDataCAN(173, &hcan1);
 8003320:	4641      	mov	r1, r8
 8003322:	20ad      	movs	r0, #173	; 0xad
 8003324:	f7ff fc28 	bl	8002b78 <sendDataCAN>
		  HAL_Delay(1);
 8003328:	2001      	movs	r0, #1
 800332a:	f002 f9b5 	bl	8005698 <HAL_Delay>
		  float nullpunkt4[2] = {30.0, ctrl_ref.theta};
 800332e:	693b      	ldr	r3, [r7, #16]
		  memcpy(&csend, &nullpunkt4, sizeof(nullpunkt));
 8003330:	4a7d      	ldr	r2, [pc, #500]	; (8003528 <main+0x8c0>)
 8003332:	6022      	str	r2, [r4, #0]
 8003334:	6063      	str	r3, [r4, #4]
		  sendDataCAN(173, &hcan1);
 8003336:	4641      	mov	r1, r8
 8003338:	20ad      	movs	r0, #173	; 0xad
 800333a:	f7ff fc1d 	bl	8002b78 <sendDataCAN>
		  flagg.can_70 = 0;				// Styring og regulering fullført
 800333e:	2300      	movs	r3, #0
 8003340:	72b3      	strb	r3, [r6, #10]
	  if(esc_reset){
 8003342:	4b7a      	ldr	r3, [pc, #488]	; (800352c <main+0x8c4>)
 8003344:	781b      	ldrb	r3, [r3, #0]
 8003346:	2b00      	cmp	r3, #0
 8003348:	f040 808b 	bne.w	8003462 <main+0x7fa>
	  if(brytertrykk){
 800334c:	4b78      	ldr	r3, [pc, #480]	; (8003530 <main+0x8c8>)
 800334e:	781b      	ldrb	r3, [r3, #0]
 8003350:	b113      	cbz	r3, 8003358 <main+0x6f0>
		  brytertrykk = 0;
 8003352:	4b77      	ldr	r3, [pc, #476]	; (8003530 <main+0x8c8>)
 8003354:	2200      	movs	r2, #0
 8003356:	701a      	strb	r2, [r3, #0]
    MX_USB_HOST_Process();
 8003358:	f006 fc44 	bl	8009be4 <MX_USB_HOST_Process>
	  if(flagg.can_70){					// Flagget signaliserer ny mottatt styremelding
 800335c:	4b6f      	ldr	r3, [pc, #444]	; (800351c <main+0x8b4>)
 800335e:	7a9b      	ldrb	r3, [r3, #10]
 8003360:	2b00      	cmp	r3, #0
 8003362:	d0ee      	beq.n	8003342 <main+0x6da>
		  if (active_step.SEQ_STATUS){
 8003364:	f899 3000 	ldrb.w	r3, [r9]
 8003368:	2b00      	cmp	r3, #0
 800336a:	f43f af6a 	beq.w	8003242 <main+0x5da>
			if (step_counter.seq_time > active_step.test_length){
 800336e:	4b65      	ldr	r3, [pc, #404]	; (8003504 <main+0x89c>)
 8003370:	681a      	ldr	r2, [r3, #0]
 8003372:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8003376:	429a      	cmp	r2, r3
 8003378:	f67f af4a 	bls.w	8003210 <main+0x5a8>
			memcpy(&ctrl_ref, &active_step.old_ref, sizeof(NED_eta));
 800337c:	463c      	mov	r4, r7
 800337e:	f109 068c 	add.w	r6, r9, #140	; 0x8c
 8003382:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8003384:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003386:	e896 0003 	ldmia.w	r6, {r0, r1}
 800338a:	e884 0003 	stmia.w	r4, {r0, r1}
			active_step.SEQ_STATUS = 0;
 800338e:	2300      	movs	r3, #0
 8003390:	f889 3000 	strb.w	r3, [r9]
			memset(&step_counter, 0, sizeof(step_timers));
 8003394:	4a5b      	ldr	r2, [pc, #364]	; (8003504 <main+0x89c>)
 8003396:	6013      	str	r3, [r2, #0]
 8003398:	6053      	str	r3, [r2, #4]
 800339a:	6093      	str	r3, [r2, #8]
 800339c:	e751      	b.n	8003242 <main+0x5da>
			  thrust_NED.z = pid(&pid_heave, model_states.z, ctrl_ref.z);
 800339e:	4e65      	ldr	r6, [pc, #404]	; (8003534 <main+0x8cc>)
 80033a0:	edd7 0a02 	vldr	s1, [r7, #8]
 80033a4:	ed96 0a02 	vldr	s0, [r6, #8]
 80033a8:	4863      	ldr	r0, [pc, #396]	; (8003538 <main+0x8d0>)
 80033aa:	f000 fcc3 	bl	8003d34 <pid>
 80033ae:	4c63      	ldr	r4, [pc, #396]	; (800353c <main+0x8d4>)
 80033b0:	ed84 0a02 	vstr	s0, [r4, #8]
			  thrust_NED.phi = pid(&pid_roll, model_states.phi, ctrl_ref.phi);
 80033b4:	edd7 0a03 	vldr	s1, [r7, #12]
 80033b8:	ed96 0a03 	vldr	s0, [r6, #12]
 80033bc:	4860      	ldr	r0, [pc, #384]	; (8003540 <main+0x8d8>)
 80033be:	f000 fcb9 	bl	8003d34 <pid>
 80033c2:	ed84 0a03 	vstr	s0, [r4, #12]
			  thrust_NED.theta = pid(&pid_pitch, model_states.theta, ctrl_ref.theta);
 80033c6:	edd7 0a04 	vldr	s1, [r7, #16]
 80033ca:	ed96 0a04 	vldr	s0, [r6, #16]
 80033ce:	485d      	ldr	r0, [pc, #372]	; (8003544 <main+0x8dc>)
 80033d0:	f000 fcb0 	bl	8003d34 <pid>
 80033d4:	ed84 0a04 	vstr	s0, [r4, #16]
 80033d8:	e745      	b.n	8003266 <main+0x5fe>
			  lqr(&lqr_reg, &model_states, &ctrl_ref, &thrust_NED);
 80033da:	4b58      	ldr	r3, [pc, #352]	; (800353c <main+0x8d4>)
 80033dc:	463a      	mov	r2, r7
 80033de:	4955      	ldr	r1, [pc, #340]	; (8003534 <main+0x8cc>)
 80033e0:	4859      	ldr	r0, [pc, #356]	; (8003548 <main+0x8e0>)
 80033e2:	f000 fda9 	bl	8003f38 <lqr>
 80033e6:	e73e      	b.n	8003266 <main+0x5fe>
			  thrust_NED.z = smc(&smc_heave, model_states.z, ctrl_ref.z);
 80033e8:	4e52      	ldr	r6, [pc, #328]	; (8003534 <main+0x8cc>)
 80033ea:	edd7 0a02 	vldr	s1, [r7, #8]
 80033ee:	ed96 0a02 	vldr	s0, [r6, #8]
 80033f2:	4856      	ldr	r0, [pc, #344]	; (800354c <main+0x8e4>)
 80033f4:	f000 fcea 	bl	8003dcc <smc>
 80033f8:	4c50      	ldr	r4, [pc, #320]	; (800353c <main+0x8d4>)
 80033fa:	ed84 0a02 	vstr	s0, [r4, #8]
			  thrust_NED.phi = smc(&smc_roll, model_states.phi, ctrl_ref.phi);
 80033fe:	edd7 0a03 	vldr	s1, [r7, #12]
 8003402:	ed96 0a03 	vldr	s0, [r6, #12]
 8003406:	4852      	ldr	r0, [pc, #328]	; (8003550 <main+0x8e8>)
 8003408:	f000 fce0 	bl	8003dcc <smc>
 800340c:	ed84 0a03 	vstr	s0, [r4, #12]
			  thrust_NED.theta = smc(&smc_pitch, model_states.theta, ctrl_ref.theta);
 8003410:	edd7 0a04 	vldr	s1, [r7, #16]
 8003414:	ed96 0a04 	vldr	s0, [r6, #16]
 8003418:	484e      	ldr	r0, [pc, #312]	; (8003554 <main+0x8ec>)
 800341a:	f000 fcd7 	bl	8003dcc <smc>
 800341e:	ed84 0a04 	vstr	s0, [r4, #16]
 8003422:	e720      	b.n	8003266 <main+0x5fe>
			if(flagg.spid){  stamp_regulator(); }	// PID regulering av stampvinkelen
 8003424:	4b3d      	ldr	r3, [pc, #244]	; (800351c <main+0x8b4>)
 8003426:	795b      	ldrb	r3, [r3, #5]
 8003428:	b953      	cbnz	r3, 8003440 <main+0x7d8>
			if(flagg.rpid){  rull_regulator();  }	// PID regulering av rullvinkelen
 800342a:	4b3c      	ldr	r3, [pc, #240]	; (800351c <main+0x8b4>)
 800342c:	799b      	ldrb	r3, [r3, #6]
 800342e:	b953      	cbnz	r3, 8003446 <main+0x7de>
			if(flagg.hpid){  hiv_regulator();   }	// PID regulering av hivposisjon
 8003430:	4b3a      	ldr	r3, [pc, #232]	; (800351c <main+0x8b4>)
 8003432:	79db      	ldrb	r3, [r3, #7]
 8003434:	2b00      	cmp	r3, #0
 8003436:	f43f af16 	beq.w	8003266 <main+0x5fe>
 800343a:	f000 fbe7 	bl	8003c0c <hiv_regulator>
 800343e:	e712      	b.n	8003266 <main+0x5fe>
			if(flagg.spid){  stamp_regulator(); }	// PID regulering av stampvinkelen
 8003440:	f000 fab0 	bl	80039a4 <stamp_regulator>
 8003444:	e7f1      	b.n	800342a <main+0x7c2>
			if(flagg.rpid){  rull_regulator();  }	// PID regulering av rullvinkelen
 8003446:	f000 fb47 	bl	8003ad8 <rull_regulator>
 800344a:	e7f1      	b.n	8003430 <main+0x7c8>
			  NED2BFF(&thrust_NED, &thrust_BFF, &model_states);
 800344c:	4c42      	ldr	r4, [pc, #264]	; (8003558 <main+0x8f0>)
 800344e:	4a39      	ldr	r2, [pc, #228]	; (8003534 <main+0x8cc>)
 8003450:	4621      	mov	r1, r4
 8003452:	483a      	ldr	r0, [pc, #232]	; (800353c <main+0x8d4>)
 8003454:	f7fe ff7e 	bl	8002354 <NED2BFF>
			  BFF2ThrustPercent(&thrust_BFF, &ctrl_contribution);
 8003458:	4940      	ldr	r1, [pc, #256]	; (800355c <main+0x8f4>)
 800345a:	4620      	mov	r0, r4
 800345c:	f7ff f87c 	bl	8002558 <BFF2ThrustPercent>
 8003460:	e706      	b.n	8003270 <main+0x608>
		  memcpy(&thruster_PWM, &oppstart_PWM, sizeof(thruster_sett));
 8003462:	4c3f      	ldr	r4, [pc, #252]	; (8003560 <main+0x8f8>)
 8003464:	4b3f      	ldr	r3, [pc, #252]	; (8003564 <main+0x8fc>)
 8003466:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003468:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		  skriv_thruster_PWM();
 800346c:	f7fe fa8a 	bl	8001984 <skriv_thruster_PWM>
		  HAL_Delay(100);
 8003470:	2064      	movs	r0, #100	; 0x64
 8003472:	f002 f911 	bl	8005698 <HAL_Delay>
		  csend[0] = 0b00111100;
 8003476:	4b27      	ldr	r3, [pc, #156]	; (8003514 <main+0x8ac>)
 8003478:	223c      	movs	r2, #60	; 0x3c
 800347a:	701a      	strb	r2, [r3, #0]
		  sendDataCAN(139, &hcan1);
 800347c:	493a      	ldr	r1, [pc, #232]	; (8003568 <main+0x900>)
 800347e:	208b      	movs	r0, #139	; 0x8b
 8003480:	f7ff fb7a 	bl	8002b78 <sendDataCAN>
		  HAL_Delay(2000);
 8003484:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8003488:	f002 f906 	bl	8005698 <HAL_Delay>
		  esc_reset = 0;
 800348c:	2300      	movs	r3, #0
 800348e:	4a27      	ldr	r2, [pc, #156]	; (800352c <main+0x8c4>)
 8003490:	7013      	strb	r3, [r2, #0]
      gpid.yr = gir_m;								// Girreferansen oppdateres
 8003492:	4a36      	ldr	r2, [pc, #216]	; (800356c <main+0x904>)
 8003494:	6811      	ldr	r1, [r2, #0]
 8003496:	4a36      	ldr	r2, [pc, #216]	; (8003570 <main+0x908>)
 8003498:	6011      	str	r1, [r2, #0]
      gpid.es = gpid.fbfs = gpid.uds = gpid.uis = 0; 	// nullstiller følgeverdier.
 800349a:	6155      	str	r5, [r2, #20]
 800349c:	61d5      	str	r5, [r2, #28]
 800349e:	6255      	str	r5, [r2, #36]	; 0x24
 80034a0:	6095      	str	r5, [r2, #8]
      spid.es = spid.fbfs = spid.uds = spid.uis = 0; 	// nullstiller følgeverdier.
 80034a2:	4a34      	ldr	r2, [pc, #208]	; (8003574 <main+0x90c>)
 80034a4:	6155      	str	r5, [r2, #20]
 80034a6:	61d5      	str	r5, [r2, #28]
 80034a8:	6255      	str	r5, [r2, #36]	; 0x24
 80034aa:	6095      	str	r5, [r2, #8]
      rpid.es = rpid.fbfs = rpid.uds = rpid.uis = 0; 	// nullstiller følgeverdier.
 80034ac:	4a32      	ldr	r2, [pc, #200]	; (8003578 <main+0x910>)
 80034ae:	6155      	str	r5, [r2, #20]
 80034b0:	61d5      	str	r5, [r2, #28]
 80034b2:	6255      	str	r5, [r2, #36]	; 0x24
 80034b4:	6095      	str	r5, [r2, #8]
      hpid.yr = hiv_m;								// Dybdereferansen oppdateres
 80034b6:	4a31      	ldr	r2, [pc, #196]	; (800357c <main+0x914>)
 80034b8:	6811      	ldr	r1, [r2, #0]
 80034ba:	4a31      	ldr	r2, [pc, #196]	; (8003580 <main+0x918>)
 80034bc:	6011      	str	r1, [r2, #0]
      hpid.es = hpid.fbfs = hpid.uds = hpid.uis = 0; 	// nullstiller følgeverdier.
 80034be:	6155      	str	r5, [r2, #20]
 80034c0:	61d5      	str	r5, [r2, #28]
 80034c2:	6255      	str	r5, [r2, #36]	; 0x24
 80034c4:	6095      	str	r5, [r2, #8]
      memset(&ctrl_ref, 0, sizeof(NED_eta));
 80034c6:	603b      	str	r3, [r7, #0]
 80034c8:	607b      	str	r3, [r7, #4]
 80034ca:	60fb      	str	r3, [r7, #12]
 80034cc:	613b      	str	r3, [r7, #16]
 80034ce:	617b      	str	r3, [r7, #20]
      ctrl_ref.z = model_states.z;
 80034d0:	4b18      	ldr	r3, [pc, #96]	; (8003534 <main+0x8cc>)
 80034d2:	689b      	ldr	r3, [r3, #8]
 80034d4:	60bb      	str	r3, [r7, #8]
      reset_pid_values(&pid_heave); reset_pid_values(&pid_roll); reset_pid_values(&pid_pitch);
 80034d6:	4818      	ldr	r0, [pc, #96]	; (8003538 <main+0x8d0>)
 80034d8:	f001 fc88 	bl	8004dec <reset_pid_values>
 80034dc:	4818      	ldr	r0, [pc, #96]	; (8003540 <main+0x8d8>)
 80034de:	f001 fc85 	bl	8004dec <reset_pid_values>
 80034e2:	4818      	ldr	r0, [pc, #96]	; (8003544 <main+0x8dc>)
 80034e4:	f001 fc82 	bl	8004dec <reset_pid_values>
      reset_lqr_values(&lqr_reg);
 80034e8:	4817      	ldr	r0, [pc, #92]	; (8003548 <main+0x8e0>)
 80034ea:	f001 fc84 	bl	8004df6 <reset_lqr_values>
      reset_smc_values(&smc_heave); reset_smc_values(&smc_roll); reset_smc_values(&smc_pitch);
 80034ee:	4817      	ldr	r0, [pc, #92]	; (800354c <main+0x8e4>)
 80034f0:	f001 fc89 	bl	8004e06 <reset_smc_values>
 80034f4:	4816      	ldr	r0, [pc, #88]	; (8003550 <main+0x8e8>)
 80034f6:	f001 fc86 	bl	8004e06 <reset_smc_values>
 80034fa:	4816      	ldr	r0, [pc, #88]	; (8003554 <main+0x8ec>)
 80034fc:	f001 fc83 	bl	8004e06 <reset_smc_values>
 8003500:	e724      	b.n	800334c <main+0x6e4>
 8003502:	bf00      	nop
 8003504:	20000c54 	.word	0x20000c54
 8003508:	200001fc 	.word	0x200001fc
 800350c:	20000ce4 	.word	0x20000ce4
 8003510:	20000c60 	.word	0x20000c60
 8003514:	20000000 	.word	0x20000000
 8003518:	20000d2c 	.word	0x20000d2c
 800351c:	20000244 	.word	0x20000244
 8003520:	41200000 	.word	0x41200000
 8003524:	41a00000 	.word	0x41a00000
 8003528:	41f00000 	.word	0x41f00000
 800352c:	20000240 	.word	0x20000240
 8003530:	200001c4 	.word	0x200001c4
 8003534:	2000054c 	.word	0x2000054c
 8003538:	200007c0 	.word	0x200007c0
 800353c:	20000d00 	.word	0x20000d00
 8003540:	20000820 	.word	0x20000820
 8003544:	200007f0 	.word	0x200007f0
 8003548:	20000504 	.word	0x20000504
 800354c:	20000b70 	.word	0x20000b70
 8003550:	20000bd0 	.word	0x20000bd0
 8003554:	20000ba0 	.word	0x20000ba0
 8003558:	20000ce8 	.word	0x20000ce8
 800355c:	20000200 	.word	0x20000200
 8003560:	20000d1c 	.word	0x20000d1c
 8003564:	20000008 	.word	0x20000008
 8003568:	200002c0 	.word	0x200002c0
 800356c:	20000264 	.word	0x20000264
 8003570:	2000028c 	.word	0x2000028c
 8003574:	20000c00 	.word	0x20000c00
 8003578:	2000099c 	.word	0x2000099c
 800357c:	200003d8 	.word	0x200003d8
 8003580:	200003fc 	.word	0x200003fc
 8003584:	00000000 	.word	0x00000000

08003588 <HAL_CAN_RxFifo0MsgPendingCallback>:
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan11) {
 8003588:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    HAL_CAN_GetRxMessage(hcan11, CAN_RX_FIFO0, &rxHeader, canRX); //Receive CAN bus message to canRX buffer
 800358a:	4cc5      	ldr	r4, [pc, #788]	; (80038a0 <HAL_CAN_RxFifo0MsgPendingCallback+0x318>)
 800358c:	4bc5      	ldr	r3, [pc, #788]	; (80038a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x31c>)
 800358e:	4622      	mov	r2, r4
 8003590:	2100      	movs	r1, #0
 8003592:	f002 fa6f 	bl	8005a74 <HAL_CAN_GetRxMessage>
    switch (rxHeader.StdId) {
 8003596:	6823      	ldr	r3, [r4, #0]
 8003598:	3b45      	subs	r3, #69	; 0x45
 800359a:	2b1a      	cmp	r3, #26
 800359c:	d825      	bhi.n	80035ea <HAL_CAN_RxFifo0MsgPendingCallback+0x62>
 800359e:	e8df f013 	tbh	[pc, r3, lsl #1]
 80035a2:	001b      	.short	0x001b
 80035a4:	00320025 	.word	0x00320025
 80035a8:	00240024 	.word	0x00240024
 80035ac:	00240024 	.word	0x00240024
 80035b0:	00240024 	.word	0x00240024
 80035b4:	00240024 	.word	0x00240024
 80035b8:	00f6003d 	.word	0x00f6003d
 80035bc:	00240137 	.word	0x00240137
 80035c0:	013e0024 	.word	0x013e0024
 80035c4:	00240024 	.word	0x00240024
 80035c8:	00240024 	.word	0x00240024
 80035cc:	00240149 	.word	0x00240149
 80035d0:	00240024 	.word	0x00240024
 80035d4:	01af0024 	.word	0x01af0024
    	memcpy(&autonomstyring, &canRX, sizeof(styrestruct));
 80035d8:	4bb3      	ldr	r3, [pc, #716]	; (80038a8 <HAL_CAN_RxFifo0MsgPendingCallback+0x320>)
 80035da:	4ab2      	ldr	r2, [pc, #712]	; (80038a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x31c>)
 80035dc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80035e0:	e883 0003 	stmia.w	r3, {r0, r1}
    	flagg.can_69 = 1;
 80035e4:	4bb1      	ldr	r3, [pc, #708]	; (80038ac <HAL_CAN_RxFifo0MsgPendingCallback+0x324>)
 80035e6:	2201      	movs	r2, #1
 80035e8:	725a      	strb	r2, [r3, #9]
}
 80035ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    	memcpy(&styremelding, &canRX, sizeof(styrestruct));
 80035ec:	4bb0      	ldr	r3, [pc, #704]	; (80038b0 <HAL_CAN_RxFifo0MsgPendingCallback+0x328>)
 80035ee:	4aad      	ldr	r2, [pc, #692]	; (80038a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x31c>)
 80035f0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80035f4:	e883 0003 	stmia.w	r3, {r0, r1}
    	flagg.can_70 = 1;
 80035f8:	4bac      	ldr	r3, [pc, #688]	; (80038ac <HAL_CAN_RxFifo0MsgPendingCallback+0x324>)
 80035fa:	2201      	movs	r2, #1
 80035fc:	729a      	strb	r2, [r3, #10]
    	teller_idle = 0;
 80035fe:	4bad      	ldr	r3, [pc, #692]	; (80038b4 <HAL_CAN_RxFifo0MsgPendingCallback+0x32c>)
 8003600:	2200      	movs	r2, #0
 8003602:	801a      	strh	r2, [r3, #0]
        break;
 8003604:	e7f1      	b.n	80035ea <HAL_CAN_RxFifo0MsgPendingCallback+0x62>
		memcpy(&ny_param, &canRX, sizeof(can_param));
 8003606:	4bac      	ldr	r3, [pc, #688]	; (80038b8 <HAL_CAN_RxFifo0MsgPendingCallback+0x330>)
 8003608:	4aa6      	ldr	r2, [pc, #664]	; (80038a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x31c>)
 800360a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800360e:	e883 0003 	stmia.w	r3, {r0, r1}
		oppdater_parameter(ny_param.param_id, ny_param.parameter);
 8003612:	ed93 0a01 	vldr	s0, [r3, #4]
 8003616:	f001 fbfd 	bl	8004e14 <oppdater_parameter>
		break;
 800361a:	e7e6      	b.n	80035ea <HAL_CAN_RxFifo0MsgPendingCallback+0x62>
    	memcpy(&gyrodata, &canRX, sizeof(gyrostruct));
 800361c:	4ca7      	ldr	r4, [pc, #668]	; (80038bc <HAL_CAN_RxFifo0MsgPendingCallback+0x334>)
 800361e:	4ba1      	ldr	r3, [pc, #644]	; (80038a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x31c>)
 8003620:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003624:	e884 0003 	stmia.w	r4, {r0, r1}
    	sensordata.phi_old = sensordata.phi;
 8003628:	4ba5      	ldr	r3, [pc, #660]	; (80038c0 <HAL_CAN_RxFifo0MsgPendingCallback+0x338>)
 800362a:	f9b3 e008 	ldrsh.w	lr, [r3, #8]
 800362e:	f8a3 e016 	strh.w	lr, [r3, #22]
    	sensordata.theta_old = sensordata.theta;
 8003632:	f9b3 600a 	ldrsh.w	r6, [r3, #10]
 8003636:	831e      	strh	r6, [r3, #24]
    	sensordata.psi_old = sensordata.psi;
 8003638:	f9b3 500c 	ldrsh.w	r5, [r3, #12]
 800363c:	835d      	strh	r5, [r3, #26]
    	sensordata.z_old = sensordata.z;
 800363e:	f9b3 7006 	ldrsh.w	r7, [r3, #6]
 8003642:	829f      	strh	r7, [r3, #20]
    	sensordata.phi = -gyrodata.rull;
 8003644:	f9b4 c002 	ldrsh.w	ip, [r4, #2]
 8003648:	f1cc 0200 	rsb	r2, ip, #0
 800364c:	b212      	sxth	r2, r2
 800364e:	811a      	strh	r2, [r3, #8]
    	sensordata.theta = gyrodata.stamp;
 8003650:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8003654:	8158      	strh	r0, [r3, #10]
    	sensordata.psi = gyrodata.gir;
 8003656:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 800365a:	8199      	strh	r1, [r3, #12]
    	sensordata.z = gyrodata.hiv;
 800365c:	f9b4 4000 	ldrsh.w	r4, [r4]
 8003660:	80dc      	strh	r4, [r3, #6]
    	model_states.z = (float) sensordata.z 											/100;
 8003662:	ee07 4a90 	vmov	s15, r4
 8003666:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800366a:	eddf 3a96 	vldr	s7, [pc, #600]	; 80038c4 <HAL_CAN_RxFifo0MsgPendingCallback+0x33c>
 800366e:	ee87 4aa3 	vdiv.f32	s8, s15, s7
 8003672:	4b95      	ldr	r3, [pc, #596]	; (80038c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x340>)
 8003674:	ed83 4a02 	vstr	s8, [r3, #8]
    	model_states.phi =(float) sensordata.phi 						*D2R 			/10;
 8003678:	ee07 2a90 	vmov	s15, r2
 800367c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003680:	ed9f 6a92 	vldr	s12, [pc, #584]	; 80038cc <HAL_CAN_RxFifo0MsgPendingCallback+0x344>
 8003684:	ee67 7a86 	vmul.f32	s15, s15, s12
 8003688:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800368c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8003690:	edc3 6a03 	vstr	s13, [r3, #12]
    	model_states.theta = (float) sensordata.theta 					*D2R 			/10;
 8003694:	ee07 0a90 	vmov	s15, r0
 8003698:	eef8 4ae7 	vcvt.f32.s32	s9, s15
 800369c:	ee64 6a86 	vmul.f32	s13, s9, s12
 80036a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80036a4:	edc3 7a04 	vstr	s15, [r3, #16]
    	model_states.psi = (float) sensordata.psi 						*D2R 			/10;
 80036a8:	ee07 1a90 	vmov	s15, r1
 80036ac:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 80036b0:	ee65 6a06 	vmul.f32	s13, s10, s12
 80036b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80036b8:	edc3 7a05 	vstr	s15, [r3, #20]
    	model_states.w = (float) (sensordata.z-sensordata.z_old)				/TSTEP 	/100;
 80036bc:	1be4      	subs	r4, r4, r7
 80036be:	ee07 4a90 	vmov	s15, r4
 80036c2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80036c6:	eddf 5a82 	vldr	s11, [pc, #520]	; 80038d0 <HAL_CAN_RxFifo0MsgPendingCallback+0x348>
 80036ca:	ee86 3aa5 	vdiv.f32	s6, s13, s11
 80036ce:	eec3 7a23 	vdiv.f32	s15, s6, s7
 80036d2:	edc3 7a08 	vstr	s15, [r3, #32]
    	model_states.p = (float) (sensordata.phi-sensordata.phi_old)	*D2R	/TSTEP 	/10;
 80036d6:	eba2 020e 	sub.w	r2, r2, lr
 80036da:	ee07 2a90 	vmov	s15, r2
 80036de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80036e2:	ee67 7a86 	vmul.f32	s15, s15, s12
 80036e6:	eec7 6aa5 	vdiv.f32	s13, s15, s11
 80036ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80036ee:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
    	model_states.q = (float) (sensordata.theta-sensordata.theta_old)*D2R	/TSTEP 	/10;
 80036f2:	1b82      	subs	r2, r0, r6
 80036f4:	ee06 2a90 	vmov	s13, r2
 80036f8:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80036fc:	ee66 6a86 	vmul.f32	s13, s13, s12
 8003700:	eec6 3aa5 	vdiv.f32	s7, s13, s11
 8003704:	eec3 7a87 	vdiv.f32	s15, s7, s14
 8003708:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
    	model_states.r = (float) (sensordata.psi-sensordata.psi_old) 	*D2R	/TSTEP 	/10;
 800370c:	1b4a      	subs	r2, r1, r5
 800370e:	ee07 2a90 	vmov	s15, r2
 8003712:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003716:	ee67 7a86 	vmul.f32	s15, s15, s12
 800371a:	eec7 6aa5 	vdiv.f32	s13, s15, s11
 800371e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003722:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
    	hiv_m =   (float) gyrodata.hiv / 100;
 8003726:	4b6b      	ldr	r3, [pc, #428]	; (80038d4 <HAL_CAN_RxFifo0MsgPendingCallback+0x34c>)
 8003728:	ed83 4a00 	vstr	s8, [r3]
    	rull_m =  (float) gyrodata.rull / 10;
 800372c:	ee07 ca90 	vmov	s15, ip
 8003730:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003734:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8003738:	4b67      	ldr	r3, [pc, #412]	; (80038d8 <HAL_CAN_RxFifo0MsgPendingCallback+0x350>)
 800373a:	edc3 6a00 	vstr	s13, [r3]
    	stamp_m = (float) gyrodata.stamp / 10;
 800373e:	eec4 7a87 	vdiv.f32	s15, s9, s14
 8003742:	4b66      	ldr	r3, [pc, #408]	; (80038dc <HAL_CAN_RxFifo0MsgPendingCallback+0x354>)
 8003744:	edc3 7a00 	vstr	s15, [r3]
    	gir_m =   (float) gyrodata.gir / 10;
 8003748:	eec5 7a07 	vdiv.f32	s15, s10, s14
 800374c:	4b64      	ldr	r3, [pc, #400]	; (80038e0 <HAL_CAN_RxFifo0MsgPendingCallback+0x358>)
 800374e:	edc3 7a00 	vstr	s15, [r3]
    	gir_mf = gir_mf *0.95 + 0.05*gir_m;
 8003752:	4e64      	ldr	r6, [pc, #400]	; (80038e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x35c>)
 8003754:	6830      	ldr	r0, [r6, #0]
 8003756:	681f      	ldr	r7, [r3, #0]
 8003758:	f7fc fe9a 	bl	8000490 <__aeabi_f2d>
 800375c:	a348      	add	r3, pc, #288	; (adr r3, 8003880 <HAL_CAN_RxFifo0MsgPendingCallback+0x2f8>)
 800375e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003762:	f7fc feed 	bl	8000540 <__aeabi_dmul>
 8003766:	4604      	mov	r4, r0
 8003768:	460d      	mov	r5, r1
 800376a:	4638      	mov	r0, r7
 800376c:	f7fc fe90 	bl	8000490 <__aeabi_f2d>
 8003770:	a345      	add	r3, pc, #276	; (adr r3, 8003888 <HAL_CAN_RxFifo0MsgPendingCallback+0x300>)
 8003772:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003776:	f7fc fee3 	bl	8000540 <__aeabi_dmul>
 800377a:	4602      	mov	r2, r0
 800377c:	460b      	mov	r3, r1
 800377e:	4620      	mov	r0, r4
 8003780:	4629      	mov	r1, r5
 8003782:	f7fc fd27 	bl	80001d4 <__adddf3>
 8003786:	f7fd f9b3 	bl	8000af0 <__aeabi_d2f>
 800378a:	6030      	str	r0, [r6, #0]
        break;
 800378c:	e72d      	b.n	80035ea <HAL_CAN_RxFifo0MsgPendingCallback+0x62>
    	memcpy(&aksdata, &canRX, sizeof(imustruct));
 800378e:	4c56      	ldr	r4, [pc, #344]	; (80038e8 <HAL_CAN_RxFifo0MsgPendingCallback+0x360>)
 8003790:	4b44      	ldr	r3, [pc, #272]	; (80038a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x31c>)
 8003792:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003796:	e884 0003 	stmia.w	r4, {r0, r1}
    	sensordata.u_dot = aksdata.x;
 800379a:	f9b4 3000 	ldrsh.w	r3, [r4]
 800379e:	4948      	ldr	r1, [pc, #288]	; (80038c0 <HAL_CAN_RxFifo0MsgPendingCallback+0x338>)
 80037a0:	800b      	strh	r3, [r1, #0]
    	sensordata.v_dot = aksdata.y;
 80037a2:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 80037a6:	804a      	strh	r2, [r1, #2]
    	sensordata.w_dot = aksdata.z;
 80037a8:	88a0      	ldrh	r0, [r4, #4]
 80037aa:	8088      	strh	r0, [r1, #4]
    	model_states.u = (float) model_states.u + sensordata.u_dot*TSTEP /100;
 80037ac:	ee07 3a90 	vmov	s15, r3
 80037b0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80037b4:	ed9f 6a46 	vldr	s12, [pc, #280]	; 80038d0 <HAL_CAN_RxFifo0MsgPendingCallback+0x348>
 80037b8:	ee66 6a86 	vmul.f32	s13, s13, s12
 80037bc:	eddf 5a41 	vldr	s11, [pc, #260]	; 80038c4 <HAL_CAN_RxFifo0MsgPendingCallback+0x33c>
 80037c0:	ee86 7aa5 	vdiv.f32	s14, s13, s11
 80037c4:	4b40      	ldr	r3, [pc, #256]	; (80038c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x340>)
 80037c6:	edd3 7a06 	vldr	s15, [r3, #24]
 80037ca:	ee37 7a27 	vadd.f32	s14, s14, s15
 80037ce:	ed83 7a06 	vstr	s14, [r3, #24]
    	model_states.v = (float) model_states.v + sensordata.v_dot*TSTEP /100;
 80037d2:	ee07 2a90 	vmov	s15, r2
 80037d6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80037da:	ee66 6a86 	vmul.f32	s13, s13, s12
 80037de:	eec6 7aa5 	vdiv.f32	s15, s13, s11
 80037e2:	edd3 6a07 	vldr	s13, [r3, #28]
 80037e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80037ea:	edc3 7a07 	vstr	s15, [r3, #28]
    	model_states.x = (float) model_states.x + model_states.u*TSTEP;
 80037ee:	ee27 7a06 	vmul.f32	s14, s14, s12
 80037f2:	edd3 6a00 	vldr	s13, [r3]
 80037f6:	ee36 7a87 	vadd.f32	s14, s13, s14
 80037fa:	ed83 7a00 	vstr	s14, [r3]
    	model_states.y = (float) model_states.y + model_states.v*TSTEP;
 80037fe:	ee67 7a86 	vmul.f32	s15, s15, s12
 8003802:	ed93 7a01 	vldr	s14, [r3, #4]
 8003806:	ee77 7a27 	vadd.f32	s15, s14, s15
 800380a:	edc3 7a01 	vstr	s15, [r3, #4]
        break;
 800380e:	e6ec      	b.n	80035ea <HAL_CAN_RxFifo0MsgPendingCallback+0x62>
    	memcpy(&magnodata, &canRX, sizeof(imustruct));
 8003810:	4b36      	ldr	r3, [pc, #216]	; (80038ec <HAL_CAN_RxFifo0MsgPendingCallback+0x364>)
 8003812:	4a24      	ldr	r2, [pc, #144]	; (80038a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x31c>)
 8003814:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003818:	e883 0003 	stmia.w	r3, {r0, r1}
        break;
 800381c:	e6e5      	b.n	80035ea <HAL_CAN_RxFifo0MsgPendingCallback+0x62>
    	memcpy(&csend, &canRX, 8);
 800381e:	4b34      	ldr	r3, [pc, #208]	; (80038f0 <HAL_CAN_RxFifo0MsgPendingCallback+0x368>)
 8003820:	4a20      	ldr	r2, [pc, #128]	; (80038a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x31c>)
 8003822:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003826:	e883 0003 	stmia.w	r3, {r0, r1}
    	sendDataCAN(97, &hcan1);
 800382a:	4932      	ldr	r1, [pc, #200]	; (80038f4 <HAL_CAN_RxFifo0MsgPendingCallback+0x36c>)
 800382c:	2061      	movs	r0, #97	; 0x61
 800382e:	f7ff f9a3 	bl	8002b78 <sendDataCAN>
        break;
 8003832:	e6da      	b.n	80035ea <HAL_CAN_RxFifo0MsgPendingCallback+0x62>
    	memcpy(&effekt_forbruk, &canRX, sizeof(effekt_struct));
 8003834:	4b30      	ldr	r3, [pc, #192]	; (80038f8 <HAL_CAN_RxFifo0MsgPendingCallback+0x370>)
 8003836:	4a1b      	ldr	r2, [pc, #108]	; (80038a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x31c>)
 8003838:	e892 0003 	ldmia.w	r2, {r0, r1}
 800383c:	e883 0003 	stmia.w	r3, {r0, r1}
    	power12vf = 0.9*power12vf + 0.1*effekt_forbruk.thruster_12v;
 8003840:	4e2e      	ldr	r6, [pc, #184]	; (80038fc <HAL_CAN_RxFifo0MsgPendingCallback+0x374>)
 8003842:	6837      	ldr	r7, [r6, #0]
 8003844:	8818      	ldrh	r0, [r3, #0]
 8003846:	f7fc fe11 	bl	800046c <__aeabi_i2d>
 800384a:	a311      	add	r3, pc, #68	; (adr r3, 8003890 <HAL_CAN_RxFifo0MsgPendingCallback+0x308>)
 800384c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003850:	f7fc fe76 	bl	8000540 <__aeabi_dmul>
 8003854:	4604      	mov	r4, r0
 8003856:	460d      	mov	r5, r1
 8003858:	4638      	mov	r0, r7
 800385a:	f7fc fe19 	bl	8000490 <__aeabi_f2d>
 800385e:	a30e      	add	r3, pc, #56	; (adr r3, 8003898 <HAL_CAN_RxFifo0MsgPendingCallback+0x310>)
 8003860:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003864:	f7fc fe6c 	bl	8000540 <__aeabi_dmul>
 8003868:	4602      	mov	r2, r0
 800386a:	460b      	mov	r3, r1
 800386c:	4620      	mov	r0, r4
 800386e:	4629      	mov	r1, r5
 8003870:	f7fc fcb0 	bl	80001d4 <__adddf3>
 8003874:	f7fd f93c 	bl	8000af0 <__aeabi_d2f>
 8003878:	6030      	str	r0, [r6, #0]
    	break;
 800387a:	e6b6      	b.n	80035ea <HAL_CAN_RxFifo0MsgPendingCallback+0x62>
 800387c:	f3af 8000 	nop.w
 8003880:	66666666 	.word	0x66666666
 8003884:	3fee6666 	.word	0x3fee6666
 8003888:	9999999a 	.word	0x9999999a
 800388c:	3fa99999 	.word	0x3fa99999
 8003890:	9999999a 	.word	0x9999999a
 8003894:	3fb99999 	.word	0x3fb99999
 8003898:	cccccccd 	.word	0xcccccccd
 800389c:	3feccccc 	.word	0x3feccccc
 80038a0:	200009f0 	.word	0x200009f0
 80038a4:	200001cc 	.word	0x200001cc
 80038a8:	200001bc 	.word	0x200001bc
 80038ac:	20000244 	.word	0x20000244
 80038b0:	20000ca0 	.word	0x20000ca0
 80038b4:	20000cdc 	.word	0x20000cdc
 80038b8:	2000059c 	.word	0x2000059c
 80038bc:	200002b8 	.word	0x200002b8
 80038c0:	20000a0c 	.word	0x20000a0c
 80038c4:	42c80000 	.word	0x42c80000
 80038c8:	2000054c 	.word	0x2000054c
 80038cc:	3c8efa35 	.word	0x3c8efa35
 80038d0:	3d4ccccd 	.word	0x3d4ccccd
 80038d4:	200003d8 	.word	0x200003d8
 80038d8:	200009cc 	.word	0x200009cc
 80038dc:	20000c30 	.word	0x20000c30
 80038e0:	20000264 	.word	0x20000264
 80038e4:	20000268 	.word	0x20000268
 80038e8:	200001b4 	.word	0x200001b4
 80038ec:	20000528 	.word	0x20000528
 80038f0:	20000000 	.word	0x20000000
 80038f4:	200002c0 	.word	0x200002c0
 80038f8:	20000238 	.word	0x20000238
 80038fc:	200008f4 	.word	0x200008f4
        memcpy(csend, (uint8_t*) &"pong!\n", 6);
 8003900:	4b05      	ldr	r3, [pc, #20]	; (8003918 <HAL_CAN_RxFifo0MsgPendingCallback+0x390>)
 8003902:	4a06      	ldr	r2, [pc, #24]	; (800391c <HAL_CAN_RxFifo0MsgPendingCallback+0x394>)
 8003904:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003908:	6018      	str	r0, [r3, #0]
 800390a:	8099      	strh	r1, [r3, #4]
        sendDataCAN(189, &hcan1);
 800390c:	4904      	ldr	r1, [pc, #16]	; (8003920 <HAL_CAN_RxFifo0MsgPendingCallback+0x398>)
 800390e:	20bd      	movs	r0, #189	; 0xbd
 8003910:	f7ff f932 	bl	8002b78 <sendDataCAN>
}
 8003914:	e669      	b.n	80035ea <HAL_CAN_RxFifo0MsgPendingCallback+0x62>
 8003916:	bf00      	nop
 8003918:	20000000 	.word	0x20000000
 800391c:	0800b9f8 	.word	0x0800b9f8
 8003920:	200002c0 	.word	0x200002c0

08003924 <Error_Handler>:
 8003924:	b672      	cpsid	i
  while (1)
 8003926:	e7fe      	b.n	8003926 <Error_Handler+0x2>

08003928 <assign_matrix_data>:

    return mat;
}

void assign_matrix_data(Matrix *mat, int rows, int cols, float *array) {
    if (mat == NULL) {
 8003928:	2800      	cmp	r0, #0
 800392a:	d039      	beq.n	80039a0 <assign_matrix_data+0x78>
void assign_matrix_data(Matrix *mat, int rows, int cols, float *array) {
 800392c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003930:	460d      	mov	r5, r1
 8003932:	4616      	mov	r6, r2
 8003934:	469a      	mov	sl, r3
 8003936:	4607      	mov	r7, r0
//        fprintf(stderr, "Matrix pointer is NULL.\n");
        return;
    }

    // Free any existing data if necessary
    if (mat->data != NULL) {
 8003938:	6883      	ldr	r3, [r0, #8]
 800393a:	b133      	cbz	r3, 800394a <assign_matrix_data+0x22>
        if (mat->data[0] != NULL) {
 800393c:	6818      	ldr	r0, [r3, #0]
 800393e:	b108      	cbz	r0, 8003944 <assign_matrix_data+0x1c>
            free(mat->data[0]);  // Free the block of matrix data if it exists
 8003940:	f006 face 	bl	8009ee0 <free>
        }
        free(mat->data);  // Free the array of pointers if it exists
 8003944:	68b8      	ldr	r0, [r7, #8]
 8003946:	f006 facb 	bl	8009ee0 <free>
    }

    mat->rows = rows;
 800394a:	603d      	str	r5, [r7, #0]
    mat->cols = cols;
 800394c:	607e      	str	r6, [r7, #4]

    // Allocate pointer array for rows
    mat->data = (float**) malloc(rows * sizeof(float*));
 800394e:	00a8      	lsls	r0, r5, #2
 8003950:	f006 fabe 	bl	8009ed0 <malloc>
 8003954:	4680      	mov	r8, r0
 8003956:	60b8      	str	r0, [r7, #8]
    if (mat->data == NULL) {
 8003958:	b1c8      	cbz	r0, 800398e <assign_matrix_data+0x66>
//        fprintf(stderr, "Memory allocation failed for data pointers.\n");
        exit(EXIT_FAILURE);
    }

    // Allocate a contiguous memory block for matrix data
    float *block = (float*) malloc(rows * cols * sizeof(float));
 800395a:	fb06 f905 	mul.w	r9, r6, r5
 800395e:	ea4f 0989 	mov.w	r9, r9, lsl #2
 8003962:	4648      	mov	r0, r9
 8003964:	f006 fab4 	bl	8009ed0 <malloc>
    if (block == NULL) {
 8003968:	4604      	mov	r4, r0
 800396a:	b198      	cbz	r0, 8003994 <assign_matrix_data+0x6c>
//        fprintf(stderr, "Memory allocation failed for matrix data.\n");
        exit(EXIT_FAILURE);
    }

    // Copy data from the input array to the block
    memcpy(block, array, rows * cols * sizeof(float));
 800396c:	464a      	mov	r2, r9
 800396e:	4651      	mov	r1, sl
 8003970:	f006 fabe 	bl	8009ef0 <memcpy>

    // Point each row pointer to the correct position in the block
    for (int i = 0; i < rows; i++) {
 8003974:	2d00      	cmp	r5, #0
 8003976:	dd08      	ble.n	800398a <assign_matrix_data+0x62>
 8003978:	00b1      	lsls	r1, r6, #2
 800397a:	2300      	movs	r3, #0
        mat->data[i] = block + i * cols;
 800397c:	68ba      	ldr	r2, [r7, #8]
 800397e:	f842 4023 	str.w	r4, [r2, r3, lsl #2]
    for (int i = 0; i < rows; i++) {
 8003982:	3301      	adds	r3, #1
 8003984:	440c      	add	r4, r1
 8003986:	429d      	cmp	r5, r3
 8003988:	d1f8      	bne.n	800397c <assign_matrix_data+0x54>
    }
}
 800398a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        exit(EXIT_FAILURE);
 800398e:	2001      	movs	r0, #1
 8003990:	f006 fa66 	bl	8009e60 <exit>
        free(mat->data);  // Clean up previously allocated memory
 8003994:	4640      	mov	r0, r8
 8003996:	f006 faa3 	bl	8009ee0 <free>
        exit(EXIT_FAILURE);
 800399a:	2001      	movs	r0, #1
 800399c:	f006 fa60 	bl	8009e60 <exit>
 80039a0:	4770      	bx	lr
	...

080039a4 <stamp_regulator>:




/* Funksjoner -------------------------------------------------- */
void stamp_regulator(void){
 80039a4:	b538      	push	{r3, r4, r5, lr}
	spid.e = spid.yr - stamp_m;													// Avvik
 80039a6:	4a48      	ldr	r2, [pc, #288]	; (8003ac8 <stamp_regulator+0x124>)
 80039a8:	edd2 7a00 	vldr	s15, [r2]
 80039ac:	4b47      	ldr	r3, [pc, #284]	; (8003acc <stamp_regulator+0x128>)
 80039ae:	ed93 6a00 	vldr	s12, [r3]
 80039b2:	ee36 6a67 	vsub.f32	s12, s12, s15
 80039b6:	ed83 6a01 	vstr	s12, [r3, #4]
	spid.fbf = param.stamp_pid.a * spid.fbfs + param.stamp_pid.b*stamp_m;		// filtrert måledata
 80039ba:	edd3 5a09 	vldr	s11, [r3, #36]	; 0x24
 80039be:	edd2 7a00 	vldr	s15, [r2]
 80039c2:	4a43      	ldr	r2, [pc, #268]	; (8003ad0 <stamp_regulator+0x12c>)
 80039c4:	edd2 6a24 	vldr	s13, [r2, #144]	; 0x90
 80039c8:	ee65 6aa6 	vmul.f32	s13, s11, s13
 80039cc:	ed92 7a25 	vldr	s14, [r2, #148]	; 0x94
 80039d0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80039d4:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80039d8:	edc3 6a08 	vstr	s13, [r3, #32]

	spid.up = param.stamp_pid.kp*spid.e;												// Proporsjonalbidrag
 80039dc:	ed92 7a1f 	vldr	s14, [r2, #124]	; 0x7c
 80039e0:	ee26 7a07 	vmul.f32	s14, s12, s14
 80039e4:	ed83 7a03 	vstr	s14, [r3, #12]
	spid.ui = spid.uis + param.stamp_pid.ki * param.stamp_pid.ts * (spid.e+spid.es)/2; 	// integratorbidrag
 80039e8:	edd2 4a22 	vldr	s9, [r2, #136]	; 0x88
 80039ec:	edd2 7a20 	vldr	s15, [r2, #128]	; 0x80
 80039f0:	ee64 7aa7 	vmul.f32	s15, s9, s15
 80039f4:	ed93 5a02 	vldr	s10, [r3, #8]
 80039f8:	ee36 5a05 	vadd.f32	s10, s12, s10
 80039fc:	ee67 7a85 	vmul.f32	s15, s15, s10
 8003a00:	eeb6 5a00 	vmov.f32	s10, #96	; 0x3f000000  0.5
 8003a04:	ee67 7a85 	vmul.f32	s15, s15, s10
 8003a08:	ed93 5a05 	vldr	s10, [r3, #20]
 8003a0c:	ee77 7a85 	vadd.f32	s15, s15, s10
 8003a10:	edc3 7a04 	vstr	s15, [r3, #16]
	spid.ud = -param.stamp_pid.kd * (spid.fbf-spid.fbfs) / param.stamp_pid.ts;			// derivatorbidrag
 8003a14:	ed92 5a21 	vldr	s10, [r2, #132]	; 0x84
 8003a18:	ee76 5ae5 	vsub.f32	s11, s13, s11
 8003a1c:	ee65 5a65 	vnmul.f32	s11, s10, s11
 8003a20:	ee85 5aa4 	vdiv.f32	s10, s11, s9
 8003a24:	ed83 5a06 	vstr	s10, [r3, #24]

	if (spid.ui > param.stamp_pid.ui_maks){												// Integratorbegrensning
 8003a28:	edd2 5a26 	vldr	s11, [r2, #152]	; 0x98
 8003a2c:	eef4 7ae5 	vcmpe.f32	s15, s11
 8003a30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a34:	dd30      	ble.n	8003a98 <stamp_regulator+0xf4>
		spid.ui = param.stamp_pid.ui_maks;	}
 8003a36:	edc3 5a04 	vstr	s11, [r3, #16]
	else if (spid.ui < param.stamp_pid.ui_min){
		spid.ui = param.stamp_pid.ui_min;	}

	spid.ut = spid.up+spid.ui+spid.ud;													// Totalbidrag
 8003a3a:	4b24      	ldr	r3, [pc, #144]	; (8003acc <stamp_regulator+0x128>)
 8003a3c:	edd3 5a04 	vldr	s11, [r3, #16]
 8003a40:	ee77 7a25 	vadd.f32	s15, s14, s11
 8003a44:	ee77 7a85 	vadd.f32	s15, s15, s10
 8003a48:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
	if (spid.ut > param.stamp_pid.ut_maks){												// Totalbidragsbegrensning
 8003a4c:	4b20      	ldr	r3, [pc, #128]	; (8003ad0 <stamp_regulator+0x12c>)
 8003a4e:	ed93 7a28 	vldr	s14, [r3, #160]	; 0xa0
 8003a52:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003a56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a5a:	dd29      	ble.n	8003ab0 <stamp_regulator+0x10c>
		spid.ut = param.stamp_pid.ut_maks;}
 8003a5c:	4b1b      	ldr	r3, [pc, #108]	; (8003acc <stamp_regulator+0x128>)
 8003a5e:	ed83 7a0a 	vstr	s14, [r3, #40]	; 0x28
	else if (spid.ut < param.stamp_pid.ut_min){
		spid.ut = param.stamp_pid.ut_min;	}

	spid.es = spid.e;																	// Oppdaterer forrige avvik
 8003a62:	4c1a      	ldr	r4, [pc, #104]	; (8003acc <stamp_regulator+0x128>)
 8003a64:	ed84 6a02 	vstr	s12, [r4, #8]
	spid.fbfs = spid.fbf;																// Oppdaterer forrige filtrerte måling
 8003a68:	edc4 6a09 	vstr	s13, [r4, #36]	; 0x24
	spid.uis = spid.ui;																	// Oppdaterer forrige integratorbidrag
 8003a6c:	edc4 5a05 	vstr	s11, [r4, #20]

	float prosent_paadrag = kg_til_paadrag(spid.ut);									// Konverterer kg thrust til prosent pådrag
 8003a70:	ed94 0a0a 	vldr	s0, [r4, #40]	; 0x28
 8003a74:	f7fe fa9c 	bl	8001fb0 <kg_til_paadrag>
	stampbidrag.vhf = prosent_paadrag;
 8003a78:	4d16      	ldr	r5, [pc, #88]	; (8003ad4 <stamp_regulator+0x130>)
 8003a7a:	ed85 0a04 	vstr	s0, [r5, #16]
	stampbidrag.vvf = prosent_paadrag;
 8003a7e:	ed85 0a07 	vstr	s0, [r5, #28]
	prosent_paadrag = kg_til_paadrag(-spid.ut);											// Konverterer for invers rettet thrustere
 8003a82:	ed94 0a0a 	vldr	s0, [r4, #40]	; 0x28
 8003a86:	eeb1 0a40 	vneg.f32	s0, s0
 8003a8a:	f7fe fa91 	bl	8001fb0 <kg_til_paadrag>
	stampbidrag.vhb = prosent_paadrag;
 8003a8e:	ed85 0a05 	vstr	s0, [r5, #20]
	stampbidrag.vvb = prosent_paadrag;
 8003a92:	ed85 0a06 	vstr	s0, [r5, #24]
}
 8003a96:	bd38      	pop	{r3, r4, r5, pc}
	else if (spid.ui < param.stamp_pid.ui_min){
 8003a98:	4b0d      	ldr	r3, [pc, #52]	; (8003ad0 <stamp_regulator+0x12c>)
 8003a9a:	edd3 5a27 	vldr	s11, [r3, #156]	; 0x9c
 8003a9e:	eef4 7ae5 	vcmpe.f32	s15, s11
 8003aa2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		spid.ui = param.stamp_pid.ui_min;	}
 8003aa6:	bf44      	itt	mi
 8003aa8:	4b08      	ldrmi	r3, [pc, #32]	; (8003acc <stamp_regulator+0x128>)
 8003aaa:	edc3 5a04 	vstrmi	s11, [r3, #16]
 8003aae:	e7c4      	b.n	8003a3a <stamp_regulator+0x96>
	else if (spid.ut < param.stamp_pid.ut_min){
 8003ab0:	4b07      	ldr	r3, [pc, #28]	; (8003ad0 <stamp_regulator+0x12c>)
 8003ab2:	ed93 7a29 	vldr	s14, [r3, #164]	; 0xa4
 8003ab6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003aba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		spid.ut = param.stamp_pid.ut_min;	}
 8003abe:	bf44      	itt	mi
 8003ac0:	4b02      	ldrmi	r3, [pc, #8]	; (8003acc <stamp_regulator+0x128>)
 8003ac2:	ed83 7a0a 	vstrmi	s14, [r3, #40]	; 0x28
 8003ac6:	e7cc      	b.n	8003a62 <stamp_regulator+0xbe>
 8003ac8:	20000c30 	.word	0x20000c30
 8003acc:	20000c00 	.word	0x20000c00
 8003ad0:	200006ec 	.word	0x200006ec
 8003ad4:	20000c34 	.word	0x20000c34

08003ad8 <rull_regulator>:


void rull_regulator(void){
 8003ad8:	b538      	push	{r3, r4, r5, lr}
	rpid.e = rpid.yr - rull_m;
 8003ada:	4a48      	ldr	r2, [pc, #288]	; (8003bfc <rull_regulator+0x124>)
 8003adc:	edd2 7a00 	vldr	s15, [r2]
 8003ae0:	4b47      	ldr	r3, [pc, #284]	; (8003c00 <rull_regulator+0x128>)
 8003ae2:	ed93 6a00 	vldr	s12, [r3]
 8003ae6:	ee36 6a67 	vsub.f32	s12, s12, s15
 8003aea:	ed83 6a01 	vstr	s12, [r3, #4]
	rpid.fbf = param.rull_pid.a * rpid.fbfs + param.rull_pid.b*rull_m;
 8003aee:	edd3 5a09 	vldr	s11, [r3, #36]	; 0x24
 8003af2:	edd2 7a00 	vldr	s15, [r2]
 8003af6:	4a43      	ldr	r2, [pc, #268]	; (8003c04 <rull_regulator+0x12c>)
 8003af8:	edd2 6a0e 	vldr	s13, [r2, #56]	; 0x38
 8003afc:	ee65 6aa6 	vmul.f32	s13, s11, s13
 8003b00:	ed92 7a0f 	vldr	s14, [r2, #60]	; 0x3c
 8003b04:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003b08:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8003b0c:	edc3 6a08 	vstr	s13, [r3, #32]

	rpid.up = param.rull_pid.kp*rpid.e;
 8003b10:	ed92 7a09 	vldr	s14, [r2, #36]	; 0x24
 8003b14:	ee26 7a07 	vmul.f32	s14, s12, s14
 8003b18:	ed83 7a03 	vstr	s14, [r3, #12]
	rpid.ui = rpid.uis + param.rull_pid.ki * param.rull_pid.ts * (rpid.e+rpid.es) /2;
 8003b1c:	edd2 4a0c 	vldr	s9, [r2, #48]	; 0x30
 8003b20:	edd2 7a0a 	vldr	s15, [r2, #40]	; 0x28
 8003b24:	ee64 7aa7 	vmul.f32	s15, s9, s15
 8003b28:	ed93 5a02 	vldr	s10, [r3, #8]
 8003b2c:	ee36 5a05 	vadd.f32	s10, s12, s10
 8003b30:	ee67 7a85 	vmul.f32	s15, s15, s10
 8003b34:	eeb6 5a00 	vmov.f32	s10, #96	; 0x3f000000  0.5
 8003b38:	ee67 7a85 	vmul.f32	s15, s15, s10
 8003b3c:	ed93 5a05 	vldr	s10, [r3, #20]
 8003b40:	ee77 7a85 	vadd.f32	s15, s15, s10
 8003b44:	edc3 7a04 	vstr	s15, [r3, #16]
	rpid.ud = -param.rull_pid.kd * (rpid.fbf-rpid.fbfs) / param.rull_pid.ts ;
 8003b48:	ed92 5a0b 	vldr	s10, [r2, #44]	; 0x2c
 8003b4c:	ee76 5ae5 	vsub.f32	s11, s13, s11
 8003b50:	ee65 5a65 	vnmul.f32	s11, s10, s11
 8003b54:	ee85 5aa4 	vdiv.f32	s10, s11, s9
 8003b58:	ed83 5a06 	vstr	s10, [r3, #24]

	if (rpid.ui > param.rull_pid.ui_maks){
 8003b5c:	edd2 5a10 	vldr	s11, [r2, #64]	; 0x40
 8003b60:	eef4 7ae5 	vcmpe.f32	s15, s11
 8003b64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b68:	dd30      	ble.n	8003bcc <rull_regulator+0xf4>
		rpid.ui = param.rull_pid.ui_maks;	}
 8003b6a:	edc3 5a04 	vstr	s11, [r3, #16]
	else if (rpid.ui < param.rull_pid.ui_min){
		rpid.ui = param.rull_pid.ui_min;	}

	rpid.ut = rpid.up+rpid.ui+rpid.ud;
 8003b6e:	4b24      	ldr	r3, [pc, #144]	; (8003c00 <rull_regulator+0x128>)
 8003b70:	edd3 5a04 	vldr	s11, [r3, #16]
 8003b74:	ee77 7a25 	vadd.f32	s15, s14, s11
 8003b78:	ee77 7a85 	vadd.f32	s15, s15, s10
 8003b7c:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
	if (rpid.ut > param.rull_pid.ut_maks){
 8003b80:	4b20      	ldr	r3, [pc, #128]	; (8003c04 <rull_regulator+0x12c>)
 8003b82:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
 8003b86:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003b8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b8e:	dd29      	ble.n	8003be4 <rull_regulator+0x10c>
		rpid.ut = param.rull_pid.ut_maks;}
 8003b90:	4b1b      	ldr	r3, [pc, #108]	; (8003c00 <rull_regulator+0x128>)
 8003b92:	ed83 7a0a 	vstr	s14, [r3, #40]	; 0x28
	else if (rpid.ut < param.rull_pid.ut_min){
		rpid.ut = param.rull_pid.ut_min;	}

	rpid.es = rpid.e;
 8003b96:	4c1a      	ldr	r4, [pc, #104]	; (8003c00 <rull_regulator+0x128>)
 8003b98:	ed84 6a02 	vstr	s12, [r4, #8]
	rpid.fbfs = rpid.fbf;
 8003b9c:	edc4 6a09 	vstr	s13, [r4, #36]	; 0x24
	rpid.uis = rpid.ui;
 8003ba0:	edc4 5a05 	vstr	s11, [r4, #20]

	float prosent_paadrag = kg_til_paadrag(rpid.ut);
 8003ba4:	ed94 0a0a 	vldr	s0, [r4, #40]	; 0x28
 8003ba8:	f7fe fa02 	bl	8001fb0 <kg_til_paadrag>
	rullbidrag.vhf = prosent_paadrag;
 8003bac:	4d16      	ldr	r5, [pc, #88]	; (8003c08 <rull_regulator+0x130>)
 8003bae:	ed85 0a04 	vstr	s0, [r5, #16]
	rullbidrag.vhb = prosent_paadrag;
 8003bb2:	ed85 0a05 	vstr	s0, [r5, #20]
	prosent_paadrag = kg_til_paadrag(-rpid.ut);
 8003bb6:	ed94 0a0a 	vldr	s0, [r4, #40]	; 0x28
 8003bba:	eeb1 0a40 	vneg.f32	s0, s0
 8003bbe:	f7fe f9f7 	bl	8001fb0 <kg_til_paadrag>
	rullbidrag.vvb = prosent_paadrag;
 8003bc2:	ed85 0a06 	vstr	s0, [r5, #24]
	rullbidrag.vvf = prosent_paadrag;
 8003bc6:	ed85 0a07 	vstr	s0, [r5, #28]


}
 8003bca:	bd38      	pop	{r3, r4, r5, pc}
	else if (rpid.ui < param.rull_pid.ui_min){
 8003bcc:	4b0d      	ldr	r3, [pc, #52]	; (8003c04 <rull_regulator+0x12c>)
 8003bce:	edd3 5a11 	vldr	s11, [r3, #68]	; 0x44
 8003bd2:	eef4 7ae5 	vcmpe.f32	s15, s11
 8003bd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		rpid.ui = param.rull_pid.ui_min;	}
 8003bda:	bf44      	itt	mi
 8003bdc:	4b08      	ldrmi	r3, [pc, #32]	; (8003c00 <rull_regulator+0x128>)
 8003bde:	edc3 5a04 	vstrmi	s11, [r3, #16]
 8003be2:	e7c4      	b.n	8003b6e <rull_regulator+0x96>
	else if (rpid.ut < param.rull_pid.ut_min){
 8003be4:	4b07      	ldr	r3, [pc, #28]	; (8003c04 <rull_regulator+0x12c>)
 8003be6:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
 8003bea:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003bee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		rpid.ut = param.rull_pid.ut_min;	}
 8003bf2:	bf44      	itt	mi
 8003bf4:	4b02      	ldrmi	r3, [pc, #8]	; (8003c00 <rull_regulator+0x128>)
 8003bf6:	ed83 7a0a 	vstrmi	s14, [r3, #40]	; 0x28
 8003bfa:	e7cc      	b.n	8003b96 <rull_regulator+0xbe>
 8003bfc:	200009cc 	.word	0x200009cc
 8003c00:	2000099c 	.word	0x2000099c
 8003c04:	200006ec 	.word	0x200006ec
 8003c08:	200009d0 	.word	0x200009d0

08003c0c <hiv_regulator>:

void hiv_regulator(void){
 8003c0c:	b508      	push	{r3, lr}

	hpid.e = hpid.yr - hiv_m;
 8003c0e:	4a45      	ldr	r2, [pc, #276]	; (8003d24 <hiv_regulator+0x118>)
 8003c10:	edd2 7a00 	vldr	s15, [r2]
 8003c14:	4b44      	ldr	r3, [pc, #272]	; (8003d28 <hiv_regulator+0x11c>)
 8003c16:	ed93 6a00 	vldr	s12, [r3]
 8003c1a:	ee36 6a67 	vsub.f32	s12, s12, s15
 8003c1e:	ed83 6a01 	vstr	s12, [r3, #4]
	hpid.fbf = param.hiv_pid.a * hpid.fbfs + param.hiv_pid.b*hiv_m;
 8003c22:	edd3 5a09 	vldr	s11, [r3, #36]	; 0x24
 8003c26:	edd2 7a00 	vldr	s15, [r2]
 8003c2a:	4a40      	ldr	r2, [pc, #256]	; (8003d2c <hiv_regulator+0x120>)
 8003c2c:	edd2 6a19 	vldr	s13, [r2, #100]	; 0x64
 8003c30:	ee65 6aa6 	vmul.f32	s13, s11, s13
 8003c34:	ed92 7a1a 	vldr	s14, [r2, #104]	; 0x68
 8003c38:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003c3c:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8003c40:	edc3 6a08 	vstr	s13, [r3, #32]

	hpid.up = param.hiv_pid.kp*hpid.e;
 8003c44:	ed92 7a14 	vldr	s14, [r2, #80]	; 0x50
 8003c48:	ee26 7a07 	vmul.f32	s14, s12, s14
 8003c4c:	ed83 7a03 	vstr	s14, [r3, #12]
	hpid.ui = hpid.uis + param.hiv_pid.ki * param.hiv_pid.ts * (hpid.e+hpid.es) /2;
 8003c50:	edd2 4a17 	vldr	s9, [r2, #92]	; 0x5c
 8003c54:	edd2 7a15 	vldr	s15, [r2, #84]	; 0x54
 8003c58:	ee64 7aa7 	vmul.f32	s15, s9, s15
 8003c5c:	ed93 5a02 	vldr	s10, [r3, #8]
 8003c60:	ee36 5a05 	vadd.f32	s10, s12, s10
 8003c64:	ee67 7a85 	vmul.f32	s15, s15, s10
 8003c68:	eeb6 5a00 	vmov.f32	s10, #96	; 0x3f000000  0.5
 8003c6c:	ee67 7a85 	vmul.f32	s15, s15, s10
 8003c70:	ed93 5a05 	vldr	s10, [r3, #20]
 8003c74:	ee77 7a85 	vadd.f32	s15, s15, s10
 8003c78:	edc3 7a04 	vstr	s15, [r3, #16]
	hpid.ud = -param.hiv_pid.kd * (hpid.fbf-hpid.fbfs) / param.hiv_pid.ts;
 8003c7c:	ed92 5a16 	vldr	s10, [r2, #88]	; 0x58
 8003c80:	ee76 5ae5 	vsub.f32	s11, s13, s11
 8003c84:	ee65 5a65 	vnmul.f32	s11, s10, s11
 8003c88:	ee85 5aa4 	vdiv.f32	s10, s11, s9
 8003c8c:	ed83 5a06 	vstr	s10, [r3, #24]

	if (hpid.ui > param.hiv_pid.ui_maks){
 8003c90:	edd2 5a1b 	vldr	s11, [r2, #108]	; 0x6c
 8003c94:	eef4 7ae5 	vcmpe.f32	s15, s11
 8003c98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c9c:	dd2a      	ble.n	8003cf4 <hiv_regulator+0xe8>
		hpid.ui = param.hiv_pid.ui_maks;	}
 8003c9e:	edc3 5a04 	vstr	s11, [r3, #16]
	else if (hpid.ui < param.hiv_pid.ui_min){
		hpid.ui = param.hiv_pid.ui_min;	}

	hpid.ut = hpid.up+hpid.ui+hpid.ud;
 8003ca2:	4b21      	ldr	r3, [pc, #132]	; (8003d28 <hiv_regulator+0x11c>)
 8003ca4:	edd3 5a04 	vldr	s11, [r3, #16]
 8003ca8:	ee77 7a25 	vadd.f32	s15, s14, s11
 8003cac:	ee77 7a85 	vadd.f32	s15, s15, s10
 8003cb0:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
	if (hpid.ut > param.hiv_pid.ut_maks){
 8003cb4:	4b1d      	ldr	r3, [pc, #116]	; (8003d2c <hiv_regulator+0x120>)
 8003cb6:	ed93 7a1d 	vldr	s14, [r3, #116]	; 0x74
 8003cba:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003cbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003cc2:	dd23      	ble.n	8003d0c <hiv_regulator+0x100>
		hpid.ut = param.hiv_pid.ut_maks;}
 8003cc4:	4b18      	ldr	r3, [pc, #96]	; (8003d28 <hiv_regulator+0x11c>)
 8003cc6:	ed83 7a0a 	vstr	s14, [r3, #40]	; 0x28
	else if (hpid.ut < param.hiv_pid.ut_min){
		hpid.ut = param.hiv_pid.ut_min;	}

	hpid.es = hpid.e;
 8003cca:	4b17      	ldr	r3, [pc, #92]	; (8003d28 <hiv_regulator+0x11c>)
 8003ccc:	ed83 6a02 	vstr	s12, [r3, #8]
	hpid.fbfs = hpid.fbf;
 8003cd0:	edc3 6a09 	vstr	s13, [r3, #36]	; 0x24
	hpid.uis = hpid.ui;
 8003cd4:	edc3 5a05 	vstr	s11, [r3, #20]

	float prosent_paadrag = kg_til_paadrag(hpid.ut);
 8003cd8:	ed93 0a0a 	vldr	s0, [r3, #40]	; 0x28
 8003cdc:	f7fe f968 	bl	8001fb0 <kg_til_paadrag>
	hivbidrag.vhf = prosent_paadrag;
 8003ce0:	4b13      	ldr	r3, [pc, #76]	; (8003d30 <hiv_regulator+0x124>)
 8003ce2:	ed83 0a04 	vstr	s0, [r3, #16]
	hivbidrag.vhb = prosent_paadrag;
 8003ce6:	ed83 0a05 	vstr	s0, [r3, #20]
	hivbidrag.vvb = prosent_paadrag;
 8003cea:	ed83 0a06 	vstr	s0, [r3, #24]
	hivbidrag.vvf = prosent_paadrag;
 8003cee:	ed83 0a07 	vstr	s0, [r3, #28]
}
 8003cf2:	bd08      	pop	{r3, pc}
	else if (hpid.ui < param.hiv_pid.ui_min){
 8003cf4:	4b0d      	ldr	r3, [pc, #52]	; (8003d2c <hiv_regulator+0x120>)
 8003cf6:	edd3 5a1c 	vldr	s11, [r3, #112]	; 0x70
 8003cfa:	eef4 7ae5 	vcmpe.f32	s15, s11
 8003cfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		hpid.ui = param.hiv_pid.ui_min;	}
 8003d02:	bf44      	itt	mi
 8003d04:	4b08      	ldrmi	r3, [pc, #32]	; (8003d28 <hiv_regulator+0x11c>)
 8003d06:	edc3 5a04 	vstrmi	s11, [r3, #16]
 8003d0a:	e7ca      	b.n	8003ca2 <hiv_regulator+0x96>
	else if (hpid.ut < param.hiv_pid.ut_min){
 8003d0c:	4b07      	ldr	r3, [pc, #28]	; (8003d2c <hiv_regulator+0x120>)
 8003d0e:	ed93 7a1e 	vldr	s14, [r3, #120]	; 0x78
 8003d12:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003d16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		hpid.ut = param.hiv_pid.ut_min;	}
 8003d1a:	bf44      	itt	mi
 8003d1c:	4b02      	ldrmi	r3, [pc, #8]	; (8003d28 <hiv_regulator+0x11c>)
 8003d1e:	ed83 7a0a 	vstrmi	s14, [r3, #40]	; 0x28
 8003d22:	e7d2      	b.n	8003cca <hiv_regulator+0xbe>
 8003d24:	200003d8 	.word	0x200003d8
 8003d28:	200003fc 	.word	0x200003fc
 8003d2c:	200006ec 	.word	0x200006ec
 8003d30:	200003dc 	.word	0x200003dc

08003d34 <pid>:
	girbidrag.hvb = prosent_paadrag;
	girbidrag.hvf = -prosent_paadrag;
}

float pid(pid_struct *pid, float state, float ref){
	float e = ref - state;
 8003d34:	ee70 0ac0 	vsub.f32	s1, s1, s0
	float fstate = pid->fstate_old*pid->a + state*pid->b; //filter on state to reduce jerk
 8003d38:	ed90 6a0a 	vldr	s12, [r0, #40]	; 0x28
 8003d3c:	edd0 6a03 	vldr	s13, [r0, #12]
 8003d40:	ee66 6a26 	vmul.f32	s13, s12, s13
 8003d44:	edd0 7a04 	vldr	s15, [r0, #16]
 8003d48:	ee20 0a27 	vmul.f32	s0, s0, s15
 8003d4c:	ee76 6a80 	vadd.f32	s13, s13, s0

	float p = pid->Kp * e;
	float i = pid->i_old + pid->Ki*(e+pid->e_old)*TSTEP /2;
 8003d50:	edd0 7a08 	vldr	s15, [r0, #32]
 8003d54:	ee70 7aa7 	vadd.f32	s15, s1, s15
 8003d58:	ed90 7a01 	vldr	s14, [r0, #4]
 8003d5c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003d60:	eddf 5a19 	vldr	s11, [pc, #100]	; 8003dc8 <pid+0x94>
 8003d64:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8003d68:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003d6c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003d70:	ed90 7a09 	vldr	s14, [r0, #36]	; 0x24
 8003d74:	ee77 7a87 	vadd.f32	s15, s15, s14
	float p = pid->Kp * e;
 8003d78:	ed90 7a00 	vldr	s14, [r0]
 8003d7c:	ee20 7a87 	vmul.f32	s14, s1, s14
	float d = pid->Kd * (fstate - pid->fstate_old) /TSTEP;

//	if (i > pid->umax){i = pid->umax;}
//	else if (i < pid->umin){i = pid->umin;}

	float u = p + i - d;
 8003d80:	ee37 7a27 	vadd.f32	s14, s14, s15
	float d = pid->Kd * (fstate - pid->fstate_old) /TSTEP;
 8003d84:	ee36 6ac6 	vsub.f32	s12, s13, s12
 8003d88:	ed90 5a02 	vldr	s10, [r0, #8]
 8003d8c:	ee26 6a05 	vmul.f32	s12, s12, s10
 8003d90:	ee86 5a25 	vdiv.f32	s10, s12, s11
	float u = p + i - d;
 8003d94:	ee37 7a45 	vsub.f32	s14, s14, s10
	if (u > pid->umax){u = pid->umax;}
 8003d98:	ed90 0a05 	vldr	s0, [r0, #20]
 8003d9c:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8003da0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003da4:	d408      	bmi.n	8003db8 <pid+0x84>
	else if (u < pid->umin){u = pid->umin;}
 8003da6:	ed90 0a06 	vldr	s0, [r0, #24]
	float u = p + i - d;
 8003daa:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8003dae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003db2:	bfd8      	it	le
 8003db4:	eeb0 0a47 	vmovle.f32	s0, s14

	pid->e_old = e; pid->i_old = i; pid->fstate_old = fstate;
 8003db8:	edc0 0a08 	vstr	s1, [r0, #32]
 8003dbc:	edc0 7a09 	vstr	s15, [r0, #36]	; 0x24
 8003dc0:	edc0 6a0a 	vstr	s13, [r0, #40]	; 0x28
//	pid->u = u;
	return u;
}
 8003dc4:	4770      	bx	lr
 8003dc6:	bf00      	nop
 8003dc8:	3d4ccccd 	.word	0x3d4ccccd

08003dcc <smc>:

float smc(smc_struct *smc, float state, float ref){
 8003dcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003dd0:	ed2d 8b08 	vpush	{d8-d11}
 8003dd4:	b082      	sub	sp, #8
 8003dd6:	9001      	str	r0, [sp, #4]
 8003dd8:	eeb0 aa60 	vmov.f32	s20, s1
	float e = state - ref;
 8003ddc:	ee70 9a60 	vsub.f32	s19, s0, s1
	float e_dt = (e - smc->e_old)/TSTEP;
 8003de0:	ed90 8a09 	vldr	s16, [r0, #36]	; 0x24
 8003de4:	ee39 7ac8 	vsub.f32	s14, s19, s16
 8003de8:	eddf 7a51 	vldr	s15, [pc, #324]	; 8003f30 <smc+0x164>
 8003dec:	eec7 8a27 	vdiv.f32	s17, s14, s15
	float e_int =smc->e_int_old +  (smc->e_old+e)*TSTEP/2;
 8003df0:	ee38 8a29 	vadd.f32	s16, s16, s19
 8003df4:	ee28 8a27 	vmul.f32	s16, s16, s15
 8003df8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003dfc:	ee28 8a07 	vmul.f32	s16, s16, s14
 8003e00:	ed90 7a0a 	vldr	s14, [r0, #40]	; 0x28
 8003e04:	ee38 8a07 	vadd.f32	s16, s16, s14
	float ref_dt = (ref - smc->ref_old)/TSTEP;
 8003e08:	ed90 7a07 	vldr	s14, [r0, #28]
 8003e0c:	ee30 7ac7 	vsub.f32	s14, s1, s14
 8003e10:	eec7 aa27 	vdiv.f32	s21, s14, s15
	float ref_dt_dt = (ref_dt - smc->ref_dt_old)/TSTEP;
 8003e14:	ed90 7a08 	vldr	s14, [r0, #32]
 8003e18:	ee3a 7ac7 	vsub.f32	s14, s21, s14
 8003e1c:	ee87 ba27 	vdiv.f32	s22, s14, s15

	float s = e_dt + smc->c1*e + smc->c2*e_int;
 8003e20:	ed90 9a00 	vldr	s18, [r0]
 8003e24:	ee29 9a89 	vmul.f32	s18, s19, s18
 8003e28:	ee39 9a28 	vadd.f32	s18, s18, s17
 8003e2c:	edd0 7a01 	vldr	s15, [r0, #4]
 8003e30:	ee68 7a27 	vmul.f32	s15, s16, s15
 8003e34:	ee39 9a27 	vadd.f32	s18, s18, s15

//	float acc = (smc->M_inv_Ds*velocity +smc->M_inv_Dm*velocity*fabs(velocity) +smc->M_inv_G*res_coef);
	float acc = calc_acceleration_smc(&smc, &model_states);
 8003e38:	493e      	ldr	r1, [pc, #248]	; (8003f34 <smc+0x168>)
 8003e3a:	a801      	add	r0, sp, #4
 8003e3c:	f7fe fbe8 	bl	8002610 <calc_acceleration_smc>
	float u = - (s)/(fabs(s)+smc->epsilon) * (smc->g_inv * fabs(smc->c1 *e_dt + smc->c2*e + acc - ref_dt_dt)  + smc->b0);
 8003e40:	f8dd a004 	ldr.w	sl, [sp, #4]
 8003e44:	edda 7a00 	vldr	s15, [sl]
 8003e48:	ee68 8aa7 	vmul.f32	s17, s17, s15
 8003e4c:	edda 7a01 	vldr	s15, [sl, #4]
 8003e50:	ee69 7aa7 	vmul.f32	s15, s19, s15
 8003e54:	ee78 8aa7 	vadd.f32	s17, s17, s15
 8003e58:	ee78 8a80 	vadd.f32	s17, s17, s0
 8003e5c:	ee78 8acb 	vsub.f32	s17, s17, s22
 8003e60:	eef0 7ae8 	vabs.f32	s15, s17
 8003e64:	ee17 0a90 	vmov	r0, s15
 8003e68:	f7fc fb12 	bl	8000490 <__aeabi_f2d>
 8003e6c:	4604      	mov	r4, r0
 8003e6e:	460d      	mov	r5, r1
 8003e70:	f8da 0010 	ldr.w	r0, [sl, #16]
 8003e74:	f7fc fb0c 	bl	8000490 <__aeabi_f2d>
 8003e78:	4602      	mov	r2, r0
 8003e7a:	460b      	mov	r3, r1
 8003e7c:	4620      	mov	r0, r4
 8003e7e:	4629      	mov	r1, r5
 8003e80:	f7fc fb5e 	bl	8000540 <__aeabi_dmul>
 8003e84:	4604      	mov	r4, r0
 8003e86:	460d      	mov	r5, r1
 8003e88:	f8da 000c 	ldr.w	r0, [sl, #12]
 8003e8c:	f7fc fb00 	bl	8000490 <__aeabi_f2d>
 8003e90:	4602      	mov	r2, r0
 8003e92:	460b      	mov	r3, r1
 8003e94:	4620      	mov	r0, r4
 8003e96:	4629      	mov	r1, r5
 8003e98:	f7fc f99c 	bl	80001d4 <__adddf3>
 8003e9c:	4604      	mov	r4, r0
 8003e9e:	460d      	mov	r5, r1
 8003ea0:	eef1 7a49 	vneg.f32	s15, s18
 8003ea4:	ee17 0a90 	vmov	r0, s15
 8003ea8:	f7fc faf2 	bl	8000490 <__aeabi_f2d>
 8003eac:	4606      	mov	r6, r0
 8003eae:	460f      	mov	r7, r1
 8003eb0:	eef0 7ac9 	vabs.f32	s15, s18
 8003eb4:	ee17 0a90 	vmov	r0, s15
 8003eb8:	f7fc faea 	bl	8000490 <__aeabi_f2d>
 8003ebc:	4680      	mov	r8, r0
 8003ebe:	4689      	mov	r9, r1
 8003ec0:	f8da 0008 	ldr.w	r0, [sl, #8]
 8003ec4:	f7fc fae4 	bl	8000490 <__aeabi_f2d>
 8003ec8:	4602      	mov	r2, r0
 8003eca:	460b      	mov	r3, r1
 8003ecc:	4640      	mov	r0, r8
 8003ece:	4649      	mov	r1, r9
 8003ed0:	f7fc f980 	bl	80001d4 <__adddf3>
 8003ed4:	4602      	mov	r2, r0
 8003ed6:	460b      	mov	r3, r1
 8003ed8:	4630      	mov	r0, r6
 8003eda:	4639      	mov	r1, r7
 8003edc:	f7fc fc5a 	bl	8000794 <__aeabi_ddiv>
 8003ee0:	4602      	mov	r2, r0
 8003ee2:	460b      	mov	r3, r1
 8003ee4:	4620      	mov	r0, r4
 8003ee6:	4629      	mov	r1, r5
 8003ee8:	f7fc fb2a 	bl	8000540 <__aeabi_dmul>
 8003eec:	f7fc fe00 	bl	8000af0 <__aeabi_d2f>
 8003ef0:	ee07 0a90 	vmov	s15, r0

	smc->e_old = e;
 8003ef4:	edca 9a09 	vstr	s19, [sl, #36]	; 0x24
	smc->e_int_old = e_int;
 8003ef8:	ed8a 8a0a 	vstr	s16, [sl, #40]	; 0x28
	smc->ref_old = ref;
 8003efc:	ed8a aa07 	vstr	s20, [sl, #28]
	smc->ref_dt_old = ref_dt;
 8003f00:	edca aa08 	vstr	s21, [sl, #32]

	if (u > smc->umax){u = smc->umax;}
 8003f04:	ed9a 0a06 	vldr	s0, [sl, #24]
 8003f08:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8003f0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f10:	d408      	bmi.n	8003f24 <smc+0x158>
	else if (u < smc->umin){u = smc->umin;}
 8003f12:	ed9a 0a05 	vldr	s0, [sl, #20]
	float u = - (s)/(fabs(s)+smc->epsilon) * (smc->g_inv * fabs(smc->c1 *e_dt + smc->c2*e + acc - ref_dt_dt)  + smc->b0);
 8003f16:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8003f1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f1e:	bfd8      	it	le
 8003f20:	eeb0 0a67 	vmovle.f32	s0, s15

	return u;
}
 8003f24:	b002      	add	sp, #8
 8003f26:	ecbd 8b08 	vpop	{d8-d11}
 8003f2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f2e:	bf00      	nop
 8003f30:	3d4ccccd 	.word	0x3d4ccccd
 8003f34:	2000054c 	.word	0x2000054c

08003f38 <lqr>:

void lqr(lqr_struct *lqr, state_struct *state, NED_eta *ref, NED_eta *thrust){
 8003f38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003f3c:	ed2d 8b06 	vpush	{d8-d10}
 8003f40:	b08a      	sub	sp, #40	; 0x28
 8003f42:	4604      	mov	r4, r0
 8003f44:	4692      	mov	sl, r2
 8003f46:	461d      	mov	r5, r3
	float e_z = - ref->z + state->z;
 8003f48:	ed91 aa02 	vldr	s20, [r1, #8]
 8003f4c:	edd2 7a02 	vldr	s15, [r2, #8]
 8003f50:	ee3a aa67 	vsub.f32	s20, s20, s15
	float e_z_int = lqr->e_z_int_old + (e_z + lqr->e_z_old)/2 *TSTEP;
 8003f54:	ed90 9a00 	vldr	s18, [r0]
 8003f58:	ee3a 9a09 	vadd.f32	s18, s20, s18
 8003f5c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003f60:	ee29 9a07 	vmul.f32	s18, s18, s14
 8003f64:	eddf 7a64 	vldr	s15, [pc, #400]	; 80040f8 <lqr+0x1c0>
 8003f68:	ee29 9a27 	vmul.f32	s18, s18, s15
 8003f6c:	edd0 6a03 	vldr	s13, [r0, #12]
 8003f70:	ee39 9a26 	vadd.f32	s18, s18, s13

	float e_phi = - ref->phi + state->phi;
 8003f74:	edd1 9a03 	vldr	s19, [r1, #12]
 8003f78:	edd2 6a03 	vldr	s13, [r2, #12]
 8003f7c:	ee79 9ae6 	vsub.f32	s19, s19, s13
	float e_phi_int = lqr->e_phi_int_old + (e_phi + lqr->e_phi_old)/2 *TSTEP;
 8003f80:	edd0 8a01 	vldr	s17, [r0, #4]
 8003f84:	ee79 8aa8 	vadd.f32	s17, s19, s17
 8003f88:	ee68 8a87 	vmul.f32	s17, s17, s14
 8003f8c:	ee68 8aa7 	vmul.f32	s17, s17, s15
 8003f90:	edd0 6a04 	vldr	s13, [r0, #16]
 8003f94:	ee78 8aa6 	vadd.f32	s17, s17, s13

	float e_theta = - ref->theta + state->theta;
 8003f98:	edd1 aa04 	vldr	s21, [r1, #16]
 8003f9c:	edd2 6a04 	vldr	s13, [r2, #16]
 8003fa0:	ee7a aae6 	vsub.f32	s21, s21, s13
	float e_theta_int = lqr->e_theta_int_old + (e_theta + lqr->e_theta_old)/2 *TSTEP;
 8003fa4:	ed90 8a02 	vldr	s16, [r0, #8]
 8003fa8:	ee3a 8a88 	vadd.f32	s16, s21, s16
 8003fac:	ee28 8a07 	vmul.f32	s16, s16, s14
 8003fb0:	ee28 8a27 	vmul.f32	s16, s16, s15
 8003fb4:	edd0 7a05 	vldr	s15, [r0, #20]
 8003fb8:	ee38 8a27 	vadd.f32	s16, s16, s15

	float x[9] = {state->w, state->p, state->q, e_z, e_phi, e_theta, e_z_int, e_phi_int, e_theta_int};
 8003fbc:	6a0b      	ldr	r3, [r1, #32]
 8003fbe:	9301      	str	r3, [sp, #4]
 8003fc0:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 8003fc2:	9302      	str	r3, [sp, #8]
 8003fc4:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 8003fc6:	9303      	str	r3, [sp, #12]
 8003fc8:	ed8d aa04 	vstr	s20, [sp, #16]
 8003fcc:	edcd 9a05 	vstr	s19, [sp, #20]
 8003fd0:	edcd aa06 	vstr	s21, [sp, #24]
 8003fd4:	ed8d 9a07 	vstr	s18, [sp, #28]
 8003fd8:	edcd 8a08 	vstr	s17, [sp, #32]
 8003fdc:	ed8d 8a09 	vstr	s16, [sp, #36]	; 0x24

	for (int i = 0; i < lqr->K.rows; i++) {
 8003fe0:	6983      	ldr	r3, [r0, #24]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	dd20      	ble.n	8004028 <lqr+0xf0>
 8003fe6:	462e      	mov	r6, r5
 8003fe8:	2000      	movs	r0, #0
 8003fea:	e017      	b.n	800401c <lqr+0xe4>
		float result = 0.0;
		for (int j = 0; j < lqr->K.cols; j++) {
			result += lqr->K.data[i][j] * x[j];
 8003fec:	6a23      	ldr	r3, [r4, #32]
 8003fee:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8003ff2:	aa01      	add	r2, sp, #4
 8003ff4:	eb03 0181 	add.w	r1, r3, r1, lsl #2
		float result = 0.0;
 8003ff8:	ed9f 7a40 	vldr	s14, [pc, #256]	; 80040fc <lqr+0x1c4>
			result += lqr->K.data[i][j] * x[j];
 8003ffc:	ecf3 7a01 	vldmia	r3!, {s15}
 8004000:	ecf2 6a01 	vldmia	r2!, {s13}
 8004004:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8004008:	ee37 7a27 	vadd.f32	s14, s14, s15
		for (int j = 0; j < lqr->K.cols; j++) {
 800400c:	428b      	cmp	r3, r1
 800400e:	d1f5      	bne.n	8003ffc <lqr+0xc4>
		}
		// insert result as the i-th element in &thrust
		*((float *)thrust + i) = result;
 8004010:	eca6 7a01 	vstmia	r6!, {s14}
	for (int i = 0; i < lqr->K.rows; i++) {
 8004014:	3001      	adds	r0, #1
 8004016:	69a3      	ldr	r3, [r4, #24]
 8004018:	4283      	cmp	r3, r0
 800401a:	dd05      	ble.n	8004028 <lqr+0xf0>
		for (int j = 0; j < lqr->K.cols; j++) {
 800401c:	69e1      	ldr	r1, [r4, #28]
 800401e:	2900      	cmp	r1, #0
 8004020:	dce4      	bgt.n	8003fec <lqr+0xb4>
		float result = 0.0;
 8004022:	ed9f 7a36 	vldr	s14, [pc, #216]	; 80040fc <lqr+0x1c4>
 8004026:	e7f3      	b.n	8004010 <lqr+0xd8>
	}
	thrust->phi += 4.91*cos(ref->theta) * sin(ref->phi);
 8004028:	f8da 0010 	ldr.w	r0, [sl, #16]
 800402c:	f7fc fa30 	bl	8000490 <__aeabi_f2d>
 8004030:	ec41 0b10 	vmov	d0, r0, r1
 8004034:	f006 f870 	bl	800a118 <cos>
 8004038:	ec59 8b10 	vmov	r8, r9, d0
 800403c:	f8da 000c 	ldr.w	r0, [sl, #12]
 8004040:	f7fc fa26 	bl	8000490 <__aeabi_f2d>
 8004044:	ec41 0b10 	vmov	d0, r0, r1
 8004048:	f006 f8ba 	bl	800a1c0 <sin>
 800404c:	ec57 6b10 	vmov	r6, r7, d0
 8004050:	a325      	add	r3, pc, #148	; (adr r3, 80040e8 <lqr+0x1b0>)
 8004052:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004056:	4640      	mov	r0, r8
 8004058:	4649      	mov	r1, r9
 800405a:	f7fc fa71 	bl	8000540 <__aeabi_dmul>
 800405e:	4632      	mov	r2, r6
 8004060:	463b      	mov	r3, r7
 8004062:	f7fc fa6d 	bl	8000540 <__aeabi_dmul>
 8004066:	4606      	mov	r6, r0
 8004068:	460f      	mov	r7, r1
 800406a:	68e8      	ldr	r0, [r5, #12]
 800406c:	f7fc fa10 	bl	8000490 <__aeabi_f2d>
 8004070:	4602      	mov	r2, r0
 8004072:	460b      	mov	r3, r1
 8004074:	4630      	mov	r0, r6
 8004076:	4639      	mov	r1, r7
 8004078:	f7fc f8ac 	bl	80001d4 <__adddf3>
 800407c:	f7fc fd38 	bl	8000af0 <__aeabi_d2f>
 8004080:	60e8      	str	r0, [r5, #12]
	thrust->theta += 4.9*sin(ref->theta);
 8004082:	f8da 0010 	ldr.w	r0, [sl, #16]
 8004086:	f7fc fa03 	bl	8000490 <__aeabi_f2d>
 800408a:	ec41 0b10 	vmov	d0, r0, r1
 800408e:	f006 f897 	bl	800a1c0 <sin>
 8004092:	ec57 6b10 	vmov	r6, r7, d0
 8004096:	6928      	ldr	r0, [r5, #16]
 8004098:	f7fc f9fa 	bl	8000490 <__aeabi_f2d>
 800409c:	4680      	mov	r8, r0
 800409e:	4689      	mov	r9, r1
 80040a0:	a313      	add	r3, pc, #76	; (adr r3, 80040f0 <lqr+0x1b8>)
 80040a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040a6:	4630      	mov	r0, r6
 80040a8:	4639      	mov	r1, r7
 80040aa:	f7fc fa49 	bl	8000540 <__aeabi_dmul>
 80040ae:	4602      	mov	r2, r0
 80040b0:	460b      	mov	r3, r1
 80040b2:	4640      	mov	r0, r8
 80040b4:	4649      	mov	r1, r9
 80040b6:	f7fc f88d 	bl	80001d4 <__adddf3>
 80040ba:	f7fc fd19 	bl	8000af0 <__aeabi_d2f>
 80040be:	6128      	str	r0, [r5, #16]

	lqr->e_z_old = e_z;
 80040c0:	ed84 aa00 	vstr	s20, [r4]
	lqr->e_phi_old = e_phi;
 80040c4:	edc4 9a01 	vstr	s19, [r4, #4]
	lqr->e_theta_old = e_theta;
 80040c8:	edc4 aa02 	vstr	s21, [r4, #8]

	lqr->e_z_int_old = e_z_int;
 80040cc:	ed84 9a03 	vstr	s18, [r4, #12]
	lqr->e_phi_int_old = e_phi_int;
 80040d0:	edc4 8a04 	vstr	s17, [r4, #16]
	lqr->e_theta_int_old = e_theta_int;
 80040d4:	ed84 8a05 	vstr	s16, [r4, #20]
}
 80040d8:	b00a      	add	sp, #40	; 0x28
 80040da:	ecbd 8b06 	vpop	{d8-d10}
 80040de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80040e2:	bf00      	nop
 80040e4:	f3af 8000 	nop.w
 80040e8:	0a3d70a4 	.word	0x0a3d70a4
 80040ec:	4013a3d7 	.word	0x4013a3d7
 80040f0:	9999999a 	.word	0x9999999a
 80040f4:	40139999 	.word	0x40139999
 80040f8:	3d4ccccd 	.word	0x3d4ccccd
 80040fc:	00000000 	.word	0x00000000

08004100 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004100:	b500      	push	{lr}
 8004102:	b083      	sub	sp, #12
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004104:	2100      	movs	r1, #0
 8004106:	9100      	str	r1, [sp, #0]
 8004108:	4b0c      	ldr	r3, [pc, #48]	; (800413c <HAL_MspInit+0x3c>)
 800410a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800410c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004110:	645a      	str	r2, [r3, #68]	; 0x44
 8004112:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004114:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8004118:	9200      	str	r2, [sp, #0]
 800411a:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800411c:	9101      	str	r1, [sp, #4]
 800411e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004120:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004124:	641a      	str	r2, [r3, #64]	; 0x40
 8004126:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004128:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800412c:	9301      	str	r3, [sp, #4]
 800412e:	9b01      	ldr	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8004130:	2007      	movs	r0, #7
 8004132:	f001 fe85 	bl	8005e40 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004136:	b003      	add	sp, #12
 8004138:	f85d fb04 	ldr.w	pc, [sp], #4
 800413c:	40023800 	.word	0x40023800

08004140 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8004140:	b510      	push	{r4, lr}
 8004142:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004144:	2300      	movs	r3, #0
 8004146:	9303      	str	r3, [sp, #12]
 8004148:	9304      	str	r3, [sp, #16]
 800414a:	9305      	str	r3, [sp, #20]
 800414c:	9306      	str	r3, [sp, #24]
 800414e:	9307      	str	r3, [sp, #28]
  if(hcan->Instance==CAN1)
 8004150:	6802      	ldr	r2, [r0, #0]
 8004152:	4b18      	ldr	r3, [pc, #96]	; (80041b4 <HAL_CAN_MspInit+0x74>)
 8004154:	429a      	cmp	r2, r3
 8004156:	d001      	beq.n	800415c <HAL_CAN_MspInit+0x1c>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8004158:	b008      	add	sp, #32
 800415a:	bd10      	pop	{r4, pc}
    __HAL_RCC_CAN1_CLK_ENABLE();
 800415c:	2400      	movs	r4, #0
 800415e:	9401      	str	r4, [sp, #4]
 8004160:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004164:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004166:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 800416a:	641a      	str	r2, [r3, #64]	; 0x40
 800416c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800416e:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 8004172:	9201      	str	r2, [sp, #4]
 8004174:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004176:	9402      	str	r4, [sp, #8]
 8004178:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800417a:	f042 0208 	orr.w	r2, r2, #8
 800417e:	631a      	str	r2, [r3, #48]	; 0x30
 8004180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004182:	f003 0308 	and.w	r3, r3, #8
 8004186:	9302      	str	r3, [sp, #8]
 8004188:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800418a:	2303      	movs	r3, #3
 800418c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800418e:	2202      	movs	r2, #2
 8004190:	9204      	str	r2, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004192:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8004194:	2309      	movs	r3, #9
 8004196:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004198:	a903      	add	r1, sp, #12
 800419a:	4807      	ldr	r0, [pc, #28]	; (80041b8 <HAL_CAN_MspInit+0x78>)
 800419c:	f001 feba 	bl	8005f14 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 80041a0:	4622      	mov	r2, r4
 80041a2:	4621      	mov	r1, r4
 80041a4:	2014      	movs	r0, #20
 80041a6:	f001 fe5d 	bl	8005e64 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80041aa:	2014      	movs	r0, #20
 80041ac:	f001 fe90 	bl	8005ed0 <HAL_NVIC_EnableIRQ>
}
 80041b0:	e7d2      	b.n	8004158 <HAL_CAN_MspInit+0x18>
 80041b2:	bf00      	nop
 80041b4:	40006400 	.word	0x40006400
 80041b8:	40020c00 	.word	0x40020c00

080041bc <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 80041bc:	b570      	push	{r4, r5, r6, lr}
 80041be:	b08c      	sub	sp, #48	; 0x30
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80041c0:	2300      	movs	r3, #0
 80041c2:	9307      	str	r3, [sp, #28]
 80041c4:	9308      	str	r3, [sp, #32]
 80041c6:	9309      	str	r3, [sp, #36]	; 0x24
 80041c8:	930a      	str	r3, [sp, #40]	; 0x28
 80041ca:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80041cc:	9306      	str	r3, [sp, #24]
  if(hi2s->Instance==SPI3)
 80041ce:	6802      	ldr	r2, [r0, #0]
 80041d0:	4b25      	ldr	r3, [pc, #148]	; (8004268 <HAL_I2S_MspInit+0xac>)
 80041d2:	429a      	cmp	r2, r3
 80041d4:	d001      	beq.n	80041da <HAL_I2S_MspInit+0x1e>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80041d6:	b00c      	add	sp, #48	; 0x30
 80041d8:	bd70      	pop	{r4, r5, r6, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80041da:	2301      	movs	r3, #1
 80041dc:	9303      	str	r3, [sp, #12]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 80041de:	23c0      	movs	r3, #192	; 0xc0
 80041e0:	9304      	str	r3, [sp, #16]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80041e2:	2302      	movs	r3, #2
 80041e4:	9305      	str	r3, [sp, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80041e6:	a803      	add	r0, sp, #12
 80041e8:	f003 fae6 	bl	80077b8 <HAL_RCCEx_PeriphCLKConfig>
 80041ec:	2800      	cmp	r0, #0
 80041ee:	d137      	bne.n	8004260 <HAL_I2S_MspInit+0xa4>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80041f0:	2400      	movs	r4, #0
 80041f2:	9400      	str	r4, [sp, #0]
 80041f4:	4b1d      	ldr	r3, [pc, #116]	; (800426c <HAL_I2S_MspInit+0xb0>)
 80041f6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80041f8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80041fc:	641a      	str	r2, [r3, #64]	; 0x40
 80041fe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004200:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 8004204:	9200      	str	r2, [sp, #0]
 8004206:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004208:	9401      	str	r4, [sp, #4]
 800420a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800420c:	f042 0201 	orr.w	r2, r2, #1
 8004210:	631a      	str	r2, [r3, #48]	; 0x30
 8004212:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004214:	f002 0201 	and.w	r2, r2, #1
 8004218:	9201      	str	r2, [sp, #4]
 800421a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800421c:	9402      	str	r4, [sp, #8]
 800421e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004220:	f042 0204 	orr.w	r2, r2, #4
 8004224:	631a      	str	r2, [r3, #48]	; 0x30
 8004226:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004228:	f003 0304 	and.w	r3, r3, #4
 800422c:	9302      	str	r3, [sp, #8]
 800422e:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8004230:	2310      	movs	r3, #16
 8004232:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004234:	2602      	movs	r6, #2
 8004236:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004238:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800423a:	940a      	str	r4, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800423c:	2506      	movs	r5, #6
 800423e:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8004240:	a907      	add	r1, sp, #28
 8004242:	480b      	ldr	r0, [pc, #44]	; (8004270 <HAL_I2S_MspInit+0xb4>)
 8004244:	f001 fe66 	bl	8005f14 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8004248:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 800424c:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800424e:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004250:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004252:	940a      	str	r4, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8004254:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004256:	a907      	add	r1, sp, #28
 8004258:	4806      	ldr	r0, [pc, #24]	; (8004274 <HAL_I2S_MspInit+0xb8>)
 800425a:	f001 fe5b 	bl	8005f14 <HAL_GPIO_Init>
}
 800425e:	e7ba      	b.n	80041d6 <HAL_I2S_MspInit+0x1a>
      Error_Handler();
 8004260:	f7ff fb60 	bl	8003924 <Error_Handler>
 8004264:	e7c4      	b.n	80041f0 <HAL_I2S_MspInit+0x34>
 8004266:	bf00      	nop
 8004268:	40003c00 	.word	0x40003c00
 800426c:	40023800 	.word	0x40023800
 8004270:	40020000 	.word	0x40020000
 8004274:	40020800 	.word	0x40020800

08004278 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004278:	b084      	sub	sp, #16
  if(htim_base->Instance==TIM2)
 800427a:	6803      	ldr	r3, [r0, #0]
 800427c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004280:	d007      	beq.n	8004292 <HAL_TIM_Base_MspInit+0x1a>
    __HAL_RCC_TIM2_CLK_ENABLE();
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
  else if(htim_base->Instance==TIM3)
 8004282:	4a17      	ldr	r2, [pc, #92]	; (80042e0 <HAL_TIM_Base_MspInit+0x68>)
 8004284:	4293      	cmp	r3, r2
 8004286:	d011      	beq.n	80042ac <HAL_TIM_Base_MspInit+0x34>
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
  else if(htim_base->Instance==TIM4)
 8004288:	4a16      	ldr	r2, [pc, #88]	; (80042e4 <HAL_TIM_Base_MspInit+0x6c>)
 800428a:	4293      	cmp	r3, r2
 800428c:	d01b      	beq.n	80042c6 <HAL_TIM_Base_MspInit+0x4e>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800428e:	b004      	add	sp, #16
 8004290:	4770      	bx	lr
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004292:	2300      	movs	r3, #0
 8004294:	9301      	str	r3, [sp, #4]
 8004296:	4b14      	ldr	r3, [pc, #80]	; (80042e8 <HAL_TIM_Base_MspInit+0x70>)
 8004298:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800429a:	f042 0201 	orr.w	r2, r2, #1
 800429e:	641a      	str	r2, [r3, #64]	; 0x40
 80042a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042a2:	f003 0301 	and.w	r3, r3, #1
 80042a6:	9301      	str	r3, [sp, #4]
 80042a8:	9b01      	ldr	r3, [sp, #4]
 80042aa:	e7f0      	b.n	800428e <HAL_TIM_Base_MspInit+0x16>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80042ac:	2300      	movs	r3, #0
 80042ae:	9302      	str	r3, [sp, #8]
 80042b0:	4b0d      	ldr	r3, [pc, #52]	; (80042e8 <HAL_TIM_Base_MspInit+0x70>)
 80042b2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80042b4:	f042 0202 	orr.w	r2, r2, #2
 80042b8:	641a      	str	r2, [r3, #64]	; 0x40
 80042ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042bc:	f003 0302 	and.w	r3, r3, #2
 80042c0:	9302      	str	r3, [sp, #8]
 80042c2:	9b02      	ldr	r3, [sp, #8]
 80042c4:	e7e3      	b.n	800428e <HAL_TIM_Base_MspInit+0x16>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80042c6:	2300      	movs	r3, #0
 80042c8:	9303      	str	r3, [sp, #12]
 80042ca:	4b07      	ldr	r3, [pc, #28]	; (80042e8 <HAL_TIM_Base_MspInit+0x70>)
 80042cc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80042ce:	f042 0204 	orr.w	r2, r2, #4
 80042d2:	641a      	str	r2, [r3, #64]	; 0x40
 80042d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042d6:	f003 0304 	and.w	r3, r3, #4
 80042da:	9303      	str	r3, [sp, #12]
 80042dc:	9b03      	ldr	r3, [sp, #12]
}
 80042de:	e7d6      	b.n	800428e <HAL_TIM_Base_MspInit+0x16>
 80042e0:	40000400 	.word	0x40000400
 80042e4:	40000800 	.word	0x40000800
 80042e8:	40023800 	.word	0x40023800

080042ec <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80042ec:	b530      	push	{r4, r5, lr}
 80042ee:	b08b      	sub	sp, #44	; 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80042f0:	2300      	movs	r3, #0
 80042f2:	9305      	str	r3, [sp, #20]
 80042f4:	9306      	str	r3, [sp, #24]
 80042f6:	9307      	str	r3, [sp, #28]
 80042f8:	9308      	str	r3, [sp, #32]
 80042fa:	9309      	str	r3, [sp, #36]	; 0x24
  if(htim->Instance==TIM2)
 80042fc:	6803      	ldr	r3, [r0, #0]
 80042fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004302:	d007      	beq.n	8004314 <HAL_TIM_MspPostInit+0x28>

  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }
  else if(htim->Instance==TIM3)
 8004304:	4a3d      	ldr	r2, [pc, #244]	; (80043fc <HAL_TIM_MspPostInit+0x110>)
 8004306:	4293      	cmp	r3, r2
 8004308:	d01c      	beq.n	8004344 <HAL_TIM_MspPostInit+0x58>

  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }
  else if(htim->Instance==TIM4)
 800430a:	4a3d      	ldr	r2, [pc, #244]	; (8004400 <HAL_TIM_MspPostInit+0x114>)
 800430c:	4293      	cmp	r3, r2
 800430e:	d043      	beq.n	8004398 <HAL_TIM_MspPostInit+0xac>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */
    TIM4->CR1 |= 0x01;
  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8004310:	b00b      	add	sp, #44	; 0x2c
 8004312:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004314:	2300      	movs	r3, #0
 8004316:	9300      	str	r3, [sp, #0]
 8004318:	4b3a      	ldr	r3, [pc, #232]	; (8004404 <HAL_TIM_MspPostInit+0x118>)
 800431a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800431c:	f042 0201 	orr.w	r2, r2, #1
 8004320:	631a      	str	r2, [r3, #48]	; 0x30
 8004322:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004324:	f003 0301 	and.w	r3, r3, #1
 8004328:	9300      	str	r3, [sp, #0]
 800432a:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_15;
 800432c:	f248 030e 	movw	r3, #32782	; 0x800e
 8004330:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004332:	2302      	movs	r3, #2
 8004334:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004336:	2301      	movs	r3, #1
 8004338:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800433a:	a905      	add	r1, sp, #20
 800433c:	4832      	ldr	r0, [pc, #200]	; (8004408 <HAL_TIM_MspPostInit+0x11c>)
 800433e:	f001 fde9 	bl	8005f14 <HAL_GPIO_Init>
 8004342:	e7e5      	b.n	8004310 <HAL_TIM_MspPostInit+0x24>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004344:	2500      	movs	r5, #0
 8004346:	9501      	str	r5, [sp, #4]
 8004348:	4b2e      	ldr	r3, [pc, #184]	; (8004404 <HAL_TIM_MspPostInit+0x118>)
 800434a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800434c:	f042 0202 	orr.w	r2, r2, #2
 8004350:	631a      	str	r2, [r3, #48]	; 0x30
 8004352:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004354:	f002 0202 	and.w	r2, r2, #2
 8004358:	9201      	str	r2, [sp, #4]
 800435a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800435c:	9502      	str	r5, [sp, #8]
 800435e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004360:	f042 0204 	orr.w	r2, r2, #4
 8004364:	631a      	str	r2, [r3, #48]	; 0x30
 8004366:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004368:	f003 0304 	and.w	r3, r3, #4
 800436c:	9302      	str	r3, [sp, #8]
 800436e:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_5;
 8004370:	2323      	movs	r3, #35	; 0x23
 8004372:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004374:	2402      	movs	r4, #2
 8004376:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004378:	9409      	str	r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800437a:	a905      	add	r1, sp, #20
 800437c:	4823      	ldr	r0, [pc, #140]	; (800440c <HAL_TIM_MspPostInit+0x120>)
 800437e:	f001 fdc9 	bl	8005f14 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8004382:	2340      	movs	r3, #64	; 0x40
 8004384:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004386:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004388:	9507      	str	r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800438a:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800438c:	9409      	str	r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800438e:	a905      	add	r1, sp, #20
 8004390:	481f      	ldr	r0, [pc, #124]	; (8004410 <HAL_TIM_MspPostInit+0x124>)
 8004392:	f001 fdbf 	bl	8005f14 <HAL_GPIO_Init>
 8004396:	e7bb      	b.n	8004310 <HAL_TIM_MspPostInit+0x24>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004398:	2500      	movs	r5, #0
 800439a:	9503      	str	r5, [sp, #12]
 800439c:	4b19      	ldr	r3, [pc, #100]	; (8004404 <HAL_TIM_MspPostInit+0x118>)
 800439e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80043a0:	f042 0208 	orr.w	r2, r2, #8
 80043a4:	631a      	str	r2, [r3, #48]	; 0x30
 80043a6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80043a8:	f002 0208 	and.w	r2, r2, #8
 80043ac:	9203      	str	r2, [sp, #12]
 80043ae:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80043b0:	9504      	str	r5, [sp, #16]
 80043b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80043b4:	f042 0202 	orr.w	r2, r2, #2
 80043b8:	631a      	str	r2, [r3, #48]	; 0x30
 80043ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043bc:	f003 0302 	and.w	r3, r3, #2
 80043c0:	9304      	str	r3, [sp, #16]
 80043c2:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_15;
 80043c4:	f44f 4310 	mov.w	r3, #36864	; 0x9000
 80043c8:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043ca:	2402      	movs	r4, #2
 80043cc:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80043ce:	9409      	str	r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80043d0:	a905      	add	r1, sp, #20
 80043d2:	4810      	ldr	r0, [pc, #64]	; (8004414 <HAL_TIM_MspPostInit+0x128>)
 80043d4:	f001 fd9e 	bl	8005f14 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 80043d8:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80043dc:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043de:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043e0:	9507      	str	r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80043e2:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80043e4:	9409      	str	r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80043e6:	a905      	add	r1, sp, #20
 80043e8:	4808      	ldr	r0, [pc, #32]	; (800440c <HAL_TIM_MspPostInit+0x120>)
 80043ea:	f001 fd93 	bl	8005f14 <HAL_GPIO_Init>
    TIM4->CR1 |= 0x01;
 80043ee:	4a04      	ldr	r2, [pc, #16]	; (8004400 <HAL_TIM_MspPostInit+0x114>)
 80043f0:	6813      	ldr	r3, [r2, #0]
 80043f2:	f043 0301 	orr.w	r3, r3, #1
 80043f6:	6013      	str	r3, [r2, #0]
}
 80043f8:	e78a      	b.n	8004310 <HAL_TIM_MspPostInit+0x24>
 80043fa:	bf00      	nop
 80043fc:	40000400 	.word	0x40000400
 8004400:	40000800 	.word	0x40000800
 8004404:	40023800 	.word	0x40023800
 8004408:	40020000 	.word	0x40020000
 800440c:	40020400 	.word	0x40020400
 8004410:	40020800 	.word	0x40020800
 8004414:	40020c00 	.word	0x40020c00

08004418 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004418:	e7fe      	b.n	8004418 <NMI_Handler>

0800441a <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800441a:	e7fe      	b.n	800441a <HardFault_Handler>

0800441c <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800441c:	e7fe      	b.n	800441c <MemManage_Handler>

0800441e <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800441e:	e7fe      	b.n	800441e <BusFault_Handler>

08004420 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004420:	e7fe      	b.n	8004420 <UsageFault_Handler>

08004422 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004422:	4770      	bx	lr

08004424 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004424:	4770      	bx	lr

08004426 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004426:	4770      	bx	lr

08004428 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004428:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */
	// PushButton avprelling
	teller_bryter++;
 800442a:	4a81      	ldr	r2, [pc, #516]	; (8004630 <SysTick_Handler+0x208>)
 800442c:	7813      	ldrb	r3, [r2, #0]
 800442e:	3301      	adds	r3, #1
 8004430:	b2db      	uxtb	r3, r3
 8004432:	7013      	strb	r3, [r2, #0]
	if (teller_bryter >= 10){
 8004434:	2b09      	cmp	r3, #9
 8004436:	d87b      	bhi.n	8004530 <SysTick_Handler+0x108>
		sjekk_brytertrykk();		// Sjekker om det har vært et brukertrykk siden sist sjekk.
		teller_bryter = 0;
	}

	teller_reg_hiv++;
 8004438:	4a7e      	ldr	r2, [pc, #504]	; (8004634 <SysTick_Handler+0x20c>)
 800443a:	7813      	ldrb	r3, [r2, #0]
 800443c:	3301      	adds	r3, #1
 800443e:	b2db      	uxtb	r3, r3
 8004440:	7013      	strb	r3, [r2, #0]
	if (teller_reg_hiv >= 250){		// 250 ms
 8004442:	2bf9      	cmp	r3, #249	; 0xf9
 8004444:	d906      	bls.n	8004454 <SysTick_Handler+0x2c>
		if(flagg.hiv_pause){		// Sjekker om piloten nylig har endret dybde
 8004446:	4b7c      	ldr	r3, [pc, #496]	; (8004638 <SysTick_Handler+0x210>)
 8004448:	785b      	ldrb	r3, [r3, #1]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d176      	bne.n	800453c <SysTick_Handler+0x114>
			hpid.es = hpid.fbfs = hpid.uds = hpid.uis = 0; // nullstiller følgeverdier.
      reset_pid_values(&pid_heave); reset_smc_values(&smc_heave);
			flagg.hpid = 1;			// Hiv-regulering restartes
			flagg.hiv_pause = 0;	// Avslutter hiv-pausen.
		}
		teller_reg_hiv = 0;
 800444e:	4b79      	ldr	r3, [pc, #484]	; (8004634 <SysTick_Handler+0x20c>)
 8004450:	2200      	movs	r2, #0
 8004452:	701a      	strb	r2, [r3, #0]
	}

	teller_reg_rull++;
 8004454:	4a79      	ldr	r2, [pc, #484]	; (800463c <SysTick_Handler+0x214>)
 8004456:	7813      	ldrb	r3, [r2, #0]
 8004458:	3301      	adds	r3, #1
 800445a:	b2db      	uxtb	r3, r3
 800445c:	7013      	strb	r3, [r2, #0]
	if (teller_reg_rull >= 250){		// 250 ms
 800445e:	2bf9      	cmp	r3, #249	; 0xf9
 8004460:	d907      	bls.n	8004472 <SysTick_Handler+0x4a>
		if(flagg.rull_pause){		// Sjekker om piloten nylig har endret rull
 8004462:	4b75      	ldr	r3, [pc, #468]	; (8004638 <SysTick_Handler+0x210>)
 8004464:	789b      	ldrb	r3, [r3, #2]
 8004466:	2b00      	cmp	r3, #0
 8004468:	f040 8081 	bne.w	800456e <SysTick_Handler+0x146>
			rpid.es = rpid.fbfs = rpid.uds = rpid.uis = 0; // nullstiller følgeverdier.
      reset_pid_values(&pid_roll); reset_smc_values(&smc_roll);
			flagg.rpid = 1;			// gir-regulering restartes
			flagg.rull_pause = 0;	// Avslutter gir-pausen.
		}
		teller_reg_rull = 0;
 800446c:	4b73      	ldr	r3, [pc, #460]	; (800463c <SysTick_Handler+0x214>)
 800446e:	2200      	movs	r2, #0
 8004470:	701a      	strb	r2, [r3, #0]
	}

	teller_reg_stamp++;
 8004472:	4a73      	ldr	r2, [pc, #460]	; (8004640 <SysTick_Handler+0x218>)
 8004474:	7813      	ldrb	r3, [r2, #0]
 8004476:	3301      	adds	r3, #1
 8004478:	b2db      	uxtb	r3, r3
 800447a:	7013      	strb	r3, [r2, #0]
	if (teller_reg_stamp >= 250){		// 250 ms
 800447c:	2bf9      	cmp	r3, #249	; 0xf9
 800447e:	d907      	bls.n	8004490 <SysTick_Handler+0x68>
		if(flagg.stamp_pause){		// Sjekker om piloten nylig har endret stamp
 8004480:	4b6d      	ldr	r3, [pc, #436]	; (8004638 <SysTick_Handler+0x210>)
 8004482:	78db      	ldrb	r3, [r3, #3]
 8004484:	2b00      	cmp	r3, #0
 8004486:	f040 8084 	bne.w	8004592 <SysTick_Handler+0x16a>
			spid.es = spid.fbfs = spid.uds = spid.uis = 0; // nullstiller følgeverdier.
      reset_pid_values(&pid_pitch); reset_smc_values(&smc_pitch);
			flagg.spid = 1;			// stamp-regulering restartes
			flagg.stamp_pause = 0;	// Avslutter gir-pausen.
		}
		teller_reg_stamp = 0;
 800448a:	4b6d      	ldr	r3, [pc, #436]	; (8004640 <SysTick_Handler+0x218>)
 800448c:	2200      	movs	r2, #0
 800448e:	701a      	strb	r2, [r3, #0]
	}

	teller_reg_gir++;
 8004490:	4a6c      	ldr	r2, [pc, #432]	; (8004644 <SysTick_Handler+0x21c>)
 8004492:	7813      	ldrb	r3, [r2, #0]
 8004494:	3301      	adds	r3, #1
 8004496:	b2db      	uxtb	r3, r3
 8004498:	7013      	strb	r3, [r2, #0]
	if (teller_reg_gir >= 250){		// 250 ms
 800449a:	2bf9      	cmp	r3, #249	; 0xf9
 800449c:	d913      	bls.n	80044c6 <SysTick_Handler+0x9e>
		if(flagg.gir_pause){		// Sjekker om piloten nylig har endret gir
 800449e:	4b66      	ldr	r3, [pc, #408]	; (8004638 <SysTick_Handler+0x210>)
 80044a0:	791b      	ldrb	r3, [r3, #4]
 80044a2:	b16b      	cbz	r3, 80044c0 <SysTick_Handler+0x98>
			gpid.yr = gir_m;		// Girreferansen oppdateres
 80044a4:	4b68      	ldr	r3, [pc, #416]	; (8004648 <SysTick_Handler+0x220>)
 80044a6:	681a      	ldr	r2, [r3, #0]
 80044a8:	4b68      	ldr	r3, [pc, #416]	; (800464c <SysTick_Handler+0x224>)
 80044aa:	601a      	str	r2, [r3, #0]
			gpid.es = gpid.fbfs = gpid.uds = gpid.uis = 0; // nullstiller følgeverdier.
 80044ac:	2200      	movs	r2, #0
 80044ae:	615a      	str	r2, [r3, #20]
 80044b0:	61da      	str	r2, [r3, #28]
 80044b2:	625a      	str	r2, [r3, #36]	; 0x24
 80044b4:	609a      	str	r2, [r3, #8]
			flagg.gpid = 1;			// gir-regulering restartes
 80044b6:	4b60      	ldr	r3, [pc, #384]	; (8004638 <SysTick_Handler+0x210>)
 80044b8:	2201      	movs	r2, #1
 80044ba:	721a      	strb	r2, [r3, #8]
			flagg.gir_pause = 0;	// Avslutter gir-pausen.
 80044bc:	2200      	movs	r2, #0
 80044be:	711a      	strb	r2, [r3, #4]
		}
		teller_reg_gir = 0;
 80044c0:	4b60      	ldr	r3, [pc, #384]	; (8004644 <SysTick_Handler+0x21c>)
 80044c2:	2200      	movs	r2, #0
 80044c4:	701a      	strb	r2, [r3, #0]
	}

  if (step_counter.TIMER_STATUS) {
 80044c6:	4b62      	ldr	r3, [pc, #392]	; (8004650 <SysTick_Handler+0x228>)
 80044c8:	7a1b      	ldrb	r3, [r3, #8]
 80044ca:	b133      	cbz	r3, 80044da <SysTick_Handler+0xb2>
    step_counter.seq_time++;
 80044cc:	4b60      	ldr	r3, [pc, #384]	; (8004650 <SysTick_Handler+0x228>)
 80044ce:	681a      	ldr	r2, [r3, #0]
 80044d0:	3201      	adds	r2, #1
 80044d2:	601a      	str	r2, [r3, #0]
    step_counter.incr_timer++;
 80044d4:	685a      	ldr	r2, [r3, #4]
 80044d6:	3201      	adds	r2, #1
 80044d8:	605a      	str	r2, [r3, #4]
  }

	teller_diode++;
 80044da:	4a5e      	ldr	r2, [pc, #376]	; (8004654 <SysTick_Handler+0x22c>)
 80044dc:	8813      	ldrh	r3, [r2, #0]
 80044de:	3301      	adds	r3, #1
 80044e0:	b29b      	uxth	r3, r3
 80044e2:	8013      	strh	r3, [r2, #0]
	if(teller_diode >= 250){
 80044e4:	2bf9      	cmp	r3, #249	; 0xf9
 80044e6:	d908      	bls.n	80044fa <SysTick_Handler+0xd2>
		led_status = !led_status;	// Endrer status for blinkende dioder.
 80044e8:	4a5b      	ldr	r2, [pc, #364]	; (8004658 <SysTick_Handler+0x230>)
 80044ea:	7813      	ldrb	r3, [r2, #0]
 80044ec:	fab3 f383 	clz	r3, r3
 80044f0:	095b      	lsrs	r3, r3, #5
 80044f2:	7013      	strb	r3, [r2, #0]
		teller_diode = 0;
 80044f4:	4b57      	ldr	r3, [pc, #348]	; (8004654 <SysTick_Handler+0x22c>)
 80044f6:	2200      	movs	r2, #0
 80044f8:	801a      	strh	r2, [r3, #0]
	}
	
	teller_idle++;					// Sjekker om det mottas styremeldinger.
 80044fa:	4a58      	ldr	r2, [pc, #352]	; (800465c <SysTick_Handler+0x234>)
 80044fc:	8813      	ldrh	r3, [r2, #0]
 80044fe:	3301      	adds	r3, #1
 8004500:	b29b      	uxth	r3, r3
 8004502:	8013      	strh	r3, [r2, #0]
	if(teller_idle >=  250){		// 250 ms
 8004504:	2bf9      	cmp	r3, #249	; 0xf9
 8004506:	d856      	bhi.n	80045b6 <SysTick_Handler+0x18e>
//		skriv_thruster_PWM();		// Setter thrustere i nøytral
//		GPIOE->ODR &= 0x0000;
		teller_idle = 0;
	}

	if(flagg.test_thrustere){
 8004508:	4b4b      	ldr	r3, [pc, #300]	; (8004638 <SysTick_Handler+0x210>)
 800450a:	7c9b      	ldrb	r3, [r3, #18]
 800450c:	b16b      	cbz	r3, 800452a <SysTick_Handler+0x102>
		teller_test_thruster++;
 800450e:	4a54      	ldr	r2, [pc, #336]	; (8004660 <SysTick_Handler+0x238>)
 8004510:	8813      	ldrh	r3, [r2, #0]
 8004512:	3301      	adds	r3, #1
 8004514:	8013      	strh	r3, [r2, #0]
		if(!flagg.testfunksjon){	test_thruster(thruster_ID);	}
 8004516:	4b48      	ldr	r3, [pc, #288]	; (8004638 <SysTick_Handler+0x210>)
 8004518:	7cdb      	ldrb	r3, [r3, #19]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d070      	beq.n	8004600 <SysTick_Handler+0x1d8>
		if(teller_test_thruster >= 5000){
 800451e:	4b50      	ldr	r3, [pc, #320]	; (8004660 <SysTick_Handler+0x238>)
 8004520:	881a      	ldrh	r2, [r3, #0]
 8004522:	f241 3387 	movw	r3, #4999	; 0x1387
 8004526:	429a      	cmp	r2, r3
 8004528:	d86f      	bhi.n	800460a <SysTick_Handler+0x1e2>
//		test_reg = 0;
//	}


  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800452a:	f001 f8a3 	bl	8005674 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800452e:	bd10      	pop	{r4, pc}
		sjekk_brytertrykk();		// Sjekker om det har vært et brukertrykk siden sist sjekk.
 8004530:	f7fd fc5a 	bl	8001de8 <sjekk_brytertrykk>
		teller_bryter = 0;
 8004534:	4b3e      	ldr	r3, [pc, #248]	; (8004630 <SysTick_Handler+0x208>)
 8004536:	2200      	movs	r2, #0
 8004538:	701a      	strb	r2, [r3, #0]
 800453a:	e77d      	b.n	8004438 <SysTick_Handler+0x10>
			hpid.yr = hiv_m;		// Dybdereferansen oppdateres
 800453c:	4b49      	ldr	r3, [pc, #292]	; (8004664 <SysTick_Handler+0x23c>)
 800453e:	681a      	ldr	r2, [r3, #0]
 8004540:	4b49      	ldr	r3, [pc, #292]	; (8004668 <SysTick_Handler+0x240>)
 8004542:	601a      	str	r2, [r3, #0]
      ctrl_ref.z = model_states.z;
 8004544:	4a49      	ldr	r2, [pc, #292]	; (800466c <SysTick_Handler+0x244>)
 8004546:	6891      	ldr	r1, [r2, #8]
 8004548:	4a49      	ldr	r2, [pc, #292]	; (8004670 <SysTick_Handler+0x248>)
 800454a:	6091      	str	r1, [r2, #8]
			hpid.es = hpid.fbfs = hpid.uds = hpid.uis = 0; // nullstiller følgeverdier.
 800454c:	2200      	movs	r2, #0
 800454e:	615a      	str	r2, [r3, #20]
 8004550:	61da      	str	r2, [r3, #28]
 8004552:	625a      	str	r2, [r3, #36]	; 0x24
 8004554:	609a      	str	r2, [r3, #8]
      reset_pid_values(&pid_heave); reset_smc_values(&smc_heave);
 8004556:	4847      	ldr	r0, [pc, #284]	; (8004674 <SysTick_Handler+0x24c>)
 8004558:	f000 fc48 	bl	8004dec <reset_pid_values>
 800455c:	4846      	ldr	r0, [pc, #280]	; (8004678 <SysTick_Handler+0x250>)
 800455e:	f000 fc52 	bl	8004e06 <reset_smc_values>
			flagg.hpid = 1;			// Hiv-regulering restartes
 8004562:	4b35      	ldr	r3, [pc, #212]	; (8004638 <SysTick_Handler+0x210>)
 8004564:	2201      	movs	r2, #1
 8004566:	71da      	strb	r2, [r3, #7]
			flagg.hiv_pause = 0;	// Avslutter hiv-pausen.
 8004568:	2200      	movs	r2, #0
 800456a:	705a      	strb	r2, [r3, #1]
 800456c:	e76f      	b.n	800444e <SysTick_Handler+0x26>
			rpid.es = rpid.fbfs = rpid.uds = rpid.uis = 0; // nullstiller følgeverdier.
 800456e:	4b43      	ldr	r3, [pc, #268]	; (800467c <SysTick_Handler+0x254>)
 8004570:	2200      	movs	r2, #0
 8004572:	615a      	str	r2, [r3, #20]
 8004574:	61da      	str	r2, [r3, #28]
 8004576:	625a      	str	r2, [r3, #36]	; 0x24
 8004578:	609a      	str	r2, [r3, #8]
      reset_pid_values(&pid_roll); reset_smc_values(&smc_roll);
 800457a:	4841      	ldr	r0, [pc, #260]	; (8004680 <SysTick_Handler+0x258>)
 800457c:	f000 fc36 	bl	8004dec <reset_pid_values>
 8004580:	4840      	ldr	r0, [pc, #256]	; (8004684 <SysTick_Handler+0x25c>)
 8004582:	f000 fc40 	bl	8004e06 <reset_smc_values>
			flagg.rpid = 1;			// gir-regulering restartes
 8004586:	4b2c      	ldr	r3, [pc, #176]	; (8004638 <SysTick_Handler+0x210>)
 8004588:	2201      	movs	r2, #1
 800458a:	719a      	strb	r2, [r3, #6]
			flagg.rull_pause = 0;	// Avslutter gir-pausen.
 800458c:	2200      	movs	r2, #0
 800458e:	709a      	strb	r2, [r3, #2]
 8004590:	e76c      	b.n	800446c <SysTick_Handler+0x44>
			spid.es = spid.fbfs = spid.uds = spid.uis = 0; // nullstiller følgeverdier.
 8004592:	4b3d      	ldr	r3, [pc, #244]	; (8004688 <SysTick_Handler+0x260>)
 8004594:	2200      	movs	r2, #0
 8004596:	615a      	str	r2, [r3, #20]
 8004598:	61da      	str	r2, [r3, #28]
 800459a:	625a      	str	r2, [r3, #36]	; 0x24
 800459c:	609a      	str	r2, [r3, #8]
      reset_pid_values(&pid_pitch); reset_smc_values(&smc_pitch);
 800459e:	483b      	ldr	r0, [pc, #236]	; (800468c <SysTick_Handler+0x264>)
 80045a0:	f000 fc24 	bl	8004dec <reset_pid_values>
 80045a4:	483a      	ldr	r0, [pc, #232]	; (8004690 <SysTick_Handler+0x268>)
 80045a6:	f000 fc2e 	bl	8004e06 <reset_smc_values>
			flagg.spid = 1;			// stamp-regulering restartes
 80045aa:	4b23      	ldr	r3, [pc, #140]	; (8004638 <SysTick_Handler+0x210>)
 80045ac:	2201      	movs	r2, #1
 80045ae:	715a      	strb	r2, [r3, #5]
			flagg.stamp_pause = 0;	// Avslutter gir-pausen.
 80045b0:	2200      	movs	r2, #0
 80045b2:	70da      	strb	r2, [r3, #3]
 80045b4:	e769      	b.n	800448a <SysTick_Handler+0x62>
		memset(&hivbidrag, 0, sizeof(thruster_sett_float));
 80045b6:	2420      	movs	r4, #32
 80045b8:	4622      	mov	r2, r4
 80045ba:	2100      	movs	r1, #0
 80045bc:	4835      	ldr	r0, [pc, #212]	; (8004694 <SysTick_Handler+0x26c>)
 80045be:	f005 fca5 	bl	8009f0c <memset>
		memset(&rullbidrag, 0, sizeof(thruster_sett_float));
 80045c2:	4622      	mov	r2, r4
 80045c4:	2100      	movs	r1, #0
 80045c6:	4834      	ldr	r0, [pc, #208]	; (8004698 <SysTick_Handler+0x270>)
 80045c8:	f005 fca0 	bl	8009f0c <memset>
		memset(&stampbidrag, 0, sizeof(thruster_sett_float));
 80045cc:	4622      	mov	r2, r4
 80045ce:	2100      	movs	r1, #0
 80045d0:	4832      	ldr	r0, [pc, #200]	; (800469c <SysTick_Handler+0x274>)
 80045d2:	f005 fc9b 	bl	8009f0c <memset>
		memset(&girbidrag, 0, sizeof(thruster_sett_float));
 80045d6:	4622      	mov	r2, r4
 80045d8:	2100      	movs	r1, #0
 80045da:	4831      	ldr	r0, [pc, #196]	; (80046a0 <SysTick_Handler+0x278>)
 80045dc:	f005 fc96 	bl	8009f0c <memset>
		memset(&styrebidrag, 0, sizeof(thruster_sett_float));
 80045e0:	4622      	mov	r2, r4
 80045e2:	2100      	movs	r1, #0
 80045e4:	482f      	ldr	r0, [pc, #188]	; (80046a4 <SysTick_Handler+0x27c>)
 80045e6:	f005 fc91 	bl	8009f0c <memset>
		memset(&styrefilter, 0, sizeof(thruster_sett_float));
 80045ea:	4622      	mov	r2, r4
 80045ec:	2100      	movs	r1, #0
 80045ee:	482e      	ldr	r0, [pc, #184]	; (80046a8 <SysTick_Handler+0x280>)
 80045f0:	f005 fc8c 	bl	8009f0c <memset>
		behandle_paadrag();
 80045f4:	f7fd fd78 	bl	80020e8 <behandle_paadrag>
		teller_idle = 0;
 80045f8:	4b18      	ldr	r3, [pc, #96]	; (800465c <SysTick_Handler+0x234>)
 80045fa:	2200      	movs	r2, #0
 80045fc:	801a      	strh	r2, [r3, #0]
 80045fe:	e783      	b.n	8004508 <SysTick_Handler+0xe0>
		if(!flagg.testfunksjon){	test_thruster(thruster_ID);	}
 8004600:	4b2a      	ldr	r3, [pc, #168]	; (80046ac <SysTick_Handler+0x284>)
 8004602:	7818      	ldrb	r0, [r3, #0]
 8004604:	f000 f89c 	bl	8004740 <test_thruster>
 8004608:	e789      	b.n	800451e <SysTick_Handler+0xf6>
			memcpy(&thruster_PWM, &oppstart_PWM, sizeof(thruster_sett));
 800460a:	4b29      	ldr	r3, [pc, #164]	; (80046b0 <SysTick_Handler+0x288>)
 800460c:	4a29      	ldr	r2, [pc, #164]	; (80046b4 <SysTick_Handler+0x28c>)
 800460e:	6814      	ldr	r4, [r2, #0]
 8004610:	6850      	ldr	r0, [r2, #4]
 8004612:	6891      	ldr	r1, [r2, #8]
 8004614:	68d2      	ldr	r2, [r2, #12]
 8004616:	601c      	str	r4, [r3, #0]
 8004618:	6058      	str	r0, [r3, #4]
 800461a:	6099      	str	r1, [r3, #8]
 800461c:	60da      	str	r2, [r3, #12]
			skriv_thruster_PWM();
 800461e:	f7fd f9b1 	bl	8001984 <skriv_thruster_PWM>
			flagg.test_thrustere = 0;
 8004622:	4a05      	ldr	r2, [pc, #20]	; (8004638 <SysTick_Handler+0x210>)
 8004624:	2300      	movs	r3, #0
 8004626:	7493      	strb	r3, [r2, #18]
			flagg.testfunksjon = 0;
 8004628:	74d3      	strb	r3, [r2, #19]
			teller_test_thruster = 0;
 800462a:	4a0d      	ldr	r2, [pc, #52]	; (8004660 <SysTick_Handler+0x238>)
 800462c:	8013      	strh	r3, [r2, #0]
 800462e:	e77c      	b.n	800452a <SysTick_Handler+0x102>
 8004630:	20000cd8 	.word	0x20000cd8
 8004634:	20000cdf 	.word	0x20000cdf
 8004638:	20000244 	.word	0x20000244
 800463c:	20000ce0 	.word	0x20000ce0
 8004640:	20000ce1 	.word	0x20000ce1
 8004644:	20000cde 	.word	0x20000cde
 8004648:	20000264 	.word	0x20000264
 800464c:	2000028c 	.word	0x2000028c
 8004650:	20000c54 	.word	0x20000c54
 8004654:	20000cda 	.word	0x20000cda
 8004658:	20000500 	.word	0x20000500
 800465c:	20000cdc 	.word	0x20000cdc
 8004660:	20000ce2 	.word	0x20000ce2
 8004664:	200003d8 	.word	0x200003d8
 8004668:	200003fc 	.word	0x200003fc
 800466c:	2000054c 	.word	0x2000054c
 8004670:	20000220 	.word	0x20000220
 8004674:	200007c0 	.word	0x200007c0
 8004678:	20000b70 	.word	0x20000b70
 800467c:	2000099c 	.word	0x2000099c
 8004680:	20000820 	.word	0x20000820
 8004684:	20000bd0 	.word	0x20000bd0
 8004688:	20000c00 	.word	0x20000c00
 800468c:	200007f0 	.word	0x200007f0
 8004690:	20000ba0 	.word	0x20000ba0
 8004694:	200003dc 	.word	0x200003dc
 8004698:	200009d0 	.word	0x200009d0
 800469c:	20000c34 	.word	0x20000c34
 80046a0:	2000026c 	.word	0x2000026c
 80046a4:	20000c60 	.word	0x20000c60
 80046a8:	20000c80 	.word	0x20000c80
 80046ac:	20000d18 	.word	0x20000d18
 80046b0:	20000d1c 	.word	0x20000d1c
 80046b4:	20000008 	.word	0x20000008

080046b8 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 80046b8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80046ba:	4802      	ldr	r0, [pc, #8]	; (80046c4 <CAN1_RX0_IRQHandler+0xc>)
 80046bc:	f001 fa9a 	bl	8005bf4 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80046c0:	bd08      	pop	{r3, pc}
 80046c2:	bf00      	nop
 80046c4:	200002c0 	.word	0x200002c0

080046c8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80046c8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 80046ca:	4802      	ldr	r0, [pc, #8]	; (80046d4 <OTG_FS_IRQHandler+0xc>)
 80046cc:	f001 fe82 	bl	80063d4 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80046d0:	bd08      	pop	{r3, pc}
 80046d2:	bf00      	nop
 80046d4:	20001154 	.word	0x20001154

080046d8 <_exit>:
	errno = EINVAL;
	return -1;
}

void _exit (int status)
{
 80046d8:	b508      	push	{r3, lr}
	errno = EINVAL;
 80046da:	f005 fbbb 	bl	8009e54 <__errno>
 80046de:	2316      	movs	r3, #22
 80046e0:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 80046e2:	e7fe      	b.n	80046e2 <_exit+0xa>

080046e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80046e4:	b508      	push	{r3, lr}
 80046e6:	4603      	mov	r3, r0
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80046e8:	4a0c      	ldr	r2, [pc, #48]	; (800471c <_sbrk+0x38>)
 80046ea:	6812      	ldr	r2, [r2, #0]
 80046ec:	b152      	cbz	r2, 8004704 <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80046ee:	4a0b      	ldr	r2, [pc, #44]	; (800471c <_sbrk+0x38>)
 80046f0:	6810      	ldr	r0, [r2, #0]
 80046f2:	4403      	add	r3, r0
 80046f4:	4a0a      	ldr	r2, [pc, #40]	; (8004720 <_sbrk+0x3c>)
 80046f6:	490b      	ldr	r1, [pc, #44]	; (8004724 <_sbrk+0x40>)
 80046f8:	1a52      	subs	r2, r2, r1
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d806      	bhi.n	800470c <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 80046fe:	4a07      	ldr	r2, [pc, #28]	; (800471c <_sbrk+0x38>)
 8004700:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 8004702:	bd08      	pop	{r3, pc}
    __sbrk_heap_end = &_end;
 8004704:	4a05      	ldr	r2, [pc, #20]	; (800471c <_sbrk+0x38>)
 8004706:	4908      	ldr	r1, [pc, #32]	; (8004728 <_sbrk+0x44>)
 8004708:	6011      	str	r1, [r2, #0]
 800470a:	e7f0      	b.n	80046ee <_sbrk+0xa>
    errno = ENOMEM;
 800470c:	f005 fba2 	bl	8009e54 <__errno>
 8004710:	230c      	movs	r3, #12
 8004712:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8004714:	f04f 30ff 	mov.w	r0, #4294967295
 8004718:	e7f3      	b.n	8004702 <_sbrk+0x1e>
 800471a:	bf00      	nop
 800471c:	20000d6c 	.word	0x20000d6c
 8004720:	20020000 	.word	0x20020000
 8004724:	00000400 	.word	0x00000400
 8004728:	20001468 	.word	0x20001468

0800472c <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800472c:	4a03      	ldr	r2, [pc, #12]	; (800473c <SystemInit+0x10>)
 800472e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8004732:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004736:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800473a:	4770      	bx	lr
 800473c:	e000ed00 	.word	0xe000ed00

08004740 <test_thruster>:
		test_teller = 0;
	}
}


void test_thruster(uint32_t thrusterID){
 8004740:	b508      	push	{r3, lr}
	flagg.testfunksjon = 1;
 8004742:	4b20      	ldr	r3, [pc, #128]	; (80047c4 <test_thruster+0x84>)
 8004744:	2201      	movs	r2, #1
 8004746:	74da      	strb	r2, [r3, #19]
	if(thrusterID == 1){ thruster_PWM.hhf = 1540;	}
 8004748:	4290      	cmp	r0, r2
 800474a:	d012      	beq.n	8004772 <test_thruster+0x32>
	else if(thrusterID == 2){ thruster_PWM.hhb = 1540;	}
 800474c:	2802      	cmp	r0, #2
 800474e:	d01a      	beq.n	8004786 <test_thruster+0x46>
	else if(thrusterID == 3){ thruster_PWM.hvb = 1540;	}
 8004750:	2803      	cmp	r0, #3
 8004752:	d01d      	beq.n	8004790 <test_thruster+0x50>
	else if(thrusterID == 4){ thruster_PWM.hvf = 1540;	}
 8004754:	2804      	cmp	r0, #4
 8004756:	d020      	beq.n	800479a <test_thruster+0x5a>
	else if(thrusterID == 5){ thruster_PWM.vhf = 1540;	}
 8004758:	2805      	cmp	r0, #5
 800475a:	d023      	beq.n	80047a4 <test_thruster+0x64>
	else if(thrusterID == 6){ thruster_PWM.vhb = 1540;	}
 800475c:	2806      	cmp	r0, #6
 800475e:	d026      	beq.n	80047ae <test_thruster+0x6e>
	else if(thrusterID == 7){ thruster_PWM.vvb = 1540;	}
 8004760:	2807      	cmp	r0, #7
 8004762:	d029      	beq.n	80047b8 <test_thruster+0x78>
	else if(thrusterID == 8){ thruster_PWM.vvf = 1540;	}
 8004764:	2808      	cmp	r0, #8
 8004766:	d108      	bne.n	800477a <test_thruster+0x3a>
 8004768:	4b17      	ldr	r3, [pc, #92]	; (80047c8 <test_thruster+0x88>)
 800476a:	f240 6204 	movw	r2, #1540	; 0x604
 800476e:	81da      	strh	r2, [r3, #14]
 8004770:	e003      	b.n	800477a <test_thruster+0x3a>
	if(thrusterID == 1){ thruster_PWM.hhf = 1540;	}
 8004772:	4b15      	ldr	r3, [pc, #84]	; (80047c8 <test_thruster+0x88>)
 8004774:	f240 6204 	movw	r2, #1540	; 0x604
 8004778:	801a      	strh	r2, [r3, #0]

	teller_test_thruster = 0;
 800477a:	4b14      	ldr	r3, [pc, #80]	; (80047cc <test_thruster+0x8c>)
 800477c:	2200      	movs	r2, #0
 800477e:	801a      	strh	r2, [r3, #0]
	skriv_thruster_PWM();
 8004780:	f7fd f900 	bl	8001984 <skriv_thruster_PWM>
}
 8004784:	bd08      	pop	{r3, pc}
	else if(thrusterID == 2){ thruster_PWM.hhb = 1540;	}
 8004786:	4b10      	ldr	r3, [pc, #64]	; (80047c8 <test_thruster+0x88>)
 8004788:	f240 6204 	movw	r2, #1540	; 0x604
 800478c:	805a      	strh	r2, [r3, #2]
 800478e:	e7f4      	b.n	800477a <test_thruster+0x3a>
	else if(thrusterID == 3){ thruster_PWM.hvb = 1540;	}
 8004790:	4b0d      	ldr	r3, [pc, #52]	; (80047c8 <test_thruster+0x88>)
 8004792:	f240 6204 	movw	r2, #1540	; 0x604
 8004796:	809a      	strh	r2, [r3, #4]
 8004798:	e7ef      	b.n	800477a <test_thruster+0x3a>
	else if(thrusterID == 4){ thruster_PWM.hvf = 1540;	}
 800479a:	4b0b      	ldr	r3, [pc, #44]	; (80047c8 <test_thruster+0x88>)
 800479c:	f240 6204 	movw	r2, #1540	; 0x604
 80047a0:	80da      	strh	r2, [r3, #6]
 80047a2:	e7ea      	b.n	800477a <test_thruster+0x3a>
	else if(thrusterID == 5){ thruster_PWM.vhf = 1540;	}
 80047a4:	4b08      	ldr	r3, [pc, #32]	; (80047c8 <test_thruster+0x88>)
 80047a6:	f240 6204 	movw	r2, #1540	; 0x604
 80047aa:	811a      	strh	r2, [r3, #8]
 80047ac:	e7e5      	b.n	800477a <test_thruster+0x3a>
	else if(thrusterID == 6){ thruster_PWM.vhb = 1540;	}
 80047ae:	4b06      	ldr	r3, [pc, #24]	; (80047c8 <test_thruster+0x88>)
 80047b0:	f240 6204 	movw	r2, #1540	; 0x604
 80047b4:	815a      	strh	r2, [r3, #10]
 80047b6:	e7e0      	b.n	800477a <test_thruster+0x3a>
	else if(thrusterID == 7){ thruster_PWM.vvb = 1540;	}
 80047b8:	4b03      	ldr	r3, [pc, #12]	; (80047c8 <test_thruster+0x88>)
 80047ba:	f240 6204 	movw	r2, #1540	; 0x604
 80047be:	819a      	strh	r2, [r3, #12]
 80047c0:	e7db      	b.n	800477a <test_thruster+0x3a>
 80047c2:	bf00      	nop
 80047c4:	20000244 	.word	0x20000244
 80047c8:	20000d1c 	.word	0x20000d1c
 80047cc:	20000ce2 	.word	0x20000ce2

080047d0 <oppstartsverdier>:
#include <matrix_operations.h>

	uint8_t c;


void oppstartsverdier(void){
 80047d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047d4:	ed2d 8b08 	vpush	{d8-d11}
 80047d8:	b0ef      	sub	sp, #444	; 0x1bc
	param.demping.gir = 0.7;
 80047da:	4cc6      	ldr	r4, [pc, #792]	; (8004af4 <oppstartsverdier+0x324>)
 80047dc:	4bc6      	ldr	r3, [pc, #792]	; (8004af8 <oppstartsverdier+0x328>)
 80047de:	6063      	str	r3, [r4, #4]
	param.demping.hiv = 1.0;
 80047e0:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 80047e4:	edc4 8a00 	vstr	s17, [r4]
	param.demping.rull = 1.0;
 80047e8:	edc4 8a02 	vstr	s17, [r4, #8]
	param.demping.stamp = 1.0;
 80047ec:	edc4 8a03 	vstr	s17, [r4, #12]
	param.demping.klype = 0.35;
 80047f0:	4bc2      	ldr	r3, [pc, #776]	; (8004afc <oppstartsverdier+0x32c>)
 80047f2:	61a3      	str	r3, [r4, #24]
	param.demping.vri = 0.25;
 80047f4:	eeb5 aa00 	vmov.f32	s20, #80	; 0x3e800000  0.250
 80047f8:	ed84 aa05 	vstr	s20, [r4, #20]
	param.demping.teleskop = 0.3;
 80047fc:	4bc0      	ldr	r3, [pc, #768]	; (8004b00 <oppstartsverdier+0x330>)
 80047fe:	6123      	str	r3, [r4, #16]
	param.demping.pfa = 0.95;
 8004800:	f8df 83c0 	ldr.w	r8, [pc, #960]	; 8004bc4 <oppstartsverdier+0x3f4>
 8004804:	f8c4 801c 	str.w	r8, [r4, #28]
	param.demping.pfb = 1 - param.demping.pfa;
 8004808:	f8df e3bc 	ldr.w	lr, [pc, #956]	; 8004bc8 <oppstartsverdier+0x3f8>
 800480c:	f8c4 e020 	str.w	lr, [r4, #32]
	gain = 4;
 8004810:	4bbc      	ldr	r3, [pc, #752]	; (8004b04 <oppstartsverdier+0x334>)
 8004812:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 8004816:	601a      	str	r2, [r3, #0]
	styreretning = 0.0;
 8004818:	ed9f 8abb 	vldr	s16, [pc, #748]	; 8004b08 <oppstartsverdier+0x338>
 800481c:	4bbb      	ldr	r3, [pc, #748]	; (8004b0c <oppstartsverdier+0x33c>)
 800481e:	ed83 8a00 	vstr	s16, [r3]
	forrige_bryterstatus = 0;
 8004822:	2500      	movs	r5, #0
 8004824:	4bba      	ldr	r3, [pc, #744]	; (8004b10 <oppstartsverdier+0x340>)
 8004826:	701d      	strb	r5, [r3, #0]
	brytertrykk = 0;
 8004828:	4bba      	ldr	r3, [pc, #744]	; (8004b14 <oppstartsverdier+0x344>)
 800482a:	701d      	strb	r5, [r3, #0]
	float HR_rad[8] = {0, M_PI/4, M_PI/2, 3*M_PI/4, M_PI, -3*M_PI/4, -M_PI/2, -M_PI/4};
 800482c:	f8df c39c 	ldr.w	ip, [pc, #924]	; 8004bcc <oppstartsverdier+0x3fc>
 8004830:	ae66      	add	r6, sp, #408	; 0x198
 8004832:	4667      	mov	r7, ip
 8004834:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8004836:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8004838:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 800483c:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
	memcpy(&HR_kompass_rad, &HR_rad, sizeof(kompass));
 8004840:	4eb5      	ldr	r6, [pc, #724]	; (8004b18 <oppstartsverdier+0x348>)
 8004842:	af66      	add	r7, sp, #408	; 0x198
 8004844:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8004846:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8004848:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 800484c:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
	memcpy(&thruster_PWM, 		&oppstart_PWM, sizeof(thruster_sett));
 8004850:	4ab2      	ldr	r2, [pc, #712]	; (8004b1c <oppstartsverdier+0x34c>)
 8004852:	4bb3      	ldr	r3, [pc, #716]	; (8004b20 <oppstartsverdier+0x350>)
 8004854:	6819      	ldr	r1, [r3, #0]
 8004856:	685f      	ldr	r7, [r3, #4]
 8004858:	689e      	ldr	r6, [r3, #8]
 800485a:	68d8      	ldr	r0, [r3, #12]
 800485c:	6011      	str	r1, [r2, #0]
 800485e:	6057      	str	r7, [r2, #4]
 8004860:	6096      	str	r6, [r2, #8]
 8004862:	60d0      	str	r0, [r2, #12]
	memcpy(&manipulator_PWM, 	&oppstart_PWM, sizeof(manipulator_sett));
 8004864:	4aaf      	ldr	r2, [pc, #700]	; (8004b24 <oppstartsverdier+0x354>)
 8004866:	6011      	str	r1, [r2, #0]
 8004868:	889b      	ldrh	r3, [r3, #4]
 800486a:	8093      	strh	r3, [r2, #4]
	memset(&styrebidrag,0, sizeof(thruster_sett));
 800486c:	4bae      	ldr	r3, [pc, #696]	; (8004b28 <oppstartsverdier+0x358>)
 800486e:	601d      	str	r5, [r3, #0]
 8004870:	605d      	str	r5, [r3, #4]
 8004872:	609d      	str	r5, [r3, #8]
 8004874:	60dd      	str	r5, [r3, #12]
	memset(&totalbidrag,0, sizeof(thruster_sett));
 8004876:	4bad      	ldr	r3, [pc, #692]	; (8004b2c <oppstartsverdier+0x35c>)
 8004878:	601d      	str	r5, [r3, #0]
 800487a:	605d      	str	r5, [r3, #4]
 800487c:	609d      	str	r5, [r3, #8]
 800487e:	60dd      	str	r5, [r3, #12]
	memset(&stampbidrag,0, sizeof(thruster_sett));
 8004880:	4bab      	ldr	r3, [pc, #684]	; (8004b30 <oppstartsverdier+0x360>)
 8004882:	601d      	str	r5, [r3, #0]
 8004884:	605d      	str	r5, [r3, #4]
 8004886:	609d      	str	r5, [r3, #8]
 8004888:	60dd      	str	r5, [r3, #12]
	memset(&rullbidrag, 0, sizeof(thruster_sett));
 800488a:	4baa      	ldr	r3, [pc, #680]	; (8004b34 <oppstartsverdier+0x364>)
 800488c:	601d      	str	r5, [r3, #0]
 800488e:	605d      	str	r5, [r3, #4]
 8004890:	609d      	str	r5, [r3, #8]
 8004892:	60dd      	str	r5, [r3, #12]
	memset(&hivbidrag, 	0, sizeof(thruster_sett));
 8004894:	4ba8      	ldr	r3, [pc, #672]	; (8004b38 <oppstartsverdier+0x368>)
 8004896:	601d      	str	r5, [r3, #0]
 8004898:	605d      	str	r5, [r3, #4]
 800489a:	609d      	str	r5, [r3, #8]
 800489c:	60dd      	str	r5, [r3, #12]
	mk_modell.a = 0.0024;
 800489e:	4ba7      	ldr	r3, [pc, #668]	; (8004b3c <oppstartsverdier+0x36c>)
 80048a0:	4aa7      	ldr	r2, [pc, #668]	; (8004b40 <oppstartsverdier+0x370>)
 80048a2:	601a      	str	r2, [r3, #0]
	mk_modell.b = 1;
 80048a4:	edc3 8a01 	vstr	s17, [r3, #4]

	spid.yr = 0.0;
 80048a8:	4ba6      	ldr	r3, [pc, #664]	; (8004b44 <oppstartsverdier+0x374>)
 80048aa:	ed83 8a00 	vstr	s16, [r3]
	rpid.yr = 0.0;
 80048ae:	4ba6      	ldr	r3, [pc, #664]	; (8004b48 <oppstartsverdier+0x378>)
 80048b0:	ed83 8a00 	vstr	s16, [r3]
	hpid.yr = 0.0;
 80048b4:	4ba5      	ldr	r3, [pc, #660]	; (8004b4c <oppstartsverdier+0x37c>)
 80048b6:	ed83 8a00 	vstr	s16, [r3]

	param.hiv_pid.a = 0.85;
 80048ba:	4ba5      	ldr	r3, [pc, #660]	; (8004b50 <oppstartsverdier+0x380>)
 80048bc:	6663      	str	r3, [r4, #100]	; 0x64
	param.hiv_pid.b = 1-param.hiv_pid.a;
 80048be:	4ba5      	ldr	r3, [pc, #660]	; (8004b54 <oppstartsverdier+0x384>)
 80048c0:	66a3      	str	r3, [r4, #104]	; 0x68
	param.hiv_pid.dz = 0;
 80048c2:	ed84 8a18 	vstr	s16, [r4, #96]	; 0x60
	param.hiv_pid.kp = 1.75;
 80048c6:	4ba4      	ldr	r3, [pc, #656]	; (8004b58 <oppstartsverdier+0x388>)
 80048c8:	6523      	str	r3, [r4, #80]	; 0x50
	param.hiv_pid.ki = 0.1;
 80048ca:	eddf baa4 	vldr	s23, [pc, #656]	; 8004b5c <oppstartsverdier+0x38c>
 80048ce:	edc4 ba15 	vstr	s23, [r4, #84]	; 0x54
	param.hiv_pid.kd = 0.64;
 80048d2:	4ba3      	ldr	r3, [pc, #652]	; (8004b60 <oppstartsverdier+0x390>)
 80048d4:	65a3      	str	r3, [r4, #88]	; 0x58
	param.hiv_pid.ts = 0.05;
 80048d6:	4ba3      	ldr	r3, [pc, #652]	; (8004b64 <oppstartsverdier+0x394>)
 80048d8:	65e3      	str	r3, [r4, #92]	; 0x5c
	param.hiv_pid.ui_min = -0.8;
 80048da:	4aa3      	ldr	r2, [pc, #652]	; (8004b68 <oppstartsverdier+0x398>)
 80048dc:	6722      	str	r2, [r4, #112]	; 0x70
	param.hiv_pid.ui_maks = 0.8;
 80048de:	ed9f baa3 	vldr	s22, [pc, #652]	; 8004b6c <oppstartsverdier+0x39c>
 80048e2:	ed84 ba1b 	vstr	s22, [r4, #108]	; 0x6c
	param.hiv_pid.ut_min = -0.8;
 80048e6:	67a2      	str	r2, [r4, #120]	; 0x78
	param.hiv_pid.ut_maks = 0.8;
 80048e8:	ed84 ba1d 	vstr	s22, [r4, #116]	; 0x74

	param.rull_pid.a = 0.95;
 80048ec:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
	param.rull_pid.b = 1-param.rull_pid.a;
 80048f0:	f8c4 e03c 	str.w	lr, [r4, #60]	; 0x3c
	param.rull_pid.dz = 0;
 80048f4:	ed84 8a0d 	vstr	s16, [r4, #52]	; 0x34
	param.rull_pid.kp = 0.011;
 80048f8:	4a9d      	ldr	r2, [pc, #628]	; (8004b70 <oppstartsverdier+0x3a0>)
 80048fa:	6262      	str	r2, [r4, #36]	; 0x24
	param.rull_pid.ki = 0.004; // 0.287;
 80048fc:	4a9d      	ldr	r2, [pc, #628]	; (8004b74 <oppstartsverdier+0x3a4>)
 80048fe:	62a2      	str	r2, [r4, #40]	; 0x28
	param.rull_pid.kd = 0.0087;
 8004900:	4a9d      	ldr	r2, [pc, #628]	; (8004b78 <oppstartsverdier+0x3a8>)
 8004902:	62e2      	str	r2, [r4, #44]	; 0x2c
	param.rull_pid.ts = 0.05;
 8004904:	6323      	str	r3, [r4, #48]	; 0x30
	param.rull_pid.ui_min = -0.5;
 8004906:	eefe aa00 	vmov.f32	s21, #224	; 0xbf000000 -0.5
 800490a:	edc4 aa11 	vstr	s21, [r4, #68]	; 0x44
	param.rull_pid.ui_maks = 0.5;
 800490e:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8004912:	6422      	str	r2, [r4, #64]	; 0x40
	param.rull_pid.ut_min = -0.5;
 8004914:	edc4 aa13 	vstr	s21, [r4, #76]	; 0x4c
	param.rull_pid.ut_maks = 0.5;
 8004918:	64a2      	str	r2, [r4, #72]	; 0x48

	param.stamp_pid.a = 0.95;
 800491a:	f8c4 8090 	str.w	r8, [r4, #144]	; 0x90
	param.stamp_pid.b = 1-param.stamp_pid.a;
 800491e:	f8c4 e094 	str.w	lr, [r4, #148]	; 0x94
	param.stamp_pid.dz = 0;
 8004922:	ed84 8a23 	vstr	s16, [r4, #140]	; 0x8c
	param.stamp_pid.kp = 0.0255;
 8004926:	4895      	ldr	r0, [pc, #596]	; (8004b7c <oppstartsverdier+0x3ac>)
 8004928:	67e0      	str	r0, [r4, #124]	; 0x7c
	param.stamp_pid.ki = 0.008; //0.353;
 800492a:	4995      	ldr	r1, [pc, #596]	; (8004b80 <oppstartsverdier+0x3b0>)
 800492c:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
	param.stamp_pid.kd = 0.0211;
 8004930:	4a94      	ldr	r2, [pc, #592]	; (8004b84 <oppstartsverdier+0x3b4>)
 8004932:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
	param.stamp_pid.ts = 0.05;
 8004936:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
	param.stamp_pid.ui_min = -0.6;
 800493a:	4f93      	ldr	r7, [pc, #588]	; (8004b88 <oppstartsverdier+0x3b8>)
 800493c:	f8c4 709c 	str.w	r7, [r4, #156]	; 0x9c
	param.stamp_pid.ui_maks = 0.6;
 8004940:	4e92      	ldr	r6, [pc, #584]	; (8004b8c <oppstartsverdier+0x3bc>)
 8004942:	f8c4 6098 	str.w	r6, [r4, #152]	; 0x98
	param.stamp_pid.ut_min = -0.6;
 8004946:	f8c4 70a4 	str.w	r7, [r4, #164]	; 0xa4
	param.stamp_pid.ut_maks = 0.6;
 800494a:	f8c4 60a0 	str.w	r6, [r4, #160]	; 0xa0

	param.gir_pid.a = 0.95;
 800494e:	f8c4 80bc 	str.w	r8, [r4, #188]	; 0xbc
	param.gir_pid.b = 1-param.stamp_pid.a;
 8004952:	f8c4 e0c0 	str.w	lr, [r4, #192]	; 0xc0
	param.gir_pid.dz = 0;
 8004956:	ed84 8a2e 	vstr	s16, [r4, #184]	; 0xb8
	param.gir_pid.kp = 0.0255;
 800495a:	f8c4 00a8 	str.w	r0, [r4, #168]	; 0xa8
	param.gir_pid.ki = 0.008; //0.353;
 800495e:	f8c4 10ac 	str.w	r1, [r4, #172]	; 0xac
	param.gir_pid.kd = 0.0211;
 8004962:	f8c4 20b0 	str.w	r2, [r4, #176]	; 0xb0
	param.gir_pid.ts = 0.05;
 8004966:	f8c4 30b4 	str.w	r3, [r4, #180]	; 0xb4
	param.gir_pid.ui_min = -0.4;
 800496a:	4b89      	ldr	r3, [pc, #548]	; (8004b90 <oppstartsverdier+0x3c0>)
 800496c:	f8c4 30c8 	str.w	r3, [r4, #200]	; 0xc8
	param.gir_pid.ui_maks = 0.4;
 8004970:	eddf 9a88 	vldr	s19, [pc, #544]	; 8004b94 <oppstartsverdier+0x3c4>
 8004974:	edc4 9a31 	vstr	s19, [r4, #196]	; 0xc4
	param.gir_pid.ut_min = -0.4;
 8004978:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0
	param.gir_pid.ut_maks = 0.4;
 800497c:	edc4 9a33 	vstr	s19, [r4, #204]	; 0xcc


	// Master control:
	float matrixData[8 * 6] = {
 8004980:	22c0      	movs	r2, #192	; 0xc0
 8004982:	f10c 0120 	add.w	r1, ip, #32
 8004986:	a836      	add	r0, sp, #216	; 0xd8
 8004988:	f005 fab2 	bl	8009ef0 <memcpy>
	     0.0000, 	0.0000, 	0.2500, 	-0.8929, 	-1.0870, 	 0.0000,
	     0.0000, 	0.0000, 	0.2500, 	-0.8929, 	 1.0870, 	 0.0000,
	     0.0000, 	0.0000, 	0.2500, 	 0.8929, 	 1.0870, 	 0.0000,
	     0.0000, 	0.0000, 	0.2500, 	 0.8929, 	-1.0870,	 0.0000
	};
	assign_matrix_data(&Tmat, 8, 6, matrixData);
 800498c:	ab36      	add	r3, sp, #216	; 0xd8
 800498e:	2206      	movs	r2, #6
 8004990:	2108      	movs	r1, #8
 8004992:	4881      	ldr	r0, [pc, #516]	; (8004b98 <oppstartsverdier+0x3c8>)
 8004994:	f7fe ffc8 	bl	8003928 <assign_matrix_data>
	stdstep.step_start = 5000;
	stdstep.step_stop = 20000;
	stdstep.ref_rate = 0.025;
	stdstep.sine_trajectory = 0;

	memcpy(&heave_step.heave, &stdstep, sizeof(step_test));
 8004998:	4c80      	ldr	r4, [pc, #512]	; (8004b9c <oppstartsverdier+0x3cc>)
 800499a:	7225      	strb	r5, [r4, #8]
 800499c:	f241 3888 	movw	r8, #5000	; 0x1388
 80049a0:	f8c4 800c 	str.w	r8, [r4, #12]
 80049a4:	f644 6720 	movw	r7, #20000	; 0x4e20
 80049a8:	6127      	str	r7, [r4, #16]
 80049aa:	ed9f 9a7d 	vldr	s18, [pc, #500]	; 8004ba0 <oppstartsverdier+0x3d0>
 80049ae:	ed84 9a06 	vstr	s18, [r4, #24]
 80049b2:	ed84 8a07 	vstr	s16, [r4, #28]
 80049b6:	ed84 8a08 	vstr	s16, [r4, #32]
 80049ba:	ed84 8a09 	vstr	s16, [r4, #36]	; 0x24
 80049be:	ed84 8a0a 	vstr	s16, [r4, #40]	; 0x28
	memcpy(&heave_step.roll, &stdstep, sizeof(step_test));
 80049c2:	f884 502c 	strb.w	r5, [r4, #44]	; 0x2c
 80049c6:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
 80049ca:	6367      	str	r7, [r4, #52]	; 0x34
 80049cc:	ed84 9a0f 	vstr	s18, [r4, #60]	; 0x3c
 80049d0:	ed84 8a10 	vstr	s16, [r4, #64]	; 0x40
 80049d4:	ed84 8a11 	vstr	s16, [r4, #68]	; 0x44
 80049d8:	ed84 8a12 	vstr	s16, [r4, #72]	; 0x48
 80049dc:	ed84 8a13 	vstr	s16, [r4, #76]	; 0x4c
	memcpy(&heave_step.pitch, &stdstep, sizeof(step_test));
 80049e0:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
 80049e4:	f8c4 8054 	str.w	r8, [r4, #84]	; 0x54
 80049e8:	65a7      	str	r7, [r4, #88]	; 0x58
 80049ea:	ed84 9a18 	vstr	s18, [r4, #96]	; 0x60
 80049ee:	ed84 8a19 	vstr	s16, [r4, #100]	; 0x64
 80049f2:	ed84 8a1a 	vstr	s16, [r4, #104]	; 0x68
 80049f6:	ed84 8a1b 	vstr	s16, [r4, #108]	; 0x6c
 80049fa:	ed84 8a1c 	vstr	s16, [r4, #112]	; 0x70
	heave_step.test_length = 25000;
 80049fe:	f246 13a8 	movw	r3, #25000	; 0x61a8
 8004a02:	6063      	str	r3, [r4, #4]

	memcpy(&overlap_steps, &heave_step, sizeof(step_sequence));
 8004a04:	f8df 91c8 	ldr.w	r9, [pc, #456]	; 8004bd0 <oppstartsverdier+0x400>
 8004a08:	f04f 0ba4 	mov.w	fp, #164	; 0xa4
 8004a0c:	465a      	mov	r2, fp
 8004a0e:	4621      	mov	r1, r4
 8004a10:	4648      	mov	r0, r9
 8004a12:	f005 fa6d 	bl	8009ef0 <memcpy>
	memcpy(&sep_steps, &heave_step, sizeof(step_sequence));
 8004a16:	4e63      	ldr	r6, [pc, #396]	; (8004ba4 <oppstartsverdier+0x3d4>)
 8004a18:	465a      	mov	r2, fp
 8004a1a:	4621      	mov	r1, r4
 8004a1c:	4630      	mov	r0, r6
 8004a1e:	f005 fa67 	bl	8009ef0 <memcpy>
	memcpy(&roll_step, &heave_step, sizeof(step_sequence));
 8004a22:	465a      	mov	r2, fp
 8004a24:	4621      	mov	r1, r4
 8004a26:	4860      	ldr	r0, [pc, #384]	; (8004ba8 <oppstartsverdier+0x3d8>)
 8004a28:	f005 fa62 	bl	8009ef0 <memcpy>
	memcpy(&pitch_step, &heave_step, sizeof(step_sequence));
 8004a2c:	f8df a1a4 	ldr.w	sl, [pc, #420]	; 8004bd4 <oppstartsverdier+0x404>
 8004a30:	465a      	mov	r2, fp
 8004a32:	4621      	mov	r1, r4
 8004a34:	4650      	mov	r0, sl
 8004a36:	f005 fa5b 	bl	8009ef0 <memcpy>

	sep_steps.heave.step_size  		= heave_step.heave.step_size 		= -0.5;
 8004a3a:	edc4 aa05 	vstr	s21, [r4, #20]
 8004a3e:	edc6 aa05 	vstr	s21, [r6, #20]
	sep_steps.roll.step_size		= roll_step.roll.step_size 			= M_PI/12;
 8004a42:	4b5a      	ldr	r3, [pc, #360]	; (8004bac <oppstartsverdier+0x3dc>)
 8004a44:	4a58      	ldr	r2, [pc, #352]	; (8004ba8 <oppstartsverdier+0x3d8>)
 8004a46:	6393      	str	r3, [r2, #56]	; 0x38
 8004a48:	63b3      	str	r3, [r6, #56]	; 0x38
	sep_steps.pitch.step_size	 	= pitch_step.pitch.step_size 		= M_PI/12;
 8004a4a:	f8ca 305c 	str.w	r3, [sl, #92]	; 0x5c
 8004a4e:	65f3      	str	r3, [r6, #92]	; 0x5c

	sep_steps.roll.step_start 	= 35000;
 8004a50:	f648 03b8 	movw	r3, #35000	; 0x88b8
 8004a54:	6333      	str	r3, [r6, #48]	; 0x30
	sep_steps.roll.step_stop 	= 50000;
 8004a56:	f24c 3a50 	movw	sl, #50000	; 0xc350
 8004a5a:	f8c6 a034 	str.w	sl, [r6, #52]	; 0x34
	sep_steps.pitch.step_start 	= 65000;
 8004a5e:	f64f 53e8 	movw	r3, #65000	; 0xfde8
 8004a62:	6573      	str	r3, [r6, #84]	; 0x54
	sep_steps.pitch.step_stop 	= 80000;
 8004a64:	4b52      	ldr	r3, [pc, #328]	; (8004bb0 <oppstartsverdier+0x3e0>)
 8004a66:	65b3      	str	r3, [r6, #88]	; 0x58
	sep_steps.test_length 		= 95000;
 8004a68:	4b52      	ldr	r3, [pc, #328]	; (8004bb4 <oppstartsverdier+0x3e4>)
 8004a6a:	6073      	str	r3, [r6, #4]

	overlap_steps.roll.step_start 	= 8500;
 8004a6c:	f242 1334 	movw	r3, #8500	; 0x2134
 8004a70:	f8c9 3030 	str.w	r3, [r9, #48]	; 0x30
	overlap_steps.roll.step_stop 	= 18500;
 8004a74:	f644 0344 	movw	r3, #18500	; 0x4844
 8004a78:	f8c9 3034 	str.w	r3, [r9, #52]	; 0x34
	overlap_steps.pitch.step_start 	= 12000;
 8004a7c:	f642 63e0 	movw	r3, #12000	; 0x2ee0
 8004a80:	f8c9 3054 	str.w	r3, [r9, #84]	; 0x54
	overlap_steps.pitch.step_stop 	= 22000;
 8004a84:	f245 53f0 	movw	r3, #22000	; 0x55f0
 8004a88:	f8c9 3058 	str.w	r3, [r9, #88]	; 0x58
	overlap_steps.test_length 		= 30000;
 8004a8c:	f247 5330 	movw	r3, #30000	; 0x7530
 8004a90:	f8c9 3004 	str.w	r3, [r9, #4]
	stdstep.sine_trajectory = 1;
	stdstep.amp1 			= 0.25;
	stdstep.freq1 			= 2*M_PI/16;
	stdstep.amp2 			= 0.0; // 0.25;
	stdstep.freq2 			= 0.0; // 2*M_PI/8;
	memcpy(&sep_sine.heave, &stdstep, sizeof(step_test));
 8004a94:	4c48      	ldr	r4, [pc, #288]	; (8004bb8 <oppstartsverdier+0x3e8>)
 8004a96:	2201      	movs	r2, #1
 8004a98:	7222      	strb	r2, [r4, #8]
 8004a9a:	f8c4 800c 	str.w	r8, [r4, #12]
 8004a9e:	6127      	str	r7, [r4, #16]
 8004aa0:	ed84 9a06 	vstr	s18, [r4, #24]
 8004aa4:	4b45      	ldr	r3, [pc, #276]	; (8004bbc <oppstartsverdier+0x3ec>)
 8004aa6:	61e3      	str	r3, [r4, #28]
 8004aa8:	ed84 aa08 	vstr	s20, [r4, #32]
 8004aac:	ed84 8a09 	vstr	s16, [r4, #36]	; 0x24
 8004ab0:	ed84 8a0a 	vstr	s16, [r4, #40]	; 0x28
	memcpy(&sep_sine.roll, &stdstep, sizeof(step_test));
 8004ab4:	f884 202c 	strb.w	r2, [r4, #44]	; 0x2c
 8004ab8:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
 8004abc:	6367      	str	r7, [r4, #52]	; 0x34
 8004abe:	ed84 9a0f 	vstr	s18, [r4, #60]	; 0x3c
 8004ac2:	6423      	str	r3, [r4, #64]	; 0x40
 8004ac4:	ed84 aa11 	vstr	s20, [r4, #68]	; 0x44
 8004ac8:	ed84 8a12 	vstr	s16, [r4, #72]	; 0x48
 8004acc:	ed84 8a13 	vstr	s16, [r4, #76]	; 0x4c
	memcpy(&sep_sine.pitch, &stdstep, sizeof(step_test));
 8004ad0:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
 8004ad4:	f8c4 8054 	str.w	r8, [r4, #84]	; 0x54
 8004ad8:	65a7      	str	r7, [r4, #88]	; 0x58
 8004ada:	ed84 9a18 	vstr	s18, [r4, #96]	; 0x60
 8004ade:	6663      	str	r3, [r4, #100]	; 0x64
 8004ae0:	ed84 aa1a 	vstr	s20, [r4, #104]	; 0x68
 8004ae4:	ed84 8a1b 	vstr	s16, [r4, #108]	; 0x6c
 8004ae8:	ed84 8a1c 	vstr	s16, [r4, #112]	; 0x70
	memcpy(&overlap_sine, &sep_sine, sizeof(step_sequence));
 8004aec:	4e34      	ldr	r6, [pc, #208]	; (8004bc0 <oppstartsverdier+0x3f0>)
 8004aee:	465a      	mov	r2, fp
 8004af0:	4621      	mov	r1, r4
 8004af2:	e071      	b.n	8004bd8 <oppstartsverdier+0x408>
 8004af4:	200006ec 	.word	0x200006ec
 8004af8:	3f333333 	.word	0x3f333333
 8004afc:	3eb33333 	.word	0x3eb33333
 8004b00:	3e99999a 	.word	0x3e99999a
 8004b04:	2000025c 	.word	0x2000025c
 8004b08:	00000000 	.word	0x00000000
 8004b0c:	20000ca8 	.word	0x20000ca8
 8004b10:	20000258 	.word	0x20000258
 8004b14:	200001c4 	.word	0x200001c4
 8004b18:	200000c4 	.word	0x200000c4
 8004b1c:	20000d1c 	.word	0x20000d1c
 8004b20:	20000008 	.word	0x20000008
 8004b24:	20000534 	.word	0x20000534
 8004b28:	20000c60 	.word	0x20000c60
 8004b2c:	20000d34 	.word	0x20000d34
 8004b30:	20000c34 	.word	0x20000c34
 8004b34:	200009d0 	.word	0x200009d0
 8004b38:	200003dc 	.word	0x200003dc
 8004b3c:	20000544 	.word	0x20000544
 8004b40:	3b1d4952 	.word	0x3b1d4952
 8004b44:	20000c00 	.word	0x20000c00
 8004b48:	2000099c 	.word	0x2000099c
 8004b4c:	200003fc 	.word	0x200003fc
 8004b50:	3f59999a 	.word	0x3f59999a
 8004b54:	3e199998 	.word	0x3e199998
 8004b58:	3fe00000 	.word	0x3fe00000
 8004b5c:	3dcccccd 	.word	0x3dcccccd
 8004b60:	3f23d70a 	.word	0x3f23d70a
 8004b64:	3d4ccccd 	.word	0x3d4ccccd
 8004b68:	bf4ccccd 	.word	0xbf4ccccd
 8004b6c:	3f4ccccd 	.word	0x3f4ccccd
 8004b70:	3c343958 	.word	0x3c343958
 8004b74:	3b83126f 	.word	0x3b83126f
 8004b78:	3c0e8a72 	.word	0x3c0e8a72
 8004b7c:	3cd0e560 	.word	0x3cd0e560
 8004b80:	3c03126f 	.word	0x3c03126f
 8004b84:	3cacd9e8 	.word	0x3cacd9e8
 8004b88:	bf19999a 	.word	0xbf19999a
 8004b8c:	3f19999a 	.word	0x3f19999a
 8004b90:	becccccd 	.word	0xbecccccd
 8004b94:	3ecccccd 	.word	0x3ecccccd
 8004b98:	200000e4 	.word	0x200000e4
 8004b9c:	200002e8 	.word	0x200002e8
 8004ba0:	3ccccccd 	.word	0x3ccccccd
 8004ba4:	20000acc 	.word	0x20000acc
 8004ba8:	200008f8 	.word	0x200008f8
 8004bac:	3e860a92 	.word	0x3e860a92
 8004bb0:	00013880 	.word	0x00013880
 8004bb4:	00017318 	.word	0x00017318
 8004bb8:	20000a28 	.word	0x20000a28
 8004bbc:	3ec90fdb 	.word	0x3ec90fdb
 8004bc0:	200005a4 	.word	0x200005a4
 8004bc4:	3f733333 	.word	0x3f733333
 8004bc8:	3d4cccd0 	.word	0x3d4cccd0
 8004bcc:	0800b918 	.word	0x0800b918
 8004bd0:	20000648 	.word	0x20000648
 8004bd4:	20000850 	.word	0x20000850
 8004bd8:	4630      	mov	r0, r6
 8004bda:	f005 f989 	bl	8009ef0 <memcpy>
	sep_sine.heave.step_stop 	= 37000;
 8004bde:	f249 0388 	movw	r3, #37000	; 0x9088
 8004be2:	6123      	str	r3, [r4, #16]
	sep_sine.roll.amp1 			= M_PI/6;
 8004be4:	4b59      	ldr	r3, [pc, #356]	; (8004d4c <oppstartsverdier+0x57c>)
 8004be6:	6463      	str	r3, [r4, #68]	; 0x44
	sep_sine.roll.step_start 	= 40000;
 8004be8:	f649 4340 	movw	r3, #40000	; 0x9c40
 8004bec:	6323      	str	r3, [r4, #48]	; 0x30
	sep_sine.roll.step_stop 	= 72000;
 8004bee:	f503 43fa 	add.w	r3, r3, #32000	; 0x7d00
 8004bf2:	6363      	str	r3, [r4, #52]	; 0x34
	sep_sine.pitch.amp1 		= M_PI/4;
 8004bf4:	4b56      	ldr	r3, [pc, #344]	; (8004d50 <oppstartsverdier+0x580>)
 8004bf6:	66a3      	str	r3, [r4, #104]	; 0x68
	sep_sine.pitch.step_start 	= 75000;
 8004bf8:	4b56      	ldr	r3, [pc, #344]	; (8004d54 <oppstartsverdier+0x584>)
 8004bfa:	6563      	str	r3, [r4, #84]	; 0x54
	sep_sine.pitch.step_stop 	= 107000;
 8004bfc:	f503 43fa 	add.w	r3, r3, #32000	; 0x7d00
 8004c00:	65a3      	str	r3, [r4, #88]	; 0x58
	sep_sine.test_length 		= 110000;
 8004c02:	f603 33b8 	addw	r3, r3, #3000	; 0xbb8
 8004c06:	6063      	str	r3, [r4, #4]

	overlap_sine.heave.step_stop 	= 45000;
 8004c08:	f64a 73c8 	movw	r3, #45000	; 0xafc8
 8004c0c:	6133      	str	r3, [r6, #16]
	overlap_sine.roll.step_start 	= 10000;
 8004c0e:	f242 7210 	movw	r2, #10000	; 0x2710
 8004c12:	6332      	str	r2, [r6, #48]	; 0x30
	overlap_sine.roll.step_stop 	= 45000;
 8004c14:	6373      	str	r3, [r6, #52]	; 0x34
	overlap_sine.pitch.step_start 	= 15000;
 8004c16:	f643 2298 	movw	r2, #15000	; 0x3a98
 8004c1a:	6572      	str	r2, [r6, #84]	; 0x54
	overlap_sine.pitch.step_stop 	= 45000;
 8004c1c:	65b3      	str	r3, [r6, #88]	; 0x58
	overlap_sine.test_length 		= 50000;
 8004c1e:	f8c6 a004 	str.w	sl, [r6, #4]
	memset(&step_counter, 0, sizeof(step_timers));
 8004c22:	4b4d      	ldr	r3, [pc, #308]	; (8004d58 <oppstartsverdier+0x588>)
 8004c24:	601d      	str	r5, [r3, #0]
 8004c26:	605d      	str	r5, [r3, #4]
 8004c28:	609d      	str	r5, [r3, #8]
	pid.Kd = 450.0;
	pid.a = 0.1577;
	pid.b = 1-pid.a;
	pid.umax = 138;
	pid.umin = -138;
	memcpy(&pid_heave, 	&pid, sizeof(pid_struct));
 8004c2a:	4b4c      	ldr	r3, [pc, #304]	; (8004d5c <oppstartsverdier+0x58c>)
 8004c2c:	4a4c      	ldr	r2, [pc, #304]	; (8004d60 <oppstartsverdier+0x590>)
 8004c2e:	601a      	str	r2, [r3, #0]
 8004c30:	4a4c      	ldr	r2, [pc, #304]	; (8004d64 <oppstartsverdier+0x594>)
 8004c32:	605a      	str	r2, [r3, #4]
 8004c34:	4a4c      	ldr	r2, [pc, #304]	; (8004d68 <oppstartsverdier+0x598>)
 8004c36:	609a      	str	r2, [r3, #8]
 8004c38:	4a4c      	ldr	r2, [pc, #304]	; (8004d6c <oppstartsverdier+0x59c>)
 8004c3a:	60da      	str	r2, [r3, #12]
 8004c3c:	4a4c      	ldr	r2, [pc, #304]	; (8004d70 <oppstartsverdier+0x5a0>)
 8004c3e:	611a      	str	r2, [r3, #16]
 8004c40:	f8df 919c 	ldr.w	r9, [pc, #412]	; 8004de0 <oppstartsverdier+0x610>
 8004c44:	f8c3 9014 	str.w	r9, [r3, #20]
 8004c48:	f8df 8198 	ldr.w	r8, [pc, #408]	; 8004de4 <oppstartsverdier+0x614>
 8004c4c:	f8c3 8018 	str.w	r8, [r3, #24]
 8004c50:	2703      	movs	r7, #3
 8004c52:	f883 702c 	strb.w	r7, [r3, #44]	; 0x2c
	pid.Kd = 20.0;
	pid.a = 0.2544;
	pid.b = 1-pid.a;
//	pid.umax = 44;
//	pid.umin = -44;
	memcpy(&pid_roll, 	&pid, sizeof(pid_struct));
 8004c56:	4b47      	ldr	r3, [pc, #284]	; (8004d74 <oppstartsverdier+0x5a4>)
 8004c58:	f8df a18c 	ldr.w	sl, [pc, #396]	; 8004de8 <oppstartsverdier+0x618>
 8004c5c:	f8c3 a000 	str.w	sl, [r3]
 8004c60:	4a45      	ldr	r2, [pc, #276]	; (8004d78 <oppstartsverdier+0x5a8>)
 8004c62:	605a      	str	r2, [r3, #4]
 8004c64:	4a45      	ldr	r2, [pc, #276]	; (8004d7c <oppstartsverdier+0x5ac>)
 8004c66:	609a      	str	r2, [r3, #8]
 8004c68:	4945      	ldr	r1, [pc, #276]	; (8004d80 <oppstartsverdier+0x5b0>)
 8004c6a:	60d9      	str	r1, [r3, #12]
 8004c6c:	4945      	ldr	r1, [pc, #276]	; (8004d84 <oppstartsverdier+0x5b4>)
 8004c6e:	6119      	str	r1, [r3, #16]
 8004c70:	f8c3 9014 	str.w	r9, [r3, #20]
 8004c74:	f8c3 8018 	str.w	r8, [r3, #24]
 8004c78:	2604      	movs	r6, #4
 8004c7a:	f883 602c 	strb.w	r6, [r3, #44]	; 0x2c
	pid.Kd = 20.0;
	pid.a = 0.2301;
	pid.b = 1-pid.a;
//	pid.umax = 36;
//	pid.umin = -36;
	memcpy(&pid_pitch, 	&pid, sizeof(pid_struct));
 8004c7e:	4b42      	ldr	r3, [pc, #264]	; (8004d88 <oppstartsverdier+0x5b8>)
 8004c80:	f04f 4183 	mov.w	r1, #1098907648	; 0x41800000
 8004c84:	6019      	str	r1, [r3, #0]
 8004c86:	f8c3 a004 	str.w	sl, [r3, #4]
 8004c8a:	609a      	str	r2, [r3, #8]
 8004c8c:	4a3f      	ldr	r2, [pc, #252]	; (8004d8c <oppstartsverdier+0x5bc>)
 8004c8e:	60da      	str	r2, [r3, #12]
 8004c90:	4a3f      	ldr	r2, [pc, #252]	; (8004d90 <oppstartsverdier+0x5c0>)
 8004c92:	611a      	str	r2, [r3, #16]
 8004c94:	f8c3 9014 	str.w	r9, [r3, #20]
 8004c98:	f8c3 8018 	str.w	r8, [r3, #24]
 8004c9c:	2405      	movs	r4, #5
 8004c9e:	f883 402c 	strb.w	r4, [r3, #44]	; 0x2c
	// PID_phi =   [32.1605    , 29.7081   , 7.6614    , 0.2544];
	// PID_theta = [66.4578    , 43.9984   , 21.3043   , 0.2301];

	// Initialize lqr_struct instance 
	// float Kdata[6*9];
	float Kdata[6*9] =  {
 8004ca2:	22d8      	movs	r2, #216	; 0xd8
 8004ca4:	4629      	mov	r1, r5
 8004ca6:	4668      	mov	r0, sp
 8004ca8:	f005 f930 	bl	8009f0c <memset>
 8004cac:	4b39      	ldr	r3, [pc, #228]	; (8004d94 <oppstartsverdier+0x5c4>)
 8004cae:	9312      	str	r3, [sp, #72]	; 0x48
 8004cb0:	4b39      	ldr	r3, [pc, #228]	; (8004d98 <oppstartsverdier+0x5c8>)
 8004cb2:	9315      	str	r3, [sp, #84]	; 0x54
 8004cb4:	4b39      	ldr	r3, [pc, #228]	; (8004d9c <oppstartsverdier+0x5cc>)
 8004cb6:	9318      	str	r3, [sp, #96]	; 0x60
 8004cb8:	4b39      	ldr	r3, [pc, #228]	; (8004da0 <oppstartsverdier+0x5d0>)
 8004cba:	931c      	str	r3, [sp, #112]	; 0x70
 8004cbc:	4b39      	ldr	r3, [pc, #228]	; (8004da4 <oppstartsverdier+0x5d4>)
 8004cbe:	931f      	str	r3, [sp, #124]	; 0x7c
 8004cc0:	4a39      	ldr	r2, [pc, #228]	; (8004da8 <oppstartsverdier+0x5d8>)
 8004cc2:	9222      	str	r2, [sp, #136]	; 0x88
 8004cc4:	4a39      	ldr	r2, [pc, #228]	; (8004dac <oppstartsverdier+0x5dc>)
 8004cc6:	9226      	str	r2, [sp, #152]	; 0x98
 8004cc8:	9329      	str	r3, [sp, #164]	; 0xa4
 8004cca:	4b39      	ldr	r3, [pc, #228]	; (8004db0 <oppstartsverdier+0x5e0>)
 8004ccc:	932c      	str	r3, [sp, #176]	; 0xb0
		-321.0, 0, 0, -489.0, 0, 0, -42.0, 0, 0,
		0, -2.2, 0, 0, -9.0, 0, 0, -6.0, 0,
		0, 0, -3.2, 0, 0, -9.0, 0, 0, -5.8,
		0, 0, 0, 0, 0, 0, 0, 0, 0
	};
	assign_matrix_data(&lqr_reg.K, 6, 9, Kdata);
 8004cce:	466b      	mov	r3, sp
 8004cd0:	2209      	movs	r2, #9
 8004cd2:	2106      	movs	r1, #6
 8004cd4:	4837      	ldr	r0, [pc, #220]	; (8004db4 <oppstartsverdier+0x5e4>)
 8004cd6:	f7fe fe27 	bl	8003928 <assign_matrix_data>

	// Initialize smc_struct instance 
	// smc_struct smc;
	smc_heave.reg_state = 3;
 8004cda:	4b37      	ldr	r3, [pc, #220]	; (8004db8 <oppstartsverdier+0x5e8>)
 8004cdc:	f883 702c 	strb.w	r7, [r3, #44]	; 0x2c
	smc_heave.epsilon = 0.2;
 8004ce0:	4a36      	ldr	r2, [pc, #216]	; (8004dbc <oppstartsverdier+0x5ec>)
 8004ce2:	609a      	str	r2, [r3, #8]
	smc_heave.b0 = 36.0;
 8004ce4:	4a36      	ldr	r2, [pc, #216]	; (8004dc0 <oppstartsverdier+0x5f0>)
 8004ce6:	60da      	str	r2, [r3, #12]
	smc_heave.c1 = 1.6;
 8004ce8:	4a36      	ldr	r2, [pc, #216]	; (8004dc4 <oppstartsverdier+0x5f4>)
 8004cea:	601a      	str	r2, [r3, #0]
	smc_heave.c2 = 0.10;
 8004cec:	edc3 ba01 	vstr	s23, [r3, #4]
	smc_heave.umax = 138;
 8004cf0:	f8c3 9018 	str.w	r9, [r3, #24]
	smc_heave.umin = -138;
 8004cf4:	f8c3 8014 	str.w	r8, [r3, #20]
	smc_heave.g_inv = 124.1027;
 8004cf8:	4a33      	ldr	r2, [pc, #204]	; (8004dc8 <oppstartsverdier+0x5f8>)
 8004cfa:	611a      	str	r2, [r3, #16]
	// memcpy(&smc_heave, 	&smc, sizeof(smc_struct));
	
	smc_roll.reg_state = 4;
 8004cfc:	4b33      	ldr	r3, [pc, #204]	; (8004dcc <oppstartsverdier+0x5fc>)
 8004cfe:	f883 602c 	strb.w	r6, [r3, #44]	; 0x2c
	smc_roll.epsilon = 0.4;
 8004d02:	edc3 9a02 	vstr	s19, [r3, #8]
	smc_roll.b0 = 12.0;
 8004d06:	f8c3 a00c 	str.w	sl, [r3, #12]
	smc_roll.c1 = 1.0;
 8004d0a:	edc3 8a00 	vstr	s17, [r3]
	smc_roll.c2 = 0.8;
 8004d0e:	ed83 ba01 	vstr	s22, [r3, #4]
	smc_roll.umax = 138;//44;
 8004d12:	f8c3 9018 	str.w	r9, [r3, #24]
	smc_roll.umin = -138;//44;
 8004d16:	f8c3 8014 	str.w	r8, [r3, #20]
	smc_roll.g_inv = 1.0287;
 8004d1a:	4a2d      	ldr	r2, [pc, #180]	; (8004dd0 <oppstartsverdier+0x600>)
 8004d1c:	611a      	str	r2, [r3, #16]
	// memcpy(&smc_roll, 	&smc, sizeof(smc_struct));

	smc_pitch.reg_state = 5;
 8004d1e:	4b2d      	ldr	r3, [pc, #180]	; (8004dd4 <oppstartsverdier+0x604>)
 8004d20:	f883 402c 	strb.w	r4, [r3, #44]	; 0x2c
	smc_pitch.epsilon = 0.4;
 8004d24:	edc3 9a02 	vstr	s19, [r3, #8]
	smc_pitch.b0 = 15.0;
 8004d28:	4a2b      	ldr	r2, [pc, #172]	; (8004dd8 <oppstartsverdier+0x608>)
 8004d2a:	60da      	str	r2, [r3, #12]
	smc_pitch.c1 = 1.0;
 8004d2c:	edc3 8a00 	vstr	s17, [r3]
	smc_pitch.c2 = 1.0;
 8004d30:	edc3 8a01 	vstr	s17, [r3, #4]
	smc_pitch.umax = 138;//36;
 8004d34:	f8c3 9018 	str.w	r9, [r3, #24]
	smc_pitch.umin = -138;//36;
 8004d38:	f8c3 8014 	str.w	r8, [r3, #20]
	smc_pitch.g_inv = 2.1733;
 8004d3c:	4a27      	ldr	r2, [pc, #156]	; (8004ddc <oppstartsverdier+0x60c>)
 8004d3e:	611a      	str	r2, [r3, #16]
	// c2 =        [0, 0, 0.10, 0.53, 0.64,0];
	// [Minv_Ds, Minv_Dm, Minv_G, Binv]
	// Heave: [-0.2267, -1.417, 0, 124.1027]
	// Roll: [-3.154, -0.5218, -3.98, 1.0287]
	// Pitch: [-2.17, -0.7095, -1.884, 2.1733]
}
 8004d40:	b06f      	add	sp, #444	; 0x1bc
 8004d42:	ecbd 8b08 	vpop	{d8-d11}
 8004d46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d4a:	bf00      	nop
 8004d4c:	3f060a92 	.word	0x3f060a92
 8004d50:	3f490fdb 	.word	0x3f490fdb
 8004d54:	000124f8 	.word	0x000124f8
 8004d58:	20000c54 	.word	0x20000c54
 8004d5c:	200007c0 	.word	0x200007c0
 8004d60:	43f00000 	.word	0x43f00000
 8004d64:	41f00000 	.word	0x41f00000
 8004d68:	43e10000 	.word	0x43e10000
 8004d6c:	3e217c1c 	.word	0x3e217c1c
 8004d70:	3f57a0f9 	.word	0x3f57a0f9
 8004d74:	20000820 	.word	0x20000820
 8004d78:	41200000 	.word	0x41200000
 8004d7c:	41a00000 	.word	0x41a00000
 8004d80:	3e8240b8 	.word	0x3e8240b8
 8004d84:	3f3edfa4 	.word	0x3f3edfa4
 8004d88:	200007f0 	.word	0x200007f0
 8004d8c:	3e6b9f56 	.word	0x3e6b9f56
 8004d90:	3f45182a 	.word	0x3f45182a
 8004d94:	c3a08000 	.word	0xc3a08000
 8004d98:	c3f48000 	.word	0xc3f48000
 8004d9c:	c2280000 	.word	0xc2280000
 8004da0:	c00ccccd 	.word	0xc00ccccd
 8004da4:	c1100000 	.word	0xc1100000
 8004da8:	c0c00000 	.word	0xc0c00000
 8004dac:	c04ccccd 	.word	0xc04ccccd
 8004db0:	c0b9999a 	.word	0xc0b9999a
 8004db4:	2000051c 	.word	0x2000051c
 8004db8:	20000b70 	.word	0x20000b70
 8004dbc:	3e4ccccd 	.word	0x3e4ccccd
 8004dc0:	42100000 	.word	0x42100000
 8004dc4:	3fcccccd 	.word	0x3fcccccd
 8004dc8:	42f83495 	.word	0x42f83495
 8004dcc:	20000bd0 	.word	0x20000bd0
 8004dd0:	3f83ac71 	.word	0x3f83ac71
 8004dd4:	20000ba0 	.word	0x20000ba0
 8004dd8:	41700000 	.word	0x41700000
 8004ddc:	400b1759 	.word	0x400b1759
 8004de0:	430a0000 	.word	0x430a0000
 8004de4:	c30a0000 	.word	0xc30a0000
 8004de8:	41400000 	.word	0x41400000

08004dec <reset_pid_values>:

void reset_pid_values(pid_struct *pid){
	pid->e_old = 0;
 8004dec:	2300      	movs	r3, #0
 8004dee:	6203      	str	r3, [r0, #32]
	pid->i_old = 0;
 8004df0:	6243      	str	r3, [r0, #36]	; 0x24
	pid->fstate_old = 0;
 8004df2:	6283      	str	r3, [r0, #40]	; 0x28
}
 8004df4:	4770      	bx	lr

08004df6 <reset_lqr_values>:

void reset_lqr_values(lqr_struct *lqr){
	lqr->e_z_old = 0;
 8004df6:	2300      	movs	r3, #0
 8004df8:	6003      	str	r3, [r0, #0]
	lqr->e_phi_old = 0;
 8004dfa:	6043      	str	r3, [r0, #4]
	lqr->e_theta_old = 0;
 8004dfc:	6083      	str	r3, [r0, #8]
	lqr->e_z_int_old = 0;
 8004dfe:	60c3      	str	r3, [r0, #12]
	lqr->e_phi_int_old = 0;
 8004e00:	6103      	str	r3, [r0, #16]
	lqr->e_theta_int_old = 0;
 8004e02:	6143      	str	r3, [r0, #20]
}
 8004e04:	4770      	bx	lr

08004e06 <reset_smc_values>:

void reset_smc_values(smc_struct *smc){
	smc->ref_old = 0;
 8004e06:	2300      	movs	r3, #0
 8004e08:	61c3      	str	r3, [r0, #28]
	smc->ref_dt_old = 0;
 8004e0a:	6203      	str	r3, [r0, #32]
	smc->e_old = 0;
 8004e0c:	6243      	str	r3, [r0, #36]	; 0x24
	smc->e_int_old = 0;
 8004e0e:	6283      	str	r3, [r0, #40]	; 0x28
}
 8004e10:	4770      	bx	lr
	...

08004e14 <oppdater_parameter>:

void oppdater_parameter(uint32_t param_id, float parameter){
 8004e14:	b570      	push	{r4, r5, r6, lr}
 8004e16:	b082      	sub	sp, #8
	switch(param_id){
 8004e18:	3801      	subs	r0, #1
 8004e1a:	28be      	cmp	r0, #190	; 0xbe
 8004e1c:	f200 80e7 	bhi.w	8004fee <oppdater_parameter+0x1da>
 8004e20:	e8df f010 	tbh	[pc, r0, lsl #1]
 8004e24:	00c600bf 	.word	0x00c600bf
 8004e28:	010900e7 	.word	0x010900e7
 8004e2c:	01470128 	.word	0x01470128
 8004e30:	00e500e5 	.word	0x00e500e5
 8004e34:	016900e5 	.word	0x016900e5
 8004e38:	0171016d 	.word	0x0171016d
 8004e3c:	01790175 	.word	0x01790175
 8004e40:	0181017d 	.word	0x0181017d
 8004e44:	00e50185 	.word	0x00e50185
 8004e48:	00e500e5 	.word	0x00e500e5
 8004e4c:	00e500e5 	.word	0x00e500e5
 8004e50:	00e500e5 	.word	0x00e500e5
 8004e54:	00e500e5 	.word	0x00e500e5
 8004e58:	00e500e5 	.word	0x00e500e5
 8004e5c:	018f00e5 	.word	0x018f00e5
 8004e60:	01970193 	.word	0x01970193
 8004e64:	01a3019b 	.word	0x01a3019b
 8004e68:	01b301ab 	.word	0x01b301ab
 8004e6c:	00e500e5 	.word	0x00e500e5
 8004e70:	01bd00e5 	.word	0x01bd00e5
 8004e74:	01c501c1 	.word	0x01c501c1
 8004e78:	01d101c9 	.word	0x01d101c9
 8004e7c:	01dd01d9 	.word	0x01dd01d9
 8004e80:	00e500e5 	.word	0x00e500e5
 8004e84:	01e700e5 	.word	0x01e700e5
 8004e88:	01ef01eb 	.word	0x01ef01eb
 8004e8c:	01fb01f3 	.word	0x01fb01f3
 8004e90:	02240203 	.word	0x02240203
 8004e94:	00e500e5 	.word	0x00e500e5
 8004e98:	022e00e5 	.word	0x022e00e5
 8004e9c:	02360232 	.word	0x02360232
 8004ea0:	0242023a 	.word	0x0242023a
 8004ea4:	024e024a 	.word	0x024e024a
 8004ea8:	00e500e5 	.word	0x00e500e5
 8004eac:	00e500e5 	.word	0x00e500e5
 8004eb0:	00e500e5 	.word	0x00e500e5
 8004eb4:	00e500e5 	.word	0x00e500e5
 8004eb8:	00e500e5 	.word	0x00e500e5
 8004ebc:	00e500e5 	.word	0x00e500e5
 8004ec0:	025800e5 	.word	0x025800e5
 8004ec4:	00e500e5 	.word	0x00e500e5
 8004ec8:	00e500e5 	.word	0x00e500e5
 8004ecc:	00e500e5 	.word	0x00e500e5
 8004ed0:	00e500e5 	.word	0x00e500e5
 8004ed4:	026200e5 	.word	0x026200e5
 8004ed8:	00e50266 	.word	0x00e50266
 8004edc:	00e500e5 	.word	0x00e500e5
 8004ee0:	00e500e5 	.word	0x00e500e5
 8004ee4:	00e500e5 	.word	0x00e500e5
 8004ee8:	026a00e5 	.word	0x026a00e5
 8004eec:	00e500e5 	.word	0x00e500e5
 8004ef0:	00e500e5 	.word	0x00e500e5
 8004ef4:	00e500e5 	.word	0x00e500e5
 8004ef8:	00e500e5 	.word	0x00e500e5
 8004efc:	02a800e5 	.word	0x02a800e5
 8004f00:	02b002ac 	.word	0x02b002ac
 8004f04:	02b802b4 	.word	0x02b802b4
 8004f08:	00e502bc 	.word	0x00e502bc
 8004f0c:	00e500e5 	.word	0x00e500e5
 8004f10:	02c000e5 	.word	0x02c000e5
 8004f14:	00e500e5 	.word	0x00e500e5
 8004f18:	00e500e5 	.word	0x00e500e5
 8004f1c:	00e500e5 	.word	0x00e500e5
 8004f20:	00e500e5 	.word	0x00e500e5
 8004f24:	00e500e5 	.word	0x00e500e5
 8004f28:	031b0312 	.word	0x031b0312
 8004f2c:	032d0324 	.word	0x032d0324
 8004f30:	00e500e5 	.word	0x00e500e5
 8004f34:	00e500e5 	.word	0x00e500e5
 8004f38:	00e500e5 	.word	0x00e500e5
 8004f3c:	033f0336 	.word	0x033f0336
 8004f40:	03510348 	.word	0x03510348
 8004f44:	00e500e5 	.word	0x00e500e5
 8004f48:	00e500e5 	.word	0x00e500e5
 8004f4c:	00e500e5 	.word	0x00e500e5
 8004f50:	0396035a 	.word	0x0396035a
 8004f54:	03a8039f 	.word	0x03a8039f
 8004f58:	00e500e5 	.word	0x00e500e5
 8004f5c:	00e500e5 	.word	0x00e500e5
 8004f60:	00e500e5 	.word	0x00e500e5
 8004f64:	00e500e5 	.word	0x00e500e5
 8004f68:	00e500e5 	.word	0x00e500e5
 8004f6c:	00e500e5 	.word	0x00e500e5
 8004f70:	00e500e5 	.word	0x00e500e5
 8004f74:	00e500e5 	.word	0x00e500e5
 8004f78:	00e500e5 	.word	0x00e500e5
 8004f7c:	00e500e5 	.word	0x00e500e5
 8004f80:	00e500e5 	.word	0x00e500e5
 8004f84:	00e500e5 	.word	0x00e500e5
 8004f88:	00e500e5 	.word	0x00e500e5
 8004f8c:	00e500e5 	.word	0x00e500e5
 8004f90:	00e500e5 	.word	0x00e500e5
 8004f94:	00e500e5 	.word	0x00e500e5
 8004f98:	00e500e5 	.word	0x00e500e5
 8004f9c:	03b100e5 	.word	0x03b100e5
 8004fa0:	03b5      	.short	0x03b5
	case 1:
		if(!esc_reset){
 8004fa2:	4ba4      	ldr	r3, [pc, #656]	; (8005234 <oppdater_parameter+0x420>)
 8004fa4:	781b      	ldrb	r3, [r3, #0]
 8004fa6:	bb13      	cbnz	r3, 8004fee <oppdater_parameter+0x1da>
			esc_reset = 1;
 8004fa8:	4ba2      	ldr	r3, [pc, #648]	; (8005234 <oppdater_parameter+0x420>)
 8004faa:	2201      	movs	r2, #1
 8004fac:	701a      	strb	r2, [r3, #0]
 8004fae:	e01e      	b.n	8004fee <oppdater_parameter+0x1da>
		}
		break;
	case 2:
		flagg.hpid = flagg.rpid = flagg.spid = flagg.gpid = flagg.hiv_pause = flagg.gir_pause = flagg.rull_pause = flagg.stamp_pause = 0;
 8004fb0:	4ba1      	ldr	r3, [pc, #644]	; (8005238 <oppdater_parameter+0x424>)
 8004fb2:	2400      	movs	r4, #0
 8004fb4:	70dc      	strb	r4, [r3, #3]
 8004fb6:	709c      	strb	r4, [r3, #2]
 8004fb8:	711c      	strb	r4, [r3, #4]
 8004fba:	705c      	strb	r4, [r3, #1]
 8004fbc:	721c      	strb	r4, [r3, #8]
 8004fbe:	715c      	strb	r4, [r3, #5]
 8004fc0:	719c      	strb	r4, [r3, #6]
 8004fc2:	71dc      	strb	r4, [r3, #7]
		memset(&hivbidrag, 0, sizeof(thruster_sett_float));
 8004fc4:	2520      	movs	r5, #32
 8004fc6:	462a      	mov	r2, r5
 8004fc8:	4621      	mov	r1, r4
 8004fca:	489c      	ldr	r0, [pc, #624]	; (800523c <oppdater_parameter+0x428>)
 8004fcc:	f004 ff9e 	bl	8009f0c <memset>
		memset(&rullbidrag, 0, sizeof(thruster_sett_float));
 8004fd0:	462a      	mov	r2, r5
 8004fd2:	4621      	mov	r1, r4
 8004fd4:	489a      	ldr	r0, [pc, #616]	; (8005240 <oppdater_parameter+0x42c>)
 8004fd6:	f004 ff99 	bl	8009f0c <memset>
		memset(&stampbidrag, 0, sizeof(thruster_sett_float));
 8004fda:	462a      	mov	r2, r5
 8004fdc:	4621      	mov	r1, r4
 8004fde:	4899      	ldr	r0, [pc, #612]	; (8005244 <oppdater_parameter+0x430>)
 8004fe0:	f004 ff94 	bl	8009f0c <memset>
		memset(&girbidrag, 0, sizeof(thruster_sett_float));
 8004fe4:	462a      	mov	r2, r5
 8004fe6:	4621      	mov	r1, r4
 8004fe8:	4897      	ldr	r0, [pc, #604]	; (8005248 <oppdater_parameter+0x434>)
 8004fea:	f004 ff8f 	bl	8009f0c <memset>
		break;
	case 191:
		test_thrustere = 0;
		break;
	}
}
 8004fee:	b002      	add	sp, #8
 8004ff0:	bd70      	pop	{r4, r5, r6, pc}
		if(flagg.hiv_pause){flagg.hiv_pause = 0;}
 8004ff2:	4b91      	ldr	r3, [pc, #580]	; (8005238 <oppdater_parameter+0x424>)
 8004ff4:	785b      	ldrb	r3, [r3, #1]
 8004ff6:	b1bb      	cbz	r3, 8005028 <oppdater_parameter+0x214>
 8004ff8:	4b8f      	ldr	r3, [pc, #572]	; (8005238 <oppdater_parameter+0x424>)
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	705a      	strb	r2, [r3, #1]
		if(!flagg.hpid){memcpy(&hivbidrag, &null8, sizeof(thruster_sett_float));}
 8004ffe:	4b8e      	ldr	r3, [pc, #568]	; (8005238 <oppdater_parameter+0x424>)
 8005000:	79db      	ldrb	r3, [r3, #7]
 8005002:	b93b      	cbnz	r3, 8005014 <oppdater_parameter+0x200>
 8005004:	4c8d      	ldr	r4, [pc, #564]	; (800523c <oppdater_parameter+0x428>)
 8005006:	4d91      	ldr	r5, [pc, #580]	; (800524c <oppdater_parameter+0x438>)
 8005008:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800500a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800500c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8005010:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		hpid.yr = hiv_m;
 8005014:	4b8e      	ldr	r3, [pc, #568]	; (8005250 <oppdater_parameter+0x43c>)
 8005016:	681a      	ldr	r2, [r3, #0]
 8005018:	4b8e      	ldr	r3, [pc, #568]	; (8005254 <oppdater_parameter+0x440>)
 800501a:	601a      	str	r2, [r3, #0]
		hpid.es = hpid.fbfs = hpid.uds = hpid.uis = 0;
 800501c:	2200      	movs	r2, #0
 800501e:	615a      	str	r2, [r3, #20]
 8005020:	61da      	str	r2, [r3, #28]
 8005022:	625a      	str	r2, [r3, #36]	; 0x24
 8005024:	609a      	str	r2, [r3, #8]
		break;
 8005026:	e7e2      	b.n	8004fee <oppdater_parameter+0x1da>
		else{flagg.hpid = !flagg.hpid;}
 8005028:	4a83      	ldr	r2, [pc, #524]	; (8005238 <oppdater_parameter+0x424>)
 800502a:	79d3      	ldrb	r3, [r2, #7]
 800502c:	fab3 f383 	clz	r3, r3
 8005030:	095b      	lsrs	r3, r3, #5
 8005032:	71d3      	strb	r3, [r2, #7]
 8005034:	e7e3      	b.n	8004ffe <oppdater_parameter+0x1ea>
		if(flagg.rull_pause){flagg.rull_pause = 0;}
 8005036:	4b80      	ldr	r3, [pc, #512]	; (8005238 <oppdater_parameter+0x424>)
 8005038:	789b      	ldrb	r3, [r3, #2]
 800503a:	b1a3      	cbz	r3, 8005066 <oppdater_parameter+0x252>
 800503c:	4b7e      	ldr	r3, [pc, #504]	; (8005238 <oppdater_parameter+0x424>)
 800503e:	2200      	movs	r2, #0
 8005040:	709a      	strb	r2, [r3, #2]
		if(!flagg.rpid){memcpy(&rullbidrag, &null8, sizeof(thruster_sett_float));}
 8005042:	4b7d      	ldr	r3, [pc, #500]	; (8005238 <oppdater_parameter+0x424>)
 8005044:	799b      	ldrb	r3, [r3, #6]
 8005046:	b93b      	cbnz	r3, 8005058 <oppdater_parameter+0x244>
 8005048:	4c7d      	ldr	r4, [pc, #500]	; (8005240 <oppdater_parameter+0x42c>)
 800504a:	4d80      	ldr	r5, [pc, #512]	; (800524c <oppdater_parameter+0x438>)
 800504c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800504e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005050:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8005054:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		rpid.es = rpid.fbfs = rpid.uds = rpid.uis = 0;
 8005058:	4b7f      	ldr	r3, [pc, #508]	; (8005258 <oppdater_parameter+0x444>)
 800505a:	2200      	movs	r2, #0
 800505c:	615a      	str	r2, [r3, #20]
 800505e:	61da      	str	r2, [r3, #28]
 8005060:	625a      	str	r2, [r3, #36]	; 0x24
 8005062:	609a      	str	r2, [r3, #8]
		break;
 8005064:	e7c3      	b.n	8004fee <oppdater_parameter+0x1da>
		else{flagg.rpid = !flagg.rpid;}
 8005066:	4a74      	ldr	r2, [pc, #464]	; (8005238 <oppdater_parameter+0x424>)
 8005068:	7993      	ldrb	r3, [r2, #6]
 800506a:	fab3 f383 	clz	r3, r3
 800506e:	095b      	lsrs	r3, r3, #5
 8005070:	7193      	strb	r3, [r2, #6]
 8005072:	e7e6      	b.n	8005042 <oppdater_parameter+0x22e>
		if(flagg.stamp_pause){flagg.stamp_pause = 0;}
 8005074:	4b70      	ldr	r3, [pc, #448]	; (8005238 <oppdater_parameter+0x424>)
 8005076:	78db      	ldrb	r3, [r3, #3]
 8005078:	b1a3      	cbz	r3, 80050a4 <oppdater_parameter+0x290>
 800507a:	4b6f      	ldr	r3, [pc, #444]	; (8005238 <oppdater_parameter+0x424>)
 800507c:	2200      	movs	r2, #0
 800507e:	70da      	strb	r2, [r3, #3]
		if(!flagg.spid){memcpy(&stampbidrag, &null8, sizeof(thruster_sett_float));}
 8005080:	4b6d      	ldr	r3, [pc, #436]	; (8005238 <oppdater_parameter+0x424>)
 8005082:	795b      	ldrb	r3, [r3, #5]
 8005084:	b93b      	cbnz	r3, 8005096 <oppdater_parameter+0x282>
 8005086:	4c6f      	ldr	r4, [pc, #444]	; (8005244 <oppdater_parameter+0x430>)
 8005088:	4d70      	ldr	r5, [pc, #448]	; (800524c <oppdater_parameter+0x438>)
 800508a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800508c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800508e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8005092:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		spid.es = spid.fbfs = spid.uds = spid.uis = 0;
 8005096:	4b71      	ldr	r3, [pc, #452]	; (800525c <oppdater_parameter+0x448>)
 8005098:	2200      	movs	r2, #0
 800509a:	615a      	str	r2, [r3, #20]
 800509c:	61da      	str	r2, [r3, #28]
 800509e:	625a      	str	r2, [r3, #36]	; 0x24
 80050a0:	609a      	str	r2, [r3, #8]
		break;
 80050a2:	e7a4      	b.n	8004fee <oppdater_parameter+0x1da>
		else{flagg.spid = !flagg.spid;}
 80050a4:	4a64      	ldr	r2, [pc, #400]	; (8005238 <oppdater_parameter+0x424>)
 80050a6:	7953      	ldrb	r3, [r2, #5]
 80050a8:	fab3 f383 	clz	r3, r3
 80050ac:	095b      	lsrs	r3, r3, #5
 80050ae:	7153      	strb	r3, [r2, #5]
 80050b0:	e7e6      	b.n	8005080 <oppdater_parameter+0x26c>
		if(flagg.gir_pause){flagg.gir_pause = 0;}
 80050b2:	4b61      	ldr	r3, [pc, #388]	; (8005238 <oppdater_parameter+0x424>)
 80050b4:	791b      	ldrb	r3, [r3, #4]
 80050b6:	b1bb      	cbz	r3, 80050e8 <oppdater_parameter+0x2d4>
 80050b8:	4b5f      	ldr	r3, [pc, #380]	; (8005238 <oppdater_parameter+0x424>)
 80050ba:	2200      	movs	r2, #0
 80050bc:	711a      	strb	r2, [r3, #4]
		if(!flagg.gpid){memcpy(&girbidrag, &null8, sizeof(thruster_sett_float));}
 80050be:	4b5e      	ldr	r3, [pc, #376]	; (8005238 <oppdater_parameter+0x424>)
 80050c0:	7a1b      	ldrb	r3, [r3, #8]
 80050c2:	b93b      	cbnz	r3, 80050d4 <oppdater_parameter+0x2c0>
 80050c4:	4c60      	ldr	r4, [pc, #384]	; (8005248 <oppdater_parameter+0x434>)
 80050c6:	4d61      	ldr	r5, [pc, #388]	; (800524c <oppdater_parameter+0x438>)
 80050c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80050ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80050cc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80050d0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		gpid.yr = gir_m;
 80050d4:	4b62      	ldr	r3, [pc, #392]	; (8005260 <oppdater_parameter+0x44c>)
 80050d6:	681a      	ldr	r2, [r3, #0]
 80050d8:	4b62      	ldr	r3, [pc, #392]	; (8005264 <oppdater_parameter+0x450>)
 80050da:	601a      	str	r2, [r3, #0]
		gpid.es = gpid.fbfs = gpid.uds = gpid.uis = 0;
 80050dc:	2200      	movs	r2, #0
 80050de:	615a      	str	r2, [r3, #20]
 80050e0:	61da      	str	r2, [r3, #28]
 80050e2:	625a      	str	r2, [r3, #36]	; 0x24
 80050e4:	609a      	str	r2, [r3, #8]
		break;
 80050e6:	e782      	b.n	8004fee <oppdater_parameter+0x1da>
		else{flagg.gpid = !flagg.gpid;}
 80050e8:	4a53      	ldr	r2, [pc, #332]	; (8005238 <oppdater_parameter+0x424>)
 80050ea:	7a13      	ldrb	r3, [r2, #8]
 80050ec:	fab3 f383 	clz	r3, r3
 80050f0:	095b      	lsrs	r3, r3, #5
 80050f2:	7213      	strb	r3, [r2, #8]
 80050f4:	e7e3      	b.n	80050be <oppdater_parameter+0x2aa>
		param.demping.gir = (float) parameter;			break;
 80050f6:	4b5c      	ldr	r3, [pc, #368]	; (8005268 <oppdater_parameter+0x454>)
 80050f8:	ed83 0a01 	vstr	s0, [r3, #4]
 80050fc:	e777      	b.n	8004fee <oppdater_parameter+0x1da>
		param.demping.hiv = (float) parameter;			break;
 80050fe:	4b5a      	ldr	r3, [pc, #360]	; (8005268 <oppdater_parameter+0x454>)
 8005100:	ed83 0a00 	vstr	s0, [r3]
 8005104:	e773      	b.n	8004fee <oppdater_parameter+0x1da>
		param.demping.rull = (float) parameter;			break;
 8005106:	4b58      	ldr	r3, [pc, #352]	; (8005268 <oppdater_parameter+0x454>)
 8005108:	ed83 0a02 	vstr	s0, [r3, #8]
 800510c:	e76f      	b.n	8004fee <oppdater_parameter+0x1da>
		param.demping.stamp = (float) parameter;		break;
 800510e:	4b56      	ldr	r3, [pc, #344]	; (8005268 <oppdater_parameter+0x454>)
 8005110:	ed83 0a03 	vstr	s0, [r3, #12]
 8005114:	e76b      	b.n	8004fee <oppdater_parameter+0x1da>
		param.demping.teleskop = (float) parameter;		break;
 8005116:	4b54      	ldr	r3, [pc, #336]	; (8005268 <oppdater_parameter+0x454>)
 8005118:	ed83 0a04 	vstr	s0, [r3, #16]
 800511c:	e767      	b.n	8004fee <oppdater_parameter+0x1da>
		param.demping.vri = (float) parameter;			break;
 800511e:	4b52      	ldr	r3, [pc, #328]	; (8005268 <oppdater_parameter+0x454>)
 8005120:	ed83 0a05 	vstr	s0, [r3, #20]
 8005124:	e763      	b.n	8004fee <oppdater_parameter+0x1da>
		param.demping.klype = (float) parameter;		break;
 8005126:	4b50      	ldr	r3, [pc, #320]	; (8005268 <oppdater_parameter+0x454>)
 8005128:	ed83 0a06 	vstr	s0, [r3, #24]
 800512c:	e75f      	b.n	8004fee <oppdater_parameter+0x1da>
		param.demping.pfa = (float) parameter;
 800512e:	4b4e      	ldr	r3, [pc, #312]	; (8005268 <oppdater_parameter+0x454>)
 8005130:	ed83 0a07 	vstr	s0, [r3, #28]
		param.demping.pfb = 1 - (float) parameter;		break;
 8005134:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8005138:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800513c:	ed83 0a08 	vstr	s0, [r3, #32]
 8005140:	e755      	b.n	8004fee <oppdater_parameter+0x1da>
		param.hiv_pid.kp = (float) parameter;			break;
 8005142:	4b49      	ldr	r3, [pc, #292]	; (8005268 <oppdater_parameter+0x454>)
 8005144:	ed83 0a14 	vstr	s0, [r3, #80]	; 0x50
 8005148:	e751      	b.n	8004fee <oppdater_parameter+0x1da>
		param.hiv_pid.ki = (float) parameter;			break;
 800514a:	4b47      	ldr	r3, [pc, #284]	; (8005268 <oppdater_parameter+0x454>)
 800514c:	ed83 0a15 	vstr	s0, [r3, #84]	; 0x54
 8005150:	e74d      	b.n	8004fee <oppdater_parameter+0x1da>
		param.hiv_pid.kd = (float) parameter;			break;
 8005152:	4b45      	ldr	r3, [pc, #276]	; (8005268 <oppdater_parameter+0x454>)
 8005154:	ed83 0a16 	vstr	s0, [r3, #88]	; 0x58
 8005158:	e749      	b.n	8004fee <oppdater_parameter+0x1da>
		param.hiv_pid.ui_min = (float) -parameter;				// begrensning av kg pådrag pr thruster
 800515a:	4b43      	ldr	r3, [pc, #268]	; (8005268 <oppdater_parameter+0x454>)
 800515c:	eef1 7a40 	vneg.f32	s15, s0
 8005160:	edc3 7a1c 	vstr	s15, [r3, #112]	; 0x70
		param.hiv_pid.ui_maks = (float) parameter;		break;
 8005164:	ed83 0a1b 	vstr	s0, [r3, #108]	; 0x6c
 8005168:	e741      	b.n	8004fee <oppdater_parameter+0x1da>
		param.hiv_pid.ut_min = (float) -parameter;				// begrensning av kg pådrag pr thruster
 800516a:	4b3f      	ldr	r3, [pc, #252]	; (8005268 <oppdater_parameter+0x454>)
 800516c:	eef1 7a40 	vneg.f32	s15, s0
 8005170:	edc3 7a1e 	vstr	s15, [r3, #120]	; 0x78
		param.hiv_pid.ut_maks = (float) parameter;		break;
 8005174:	ed83 0a1d 	vstr	s0, [r3, #116]	; 0x74
 8005178:	e739      	b.n	8004fee <oppdater_parameter+0x1da>
		hpid.yr += (float) parameter;					break; 	// dybdeendring i meter
 800517a:	4b36      	ldr	r3, [pc, #216]	; (8005254 <oppdater_parameter+0x440>)
 800517c:	edd3 7a00 	vldr	s15, [r3]
 8005180:	ee37 0a80 	vadd.f32	s0, s15, s0
 8005184:	ed83 0a00 	vstr	s0, [r3]
 8005188:	e731      	b.n	8004fee <oppdater_parameter+0x1da>
		param.hiv_pid.a = parameter;							// filterparameter for derivatorledd
 800518a:	4b37      	ldr	r3, [pc, #220]	; (8005268 <oppdater_parameter+0x454>)
 800518c:	ed83 0a19 	vstr	s0, [r3, #100]	; 0x64
		param.hiv_pid.b = 1-param.hiv_pid.a;			break;
 8005190:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8005194:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8005198:	ed83 0a1a 	vstr	s0, [r3, #104]	; 0x68
 800519c:	e727      	b.n	8004fee <oppdater_parameter+0x1da>
		param.rull_pid.kp = (float) parameter;			break;
 800519e:	4b32      	ldr	r3, [pc, #200]	; (8005268 <oppdater_parameter+0x454>)
 80051a0:	ed83 0a09 	vstr	s0, [r3, #36]	; 0x24
 80051a4:	e723      	b.n	8004fee <oppdater_parameter+0x1da>
		param.rull_pid.ki = (float) parameter;			break;
 80051a6:	4b30      	ldr	r3, [pc, #192]	; (8005268 <oppdater_parameter+0x454>)
 80051a8:	ed83 0a0a 	vstr	s0, [r3, #40]	; 0x28
 80051ac:	e71f      	b.n	8004fee <oppdater_parameter+0x1da>
		param.rull_pid.kd = (float) parameter;			break;
 80051ae:	4b2e      	ldr	r3, [pc, #184]	; (8005268 <oppdater_parameter+0x454>)
 80051b0:	ed83 0a0b 	vstr	s0, [r3, #44]	; 0x2c
 80051b4:	e71b      	b.n	8004fee <oppdater_parameter+0x1da>
		param.rull_pid.ui_min = (float) -parameter;				// begrensning av kg pådrag pr thruster
 80051b6:	4b2c      	ldr	r3, [pc, #176]	; (8005268 <oppdater_parameter+0x454>)
 80051b8:	eef1 7a40 	vneg.f32	s15, s0
 80051bc:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
		param.rull_pid.ui_maks = (float) parameter;		break;
 80051c0:	ed83 0a10 	vstr	s0, [r3, #64]	; 0x40
 80051c4:	e713      	b.n	8004fee <oppdater_parameter+0x1da>
		param.rull_pid.ut_min = (float) -parameter;				// begrensning av kg pådrag pr thruster
 80051c6:	4b28      	ldr	r3, [pc, #160]	; (8005268 <oppdater_parameter+0x454>)
 80051c8:	eef1 7a40 	vneg.f32	s15, s0
 80051cc:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
		param.rull_pid.ut_maks = (float) parameter;		break;
 80051d0:	ed83 0a12 	vstr	s0, [r3, #72]	; 0x48
 80051d4:	e70b      	b.n	8004fee <oppdater_parameter+0x1da>
		rpid.yr = (float) parameter;					break; 	// rullvinkel-referanse i grader
 80051d6:	4b20      	ldr	r3, [pc, #128]	; (8005258 <oppdater_parameter+0x444>)
 80051d8:	ed83 0a00 	vstr	s0, [r3]
 80051dc:	e707      	b.n	8004fee <oppdater_parameter+0x1da>
		param.rull_pid.a = parameter;							// filterparameter for derivatorledd
 80051de:	4b22      	ldr	r3, [pc, #136]	; (8005268 <oppdater_parameter+0x454>)
 80051e0:	ed83 0a0e 	vstr	s0, [r3, #56]	; 0x38
		param.rull_pid.b = 1-param.rull_pid.a;			break;
 80051e4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80051e8:	ee37 0ac0 	vsub.f32	s0, s15, s0
 80051ec:	ed83 0a0f 	vstr	s0, [r3, #60]	; 0x3c
 80051f0:	e6fd      	b.n	8004fee <oppdater_parameter+0x1da>
		param.stamp_pid.kp = (float) parameter;			break;
 80051f2:	4b1d      	ldr	r3, [pc, #116]	; (8005268 <oppdater_parameter+0x454>)
 80051f4:	ed83 0a1f 	vstr	s0, [r3, #124]	; 0x7c
 80051f8:	e6f9      	b.n	8004fee <oppdater_parameter+0x1da>
		param.stamp_pid.ki = (float) parameter;			break;
 80051fa:	4b1b      	ldr	r3, [pc, #108]	; (8005268 <oppdater_parameter+0x454>)
 80051fc:	ed83 0a20 	vstr	s0, [r3, #128]	; 0x80
 8005200:	e6f5      	b.n	8004fee <oppdater_parameter+0x1da>
		param.stamp_pid.kd = (float) parameter;			break;
 8005202:	4b19      	ldr	r3, [pc, #100]	; (8005268 <oppdater_parameter+0x454>)
 8005204:	ed83 0a21 	vstr	s0, [r3, #132]	; 0x84
 8005208:	e6f1      	b.n	8004fee <oppdater_parameter+0x1da>
		param.stamp_pid.ui_min = (float) -parameter;			// begrensning av kg pådrag pr thruster
 800520a:	4b17      	ldr	r3, [pc, #92]	; (8005268 <oppdater_parameter+0x454>)
 800520c:	eef1 7a40 	vneg.f32	s15, s0
 8005210:	edc3 7a27 	vstr	s15, [r3, #156]	; 0x9c
		param.stamp_pid.ui_maks = (float) parameter;	break;
 8005214:	ed83 0a26 	vstr	s0, [r3, #152]	; 0x98
 8005218:	e6e9      	b.n	8004fee <oppdater_parameter+0x1da>
		param.stamp_pid.ut_min = (float) -parameter;			// begrensning av kg pådrag pr thruster
 800521a:	4b13      	ldr	r3, [pc, #76]	; (8005268 <oppdater_parameter+0x454>)
 800521c:	eef1 7a40 	vneg.f32	s15, s0
 8005220:	edc3 7a29 	vstr	s15, [r3, #164]	; 0xa4
		param.stamp_pid.ut_maks = (float) parameter;	break;
 8005224:	ed83 0a28 	vstr	s0, [r3, #160]	; 0xa0
 8005228:	e6e1      	b.n	8004fee <oppdater_parameter+0x1da>
		spid.yr = (float) parameter;					break; 	// stampvinkel-referanse i grader
 800522a:	4b0c      	ldr	r3, [pc, #48]	; (800525c <oppdater_parameter+0x448>)
 800522c:	ed83 0a00 	vstr	s0, [r3]
 8005230:	e6dd      	b.n	8004fee <oppdater_parameter+0x1da>
 8005232:	bf00      	nop
 8005234:	20000240 	.word	0x20000240
 8005238:	20000244 	.word	0x20000244
 800523c:	200003dc 	.word	0x200003dc
 8005240:	200009d0 	.word	0x200009d0
 8005244:	20000c34 	.word	0x20000c34
 8005248:	2000026c 	.word	0x2000026c
 800524c:	2000057c 	.word	0x2000057c
 8005250:	200003d8 	.word	0x200003d8
 8005254:	200003fc 	.word	0x200003fc
 8005258:	2000099c 	.word	0x2000099c
 800525c:	20000c00 	.word	0x20000c00
 8005260:	20000264 	.word	0x20000264
 8005264:	2000028c 	.word	0x2000028c
 8005268:	200006ec 	.word	0x200006ec
		param.stamp_pid.a = parameter;							// filterparameter for derivatorledd
 800526c:	4b9f      	ldr	r3, [pc, #636]	; (80054ec <oppdater_parameter+0x6d8>)
 800526e:	ed83 0a24 	vstr	s0, [r3, #144]	; 0x90
		param.stamp_pid.b = 1-param.stamp_pid.a;		break;
 8005272:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8005276:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800527a:	ed83 0a25 	vstr	s0, [r3, #148]	; 0x94
 800527e:	e6b6      	b.n	8004fee <oppdater_parameter+0x1da>
		param.gir_pid.kp = (float) parameter;			break;
 8005280:	4b9a      	ldr	r3, [pc, #616]	; (80054ec <oppdater_parameter+0x6d8>)
 8005282:	ed83 0a2a 	vstr	s0, [r3, #168]	; 0xa8
 8005286:	e6b2      	b.n	8004fee <oppdater_parameter+0x1da>
		param.gir_pid.ki = (float) parameter;			break;
 8005288:	4b98      	ldr	r3, [pc, #608]	; (80054ec <oppdater_parameter+0x6d8>)
 800528a:	ed83 0a2b 	vstr	s0, [r3, #172]	; 0xac
 800528e:	e6ae      	b.n	8004fee <oppdater_parameter+0x1da>
		param.gir_pid.kd = (float) parameter;			break;
 8005290:	4b96      	ldr	r3, [pc, #600]	; (80054ec <oppdater_parameter+0x6d8>)
 8005292:	ed83 0a2c 	vstr	s0, [r3, #176]	; 0xb0
 8005296:	e6aa      	b.n	8004fee <oppdater_parameter+0x1da>
		param.gir_pid.ui_min = (float) -parameter;				// begrensning av kg pådrag pr thruster
 8005298:	4b94      	ldr	r3, [pc, #592]	; (80054ec <oppdater_parameter+0x6d8>)
 800529a:	eef1 7a40 	vneg.f32	s15, s0
 800529e:	edc3 7a32 	vstr	s15, [r3, #200]	; 0xc8
		param.gir_pid.ui_maks = (float) parameter;		break;
 80052a2:	ed83 0a31 	vstr	s0, [r3, #196]	; 0xc4
 80052a6:	e6a2      	b.n	8004fee <oppdater_parameter+0x1da>
		param.gir_pid.ut_min = (float) -parameter;				// begrensning av kg pådrag pr thruster
 80052a8:	4b90      	ldr	r3, [pc, #576]	; (80054ec <oppdater_parameter+0x6d8>)
 80052aa:	eef1 7a40 	vneg.f32	s15, s0
 80052ae:	edc3 7a34 	vstr	s15, [r3, #208]	; 0xd0
		param.gir_pid.ut_maks = (float) parameter;		break;
 80052b2:	ed83 0a33 	vstr	s0, [r3, #204]	; 0xcc
 80052b6:	e69a      	b.n	8004fee <oppdater_parameter+0x1da>
		gpid.yr = (float) parameter;					break; 	// girvinkel-referanse i grader
 80052b8:	4b8d      	ldr	r3, [pc, #564]	; (80054f0 <oppdater_parameter+0x6dc>)
 80052ba:	ed83 0a00 	vstr	s0, [r3]
 80052be:	e696      	b.n	8004fee <oppdater_parameter+0x1da>
		param.gir_pid.a = parameter;							// filterparameter for derivatorledd
 80052c0:	4b8a      	ldr	r3, [pc, #552]	; (80054ec <oppdater_parameter+0x6d8>)
 80052c2:	ed83 0a2f 	vstr	s0, [r3, #188]	; 0xbc
		param.gir_pid.b = 1-param.gir_pid.a;			break;
 80052c6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80052ca:	ee37 0ac0 	vsub.f32	s0, s15, s0
 80052ce:	ed83 0a30 	vstr	s0, [r3, #192]	; 0xc0
 80052d2:	e68c      	b.n	8004fee <oppdater_parameter+0x1da>
		flagg.test_thrustere = 1;
 80052d4:	4b87      	ldr	r3, [pc, #540]	; (80054f4 <oppdater_parameter+0x6e0>)
 80052d6:	2201      	movs	r2, #1
 80052d8:	749a      	strb	r2, [r3, #18]
		thruster_ID = (uint8_t) parameter;				break;
 80052da:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 80052de:	ee17 3a90 	vmov	r3, s15
 80052e2:	4a85      	ldr	r2, [pc, #532]	; (80054f8 <oppdater_parameter+0x6e4>)
 80052e4:	7013      	strb	r3, [r2, #0]
 80052e6:	e682      	b.n	8004fee <oppdater_parameter+0x1da>
		mk_modell.a = (float) parameter;				break;
 80052e8:	4b84      	ldr	r3, [pc, #528]	; (80054fc <oppdater_parameter+0x6e8>)
 80052ea:	ed83 0a00 	vstr	s0, [r3]
 80052ee:	e67e      	b.n	8004fee <oppdater_parameter+0x1da>
		mk_modell.b = (float) parameter;				break;
 80052f0:	4b82      	ldr	r3, [pc, #520]	; (80054fc <oppdater_parameter+0x6e8>)
 80052f2:	ed83 0a01 	vstr	s0, [r3, #4]
 80052f6:	e67a      	b.n	8004fee <oppdater_parameter+0x1da>
		c =(uint8_t) parameter;
 80052f8:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 80052fc:	edcd 7a01 	vstr	s15, [sp, #4]
 8005300:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8005304:	4a7e      	ldr	r2, [pc, #504]	; (8005500 <oppdater_parameter+0x6ec>)
 8005306:	7013      	strb	r3, [r2, #0]
		if (( c==1 )||( c==2 )||( c==3 )||( c==4 )){
 8005308:	3b01      	subs	r3, #1
 800530a:	b2db      	uxtb	r3, r3
 800530c:	2b03      	cmp	r3, #3
 800530e:	d903      	bls.n	8005318 <oppdater_parameter+0x504>
			controller_status = 0;}
 8005310:	4b7c      	ldr	r3, [pc, #496]	; (8005504 <oppdater_parameter+0x6f0>)
 8005312:	2200      	movs	r2, #0
 8005314:	701a      	strb	r2, [r3, #0]
 8005316:	e66a      	b.n	8004fee <oppdater_parameter+0x1da>
			memset(&ctrl_ref, 0, sizeof(NED_eta));
 8005318:	4b7b      	ldr	r3, [pc, #492]	; (8005508 <oppdater_parameter+0x6f4>)
 800531a:	2200      	movs	r2, #0
 800531c:	601a      	str	r2, [r3, #0]
 800531e:	605a      	str	r2, [r3, #4]
 8005320:	60da      	str	r2, [r3, #12]
 8005322:	611a      	str	r2, [r3, #16]
 8005324:	615a      	str	r2, [r3, #20]
			ctrl_ref.z = model_states.z;
 8005326:	4a79      	ldr	r2, [pc, #484]	; (800550c <oppdater_parameter+0x6f8>)
 8005328:	6892      	ldr	r2, [r2, #8]
 800532a:	609a      	str	r2, [r3, #8]
	pid->e_old = 0;
 800532c:	4b78      	ldr	r3, [pc, #480]	; (8005510 <oppdater_parameter+0x6fc>)
 800532e:	2400      	movs	r4, #0
 8005330:	621c      	str	r4, [r3, #32]
	pid->i_old = 0;
 8005332:	625c      	str	r4, [r3, #36]	; 0x24
	pid->fstate_old = 0;
 8005334:	629c      	str	r4, [r3, #40]	; 0x28
	pid->e_old = 0;
 8005336:	4b77      	ldr	r3, [pc, #476]	; (8005514 <oppdater_parameter+0x700>)
 8005338:	621c      	str	r4, [r3, #32]
	pid->i_old = 0;
 800533a:	625c      	str	r4, [r3, #36]	; 0x24
	pid->fstate_old = 0;
 800533c:	629c      	str	r4, [r3, #40]	; 0x28
	pid->e_old = 0;
 800533e:	4b76      	ldr	r3, [pc, #472]	; (8005518 <oppdater_parameter+0x704>)
 8005340:	621c      	str	r4, [r3, #32]
	pid->i_old = 0;
 8005342:	625c      	str	r4, [r3, #36]	; 0x24
	pid->fstate_old = 0;
 8005344:	629c      	str	r4, [r3, #40]	; 0x28
			reset_lqr_values(&lqr_reg);
 8005346:	4875      	ldr	r0, [pc, #468]	; (800551c <oppdater_parameter+0x708>)
 8005348:	f7ff fd55 	bl	8004df6 <reset_lqr_values>
	smc->ref_old = 0;
 800534c:	4b74      	ldr	r3, [pc, #464]	; (8005520 <oppdater_parameter+0x70c>)
 800534e:	61dc      	str	r4, [r3, #28]
	smc->ref_dt_old = 0;
 8005350:	621c      	str	r4, [r3, #32]
	smc->e_old = 0;
 8005352:	625c      	str	r4, [r3, #36]	; 0x24
	smc->e_int_old = 0;
 8005354:	629c      	str	r4, [r3, #40]	; 0x28
	smc->ref_old = 0;
 8005356:	4b73      	ldr	r3, [pc, #460]	; (8005524 <oppdater_parameter+0x710>)
 8005358:	61dc      	str	r4, [r3, #28]
	smc->ref_dt_old = 0;
 800535a:	621c      	str	r4, [r3, #32]
	smc->e_old = 0;
 800535c:	625c      	str	r4, [r3, #36]	; 0x24
	smc->e_int_old = 0;
 800535e:	629c      	str	r4, [r3, #40]	; 0x28
	smc->ref_old = 0;
 8005360:	4b71      	ldr	r3, [pc, #452]	; (8005528 <oppdater_parameter+0x714>)
 8005362:	61dc      	str	r4, [r3, #28]
	smc->ref_dt_old = 0;
 8005364:	621c      	str	r4, [r3, #32]
	smc->e_old = 0;
 8005366:	625c      	str	r4, [r3, #36]	; 0x24
	smc->e_int_old = 0;
 8005368:	629c      	str	r4, [r3, #40]	; 0x28
			controller_status = c;}
 800536a:	4b65      	ldr	r3, [pc, #404]	; (8005500 <oppdater_parameter+0x6ec>)
 800536c:	781a      	ldrb	r2, [r3, #0]
 800536e:	4b65      	ldr	r3, [pc, #404]	; (8005504 <oppdater_parameter+0x6f0>)
 8005370:	701a      	strb	r2, [r3, #0]
 8005372:	e63c      	b.n	8004fee <oppdater_parameter+0x1da>
		ctrl_ref.x = parameter;
 8005374:	4b64      	ldr	r3, [pc, #400]	; (8005508 <oppdater_parameter+0x6f4>)
 8005376:	ed83 0a00 	vstr	s0, [r3]
		break;
 800537a:	e638      	b.n	8004fee <oppdater_parameter+0x1da>
		ctrl_ref.y = parameter;
 800537c:	4b62      	ldr	r3, [pc, #392]	; (8005508 <oppdater_parameter+0x6f4>)
 800537e:	ed83 0a01 	vstr	s0, [r3, #4]
		break;
 8005382:	e634      	b.n	8004fee <oppdater_parameter+0x1da>
		ctrl_ref.z = parameter;
 8005384:	4b60      	ldr	r3, [pc, #384]	; (8005508 <oppdater_parameter+0x6f4>)
 8005386:	ed83 0a02 	vstr	s0, [r3, #8]
		break;
 800538a:	e630      	b.n	8004fee <oppdater_parameter+0x1da>
		ctrl_ref.phi = parameter;
 800538c:	4b5e      	ldr	r3, [pc, #376]	; (8005508 <oppdater_parameter+0x6f4>)
 800538e:	ed83 0a03 	vstr	s0, [r3, #12]
		break;
 8005392:	e62c      	b.n	8004fee <oppdater_parameter+0x1da>
		ctrl_ref.theta = parameter;
 8005394:	4b5c      	ldr	r3, [pc, #368]	; (8005508 <oppdater_parameter+0x6f4>)
 8005396:	ed83 0a04 	vstr	s0, [r3, #16]
		break;
 800539a:	e628      	b.n	8004fee <oppdater_parameter+0x1da>
		ctrl_ref.psi = parameter;
 800539c:	4b5a      	ldr	r3, [pc, #360]	; (8005508 <oppdater_parameter+0x6f4>)
 800539e:	ed83 0a05 	vstr	s0, [r3, #20]
		break;
 80053a2:	e624      	b.n	8004fee <oppdater_parameter+0x1da>
		c =(uint8_t) parameter;
 80053a4:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 80053a8:	edcd 7a01 	vstr	s15, [sp, #4]
 80053ac:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80053b0:	4a53      	ldr	r2, [pc, #332]	; (8005500 <oppdater_parameter+0x6ec>)
 80053b2:	7013      	strb	r3, [r2, #0]
		if 		(c==1) 	{memcpy(&active_step, &heave_step, sizeof(step_sequence));}
 80053b4:	2b01      	cmp	r3, #1
 80053b6:	d012      	beq.n	80053de <oppdater_parameter+0x5ca>
		else if (c==2)	{memcpy(&active_step, &roll_step,  sizeof(step_sequence));}
 80053b8:	2b02      	cmp	r3, #2
 80053ba:	d027      	beq.n	800540c <oppdater_parameter+0x5f8>
		else if (c==3)	{memcpy(&active_step, &pitch_step, sizeof(step_sequence));}
 80053bc:	2b03      	cmp	r3, #3
 80053be:	d02b      	beq.n	8005418 <oppdater_parameter+0x604>
		else if (c==4)	{memcpy(&active_step, &sep_steps,  sizeof(step_sequence));}
 80053c0:	2b04      	cmp	r3, #4
 80053c2:	d02f      	beq.n	8005424 <oppdater_parameter+0x610>
		else if (c==5)	{memcpy(&active_step, &overlap_steps,  sizeof(step_sequence));}
 80053c4:	2b05      	cmp	r3, #5
 80053c6:	d033      	beq.n	8005430 <oppdater_parameter+0x61c>
		else if (c==6)	{memcpy(&active_step, &sep_sine,  sizeof(step_sequence));}
 80053c8:	2b06      	cmp	r3, #6
 80053ca:	d037      	beq.n	800543c <oppdater_parameter+0x628>
		else if (c==7)	{memcpy(&active_step, &overlap_sine,  sizeof(step_sequence));}
 80053cc:	2b07      	cmp	r3, #7
 80053ce:	f47f ae0e 	bne.w	8004fee <oppdater_parameter+0x1da>
 80053d2:	22a4      	movs	r2, #164	; 0xa4
 80053d4:	4955      	ldr	r1, [pc, #340]	; (800552c <oppdater_parameter+0x718>)
 80053d6:	4856      	ldr	r0, [pc, #344]	; (8005530 <oppdater_parameter+0x71c>)
 80053d8:	f004 fd8a 	bl	8009ef0 <memcpy>
 80053dc:	e004      	b.n	80053e8 <oppdater_parameter+0x5d4>
		if 		(c==1) 	{memcpy(&active_step, &heave_step, sizeof(step_sequence));}
 80053de:	22a4      	movs	r2, #164	; 0xa4
 80053e0:	4954      	ldr	r1, [pc, #336]	; (8005534 <oppdater_parameter+0x720>)
 80053e2:	4853      	ldr	r0, [pc, #332]	; (8005530 <oppdater_parameter+0x71c>)
 80053e4:	f004 fd84 	bl	8009ef0 <memcpy>
		memcpy(&active_step.old_ref, &ctrl_ref, sizeof(NED_eta));
 80053e8:	4e51      	ldr	r6, [pc, #324]	; (8005530 <oppdater_parameter+0x71c>)
 80053ea:	f106 048c 	add.w	r4, r6, #140	; 0x8c
 80053ee:	4d46      	ldr	r5, [pc, #280]	; (8005508 <oppdater_parameter+0x6f4>)
 80053f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80053f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80053f4:	e895 0003 	ldmia.w	r5, {r0, r1}
 80053f8:	e884 0003 	stmia.w	r4, {r0, r1}
		step_counter.seq_time = step_counter.incr_timer = 0;
 80053fc:	4b4e      	ldr	r3, [pc, #312]	; (8005538 <oppdater_parameter+0x724>)
 80053fe:	2200      	movs	r2, #0
 8005400:	605a      	str	r2, [r3, #4]
 8005402:	601a      	str	r2, [r3, #0]
		step_counter.TIMER_STATUS = 1;
 8005404:	2201      	movs	r2, #1
 8005406:	721a      	strb	r2, [r3, #8]
		active_step.SEQ_STATUS = 1;
 8005408:	7032      	strb	r2, [r6, #0]
		break;
 800540a:	e5f0      	b.n	8004fee <oppdater_parameter+0x1da>
		else if (c==2)	{memcpy(&active_step, &roll_step,  sizeof(step_sequence));}
 800540c:	22a4      	movs	r2, #164	; 0xa4
 800540e:	494b      	ldr	r1, [pc, #300]	; (800553c <oppdater_parameter+0x728>)
 8005410:	4847      	ldr	r0, [pc, #284]	; (8005530 <oppdater_parameter+0x71c>)
 8005412:	f004 fd6d 	bl	8009ef0 <memcpy>
 8005416:	e7e7      	b.n	80053e8 <oppdater_parameter+0x5d4>
		else if (c==3)	{memcpy(&active_step, &pitch_step, sizeof(step_sequence));}
 8005418:	22a4      	movs	r2, #164	; 0xa4
 800541a:	4949      	ldr	r1, [pc, #292]	; (8005540 <oppdater_parameter+0x72c>)
 800541c:	4844      	ldr	r0, [pc, #272]	; (8005530 <oppdater_parameter+0x71c>)
 800541e:	f004 fd67 	bl	8009ef0 <memcpy>
 8005422:	e7e1      	b.n	80053e8 <oppdater_parameter+0x5d4>
		else if (c==4)	{memcpy(&active_step, &sep_steps,  sizeof(step_sequence));}
 8005424:	22a4      	movs	r2, #164	; 0xa4
 8005426:	4947      	ldr	r1, [pc, #284]	; (8005544 <oppdater_parameter+0x730>)
 8005428:	4841      	ldr	r0, [pc, #260]	; (8005530 <oppdater_parameter+0x71c>)
 800542a:	f004 fd61 	bl	8009ef0 <memcpy>
 800542e:	e7db      	b.n	80053e8 <oppdater_parameter+0x5d4>
		else if (c==5)	{memcpy(&active_step, &overlap_steps,  sizeof(step_sequence));}
 8005430:	22a4      	movs	r2, #164	; 0xa4
 8005432:	4945      	ldr	r1, [pc, #276]	; (8005548 <oppdater_parameter+0x734>)
 8005434:	483e      	ldr	r0, [pc, #248]	; (8005530 <oppdater_parameter+0x71c>)
 8005436:	f004 fd5b 	bl	8009ef0 <memcpy>
 800543a:	e7d5      	b.n	80053e8 <oppdater_parameter+0x5d4>
		else if (c==6)	{memcpy(&active_step, &sep_sine,  sizeof(step_sequence));}
 800543c:	22a4      	movs	r2, #164	; 0xa4
 800543e:	4943      	ldr	r1, [pc, #268]	; (800554c <oppdater_parameter+0x738>)
 8005440:	483b      	ldr	r0, [pc, #236]	; (8005530 <oppdater_parameter+0x71c>)
 8005442:	f004 fd55 	bl	8009ef0 <memcpy>
 8005446:	e7cf      	b.n	80053e8 <oppdater_parameter+0x5d4>
		smc_heave.b0 = parameter;
 8005448:	4b35      	ldr	r3, [pc, #212]	; (8005520 <oppdater_parameter+0x70c>)
 800544a:	ed83 0a03 	vstr	s0, [r3, #12]
	smc->ref_old = 0;
 800544e:	2200      	movs	r2, #0
 8005450:	61da      	str	r2, [r3, #28]
	smc->ref_dt_old = 0;
 8005452:	621a      	str	r2, [r3, #32]
	smc->e_old = 0;
 8005454:	625a      	str	r2, [r3, #36]	; 0x24
	smc->e_int_old = 0;
 8005456:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005458:	e5c9      	b.n	8004fee <oppdater_parameter+0x1da>
		smc_heave.epsilon = parameter;
 800545a:	4b31      	ldr	r3, [pc, #196]	; (8005520 <oppdater_parameter+0x70c>)
 800545c:	ed83 0a02 	vstr	s0, [r3, #8]
	smc->ref_old = 0;
 8005460:	2200      	movs	r2, #0
 8005462:	61da      	str	r2, [r3, #28]
	smc->ref_dt_old = 0;
 8005464:	621a      	str	r2, [r3, #32]
	smc->e_old = 0;
 8005466:	625a      	str	r2, [r3, #36]	; 0x24
	smc->e_int_old = 0;
 8005468:	629a      	str	r2, [r3, #40]	; 0x28
}
 800546a:	e5c0      	b.n	8004fee <oppdater_parameter+0x1da>
		smc_heave.c1 = parameter;
 800546c:	4b2c      	ldr	r3, [pc, #176]	; (8005520 <oppdater_parameter+0x70c>)
 800546e:	ed83 0a00 	vstr	s0, [r3]
	smc->ref_old = 0;
 8005472:	2200      	movs	r2, #0
 8005474:	61da      	str	r2, [r3, #28]
	smc->ref_dt_old = 0;
 8005476:	621a      	str	r2, [r3, #32]
	smc->e_old = 0;
 8005478:	625a      	str	r2, [r3, #36]	; 0x24
	smc->e_int_old = 0;
 800547a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800547c:	e5b7      	b.n	8004fee <oppdater_parameter+0x1da>
		smc_heave.c2 = parameter;
 800547e:	4b28      	ldr	r3, [pc, #160]	; (8005520 <oppdater_parameter+0x70c>)
 8005480:	ed83 0a01 	vstr	s0, [r3, #4]
	smc->ref_old = 0;
 8005484:	2200      	movs	r2, #0
 8005486:	61da      	str	r2, [r3, #28]
	smc->ref_dt_old = 0;
 8005488:	621a      	str	r2, [r3, #32]
	smc->e_old = 0;
 800548a:	625a      	str	r2, [r3, #36]	; 0x24
	smc->e_int_old = 0;
 800548c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800548e:	e5ae      	b.n	8004fee <oppdater_parameter+0x1da>
		smc_roll.b0 = parameter;
 8005490:	4b24      	ldr	r3, [pc, #144]	; (8005524 <oppdater_parameter+0x710>)
 8005492:	ed83 0a03 	vstr	s0, [r3, #12]
	smc->ref_old = 0;
 8005496:	2200      	movs	r2, #0
 8005498:	61da      	str	r2, [r3, #28]
	smc->ref_dt_old = 0;
 800549a:	621a      	str	r2, [r3, #32]
	smc->e_old = 0;
 800549c:	625a      	str	r2, [r3, #36]	; 0x24
	smc->e_int_old = 0;
 800549e:	629a      	str	r2, [r3, #40]	; 0x28
}
 80054a0:	e5a5      	b.n	8004fee <oppdater_parameter+0x1da>
		smc_roll.epsilon = parameter;
 80054a2:	4b20      	ldr	r3, [pc, #128]	; (8005524 <oppdater_parameter+0x710>)
 80054a4:	ed83 0a02 	vstr	s0, [r3, #8]
	smc->ref_old = 0;
 80054a8:	2200      	movs	r2, #0
 80054aa:	61da      	str	r2, [r3, #28]
	smc->ref_dt_old = 0;
 80054ac:	621a      	str	r2, [r3, #32]
	smc->e_old = 0;
 80054ae:	625a      	str	r2, [r3, #36]	; 0x24
	smc->e_int_old = 0;
 80054b0:	629a      	str	r2, [r3, #40]	; 0x28
}
 80054b2:	e59c      	b.n	8004fee <oppdater_parameter+0x1da>
		smc_roll.c1 = parameter;
 80054b4:	4b1b      	ldr	r3, [pc, #108]	; (8005524 <oppdater_parameter+0x710>)
 80054b6:	ed83 0a00 	vstr	s0, [r3]
	smc->ref_old = 0;
 80054ba:	2200      	movs	r2, #0
 80054bc:	61da      	str	r2, [r3, #28]
	smc->ref_dt_old = 0;
 80054be:	621a      	str	r2, [r3, #32]
	smc->e_old = 0;
 80054c0:	625a      	str	r2, [r3, #36]	; 0x24
	smc->e_int_old = 0;
 80054c2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80054c4:	e593      	b.n	8004fee <oppdater_parameter+0x1da>
		smc_roll.c2 = parameter;
 80054c6:	4b17      	ldr	r3, [pc, #92]	; (8005524 <oppdater_parameter+0x710>)
 80054c8:	ed83 0a01 	vstr	s0, [r3, #4]
	smc->ref_old = 0;
 80054cc:	2200      	movs	r2, #0
 80054ce:	61da      	str	r2, [r3, #28]
	smc->ref_dt_old = 0;
 80054d0:	621a      	str	r2, [r3, #32]
	smc->e_old = 0;
 80054d2:	625a      	str	r2, [r3, #36]	; 0x24
	smc->e_int_old = 0;
 80054d4:	629a      	str	r2, [r3, #40]	; 0x28
}
 80054d6:	e58a      	b.n	8004fee <oppdater_parameter+0x1da>
		smc_pitch.b0 = parameter;
 80054d8:	4b13      	ldr	r3, [pc, #76]	; (8005528 <oppdater_parameter+0x714>)
 80054da:	ed83 0a03 	vstr	s0, [r3, #12]
	smc->ref_old = 0;
 80054de:	2200      	movs	r2, #0
 80054e0:	61da      	str	r2, [r3, #28]
	smc->ref_dt_old = 0;
 80054e2:	621a      	str	r2, [r3, #32]
	smc->e_old = 0;
 80054e4:	625a      	str	r2, [r3, #36]	; 0x24
	smc->e_int_old = 0;
 80054e6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80054e8:	e581      	b.n	8004fee <oppdater_parameter+0x1da>
 80054ea:	bf00      	nop
 80054ec:	200006ec 	.word	0x200006ec
 80054f0:	2000028c 	.word	0x2000028c
 80054f4:	20000244 	.word	0x20000244
 80054f8:	20000d18 	.word	0x20000d18
 80054fc:	20000544 	.word	0x20000544
 8005500:	20000d70 	.word	0x20000d70
 8005504:	200001fc 	.word	0x200001fc
 8005508:	20000220 	.word	0x20000220
 800550c:	2000054c 	.word	0x2000054c
 8005510:	200007c0 	.word	0x200007c0
 8005514:	20000820 	.word	0x20000820
 8005518:	200007f0 	.word	0x200007f0
 800551c:	20000504 	.word	0x20000504
 8005520:	20000b70 	.word	0x20000b70
 8005524:	20000bd0 	.word	0x20000bd0
 8005528:	20000ba0 	.word	0x20000ba0
 800552c:	200005a4 	.word	0x200005a4
 8005530:	200000f0 	.word	0x200000f0
 8005534:	200002e8 	.word	0x200002e8
 8005538:	20000c54 	.word	0x20000c54
 800553c:	200008f8 	.word	0x200008f8
 8005540:	20000850 	.word	0x20000850
 8005544:	20000acc 	.word	0x20000acc
 8005548:	20000648 	.word	0x20000648
 800554c:	20000a28 	.word	0x20000a28
		smc_pitch.epsilon = parameter;
 8005550:	4b11      	ldr	r3, [pc, #68]	; (8005598 <oppdater_parameter+0x784>)
 8005552:	ed83 0a02 	vstr	s0, [r3, #8]
	smc->ref_old = 0;
 8005556:	2200      	movs	r2, #0
 8005558:	61da      	str	r2, [r3, #28]
	smc->ref_dt_old = 0;
 800555a:	621a      	str	r2, [r3, #32]
	smc->e_old = 0;
 800555c:	625a      	str	r2, [r3, #36]	; 0x24
	smc->e_int_old = 0;
 800555e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005560:	e545      	b.n	8004fee <oppdater_parameter+0x1da>
		smc_pitch.c1 = parameter;
 8005562:	4b0d      	ldr	r3, [pc, #52]	; (8005598 <oppdater_parameter+0x784>)
 8005564:	ed83 0a00 	vstr	s0, [r3]
	smc->ref_old = 0;
 8005568:	2200      	movs	r2, #0
 800556a:	61da      	str	r2, [r3, #28]
	smc->ref_dt_old = 0;
 800556c:	621a      	str	r2, [r3, #32]
	smc->e_old = 0;
 800556e:	625a      	str	r2, [r3, #36]	; 0x24
	smc->e_int_old = 0;
 8005570:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005572:	e53c      	b.n	8004fee <oppdater_parameter+0x1da>
		smc_pitch.c2 = parameter;
 8005574:	4b08      	ldr	r3, [pc, #32]	; (8005598 <oppdater_parameter+0x784>)
 8005576:	ed83 0a01 	vstr	s0, [r3, #4]
	smc->ref_old = 0;
 800557a:	2200      	movs	r2, #0
 800557c:	61da      	str	r2, [r3, #28]
	smc->ref_dt_old = 0;
 800557e:	621a      	str	r2, [r3, #32]
	smc->e_old = 0;
 8005580:	625a      	str	r2, [r3, #36]	; 0x24
	smc->e_int_old = 0;
 8005582:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005584:	e533      	b.n	8004fee <oppdater_parameter+0x1da>
		test_thrustere = 1;
 8005586:	4b05      	ldr	r3, [pc, #20]	; (800559c <oppdater_parameter+0x788>)
 8005588:	2201      	movs	r2, #1
 800558a:	701a      	strb	r2, [r3, #0]
		break;
 800558c:	e52f      	b.n	8004fee <oppdater_parameter+0x1da>
		test_thrustere = 0;
 800558e:	4b03      	ldr	r3, [pc, #12]	; (800559c <oppdater_parameter+0x788>)
 8005590:	2200      	movs	r2, #0
 8005592:	701a      	strb	r2, [r3, #0]
}
 8005594:	e52b      	b.n	8004fee <oppdater_parameter+0x1da>
 8005596:	bf00      	nop
 8005598:	20000ba0 	.word	0x20000ba0
 800559c:	20000ce4 	.word	0x20000ce4

080055a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80055a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80055d8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80055a4:	480d      	ldr	r0, [pc, #52]	; (80055dc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80055a6:	490e      	ldr	r1, [pc, #56]	; (80055e0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80055a8:	4a0e      	ldr	r2, [pc, #56]	; (80055e4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80055aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80055ac:	e002      	b.n	80055b4 <LoopCopyDataInit>

080055ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80055ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80055b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80055b2:	3304      	adds	r3, #4

080055b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80055b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80055b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80055b8:	d3f9      	bcc.n	80055ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80055ba:	4a0b      	ldr	r2, [pc, #44]	; (80055e8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80055bc:	4c0b      	ldr	r4, [pc, #44]	; (80055ec <LoopFillZerobss+0x26>)
  movs r3, #0
 80055be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80055c0:	e001      	b.n	80055c6 <LoopFillZerobss>

080055c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80055c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80055c4:	3204      	adds	r2, #4

080055c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80055c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80055c8:	d3fb      	bcc.n	80055c2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80055ca:	f7ff f8af 	bl	800472c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80055ce:	f004 fc5b 	bl	8009e88 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80055d2:	f7fd fb49 	bl	8002c68 <main>
  bx  lr    
 80055d6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80055d8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80055dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80055e0:	200000a8 	.word	0x200000a8
  ldr r2, =_sidata
 80055e4:	0800bc70 	.word	0x0800bc70
  ldr r2, =_sbss
 80055e8:	200000a8 	.word	0x200000a8
  ldr r4, =_ebss
 80055ec:	20001468 	.word	0x20001468

080055f0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80055f0:	e7fe      	b.n	80055f0 <ADC_IRQHandler>
	...

080055f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80055f4:	b510      	push	{r4, lr}
 80055f6:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80055f8:	4b0e      	ldr	r3, [pc, #56]	; (8005634 <HAL_InitTick+0x40>)
 80055fa:	7818      	ldrb	r0, [r3, #0]
 80055fc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005600:	fbb3 f3f0 	udiv	r3, r3, r0
 8005604:	4a0c      	ldr	r2, [pc, #48]	; (8005638 <HAL_InitTick+0x44>)
 8005606:	6810      	ldr	r0, [r2, #0]
 8005608:	fbb0 f0f3 	udiv	r0, r0, r3
 800560c:	f000 fc6e 	bl	8005eec <HAL_SYSTICK_Config>
 8005610:	b968      	cbnz	r0, 800562e <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005612:	2c0f      	cmp	r4, #15
 8005614:	d901      	bls.n	800561a <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8005616:	2001      	movs	r0, #1
 8005618:	e00a      	b.n	8005630 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800561a:	2200      	movs	r2, #0
 800561c:	4621      	mov	r1, r4
 800561e:	f04f 30ff 	mov.w	r0, #4294967295
 8005622:	f000 fc1f 	bl	8005e64 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005626:	4b05      	ldr	r3, [pc, #20]	; (800563c <HAL_InitTick+0x48>)
 8005628:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800562a:	2000      	movs	r0, #0
 800562c:	e000      	b.n	8005630 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 800562e:	2001      	movs	r0, #1
}
 8005630:	bd10      	pop	{r4, pc}
 8005632:	bf00      	nop
 8005634:	2000001c 	.word	0x2000001c
 8005638:	20000018 	.word	0x20000018
 800563c:	20000020 	.word	0x20000020

08005640 <HAL_Init>:
{
 8005640:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005642:	4b0b      	ldr	r3, [pc, #44]	; (8005670 <HAL_Init+0x30>)
 8005644:	681a      	ldr	r2, [r3, #0]
 8005646:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800564a:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800564c:	681a      	ldr	r2, [r3, #0]
 800564e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005652:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005654:	681a      	ldr	r2, [r3, #0]
 8005656:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800565a:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800565c:	2003      	movs	r0, #3
 800565e:	f000 fbef 	bl	8005e40 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8005662:	2000      	movs	r0, #0
 8005664:	f7ff ffc6 	bl	80055f4 <HAL_InitTick>
  HAL_MspInit();
 8005668:	f7fe fd4a 	bl	8004100 <HAL_MspInit>
}
 800566c:	2000      	movs	r0, #0
 800566e:	bd08      	pop	{r3, pc}
 8005670:	40023c00 	.word	0x40023c00

08005674 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8005674:	4a03      	ldr	r2, [pc, #12]	; (8005684 <HAL_IncTick+0x10>)
 8005676:	6811      	ldr	r1, [r2, #0]
 8005678:	4b03      	ldr	r3, [pc, #12]	; (8005688 <HAL_IncTick+0x14>)
 800567a:	781b      	ldrb	r3, [r3, #0]
 800567c:	440b      	add	r3, r1
 800567e:	6013      	str	r3, [r2, #0]
}
 8005680:	4770      	bx	lr
 8005682:	bf00      	nop
 8005684:	20000d74 	.word	0x20000d74
 8005688:	2000001c 	.word	0x2000001c

0800568c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800568c:	4b01      	ldr	r3, [pc, #4]	; (8005694 <HAL_GetTick+0x8>)
 800568e:	6818      	ldr	r0, [r3, #0]
}
 8005690:	4770      	bx	lr
 8005692:	bf00      	nop
 8005694:	20000d74 	.word	0x20000d74

08005698 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005698:	b538      	push	{r3, r4, r5, lr}
 800569a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800569c:	f7ff fff6 	bl	800568c <HAL_GetTick>
 80056a0:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80056a2:	f1b4 3fff 	cmp.w	r4, #4294967295
 80056a6:	d002      	beq.n	80056ae <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 80056a8:	4b04      	ldr	r3, [pc, #16]	; (80056bc <HAL_Delay+0x24>)
 80056aa:	781b      	ldrb	r3, [r3, #0]
 80056ac:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 80056ae:	f7ff ffed 	bl	800568c <HAL_GetTick>
 80056b2:	1b40      	subs	r0, r0, r5
 80056b4:	42a0      	cmp	r0, r4
 80056b6:	d3fa      	bcc.n	80056ae <HAL_Delay+0x16>
  {
  }
}
 80056b8:	bd38      	pop	{r3, r4, r5, pc}
 80056ba:	bf00      	nop
 80056bc:	2000001c 	.word	0x2000001c

080056c0 <HAL_CAN_Init>:
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80056c0:	2800      	cmp	r0, #0
 80056c2:	f000 808a 	beq.w	80057da <HAL_CAN_Init+0x11a>
{
 80056c6:	b538      	push	{r3, r4, r5, lr}
 80056c8:	4604      	mov	r4, r0
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80056ca:	f890 3020 	ldrb.w	r3, [r0, #32]
 80056ce:	b1d3      	cbz	r3, 8005706 <HAL_CAN_Init+0x46>
    HAL_CAN_MspInit(hcan);
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80056d0:	6822      	ldr	r2, [r4, #0]
 80056d2:	6813      	ldr	r3, [r2, #0]
 80056d4:	f043 0301 	orr.w	r3, r3, #1
 80056d8:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80056da:	f7ff ffd7 	bl	800568c <HAL_GetTick>
 80056de:	4605      	mov	r5, r0

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80056e0:	6823      	ldr	r3, [r4, #0]
 80056e2:	685a      	ldr	r2, [r3, #4]
 80056e4:	f012 0f01 	tst.w	r2, #1
 80056e8:	d110      	bne.n	800570c <HAL_CAN_Init+0x4c>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80056ea:	f7ff ffcf 	bl	800568c <HAL_GetTick>
 80056ee:	1b40      	subs	r0, r0, r5
 80056f0:	280a      	cmp	r0, #10
 80056f2:	d9f5      	bls.n	80056e0 <HAL_CAN_Init+0x20>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80056f4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80056f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80056fa:	6263      	str	r3, [r4, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80056fc:	2305      	movs	r3, #5
 80056fe:	f884 3020 	strb.w	r3, [r4, #32]

      return HAL_ERROR;
 8005702:	2001      	movs	r0, #1
  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;

  /* Return function status */
  return HAL_OK;
}
 8005704:	bd38      	pop	{r3, r4, r5, pc}
    HAL_CAN_MspInit(hcan);
 8005706:	f7fe fd1b 	bl	8004140 <HAL_CAN_MspInit>
 800570a:	e7e1      	b.n	80056d0 <HAL_CAN_Init+0x10>
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800570c:	681a      	ldr	r2, [r3, #0]
 800570e:	f022 0202 	bic.w	r2, r2, #2
 8005712:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8005714:	f7ff ffba 	bl	800568c <HAL_GetTick>
 8005718:	4605      	mov	r5, r0
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800571a:	6823      	ldr	r3, [r4, #0]
 800571c:	685a      	ldr	r2, [r3, #4]
 800571e:	f012 0f02 	tst.w	r2, #2
 8005722:	d00d      	beq.n	8005740 <HAL_CAN_Init+0x80>
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8005724:	f7ff ffb2 	bl	800568c <HAL_GetTick>
 8005728:	1b40      	subs	r0, r0, r5
 800572a:	280a      	cmp	r0, #10
 800572c:	d9f5      	bls.n	800571a <HAL_CAN_Init+0x5a>
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800572e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005730:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005734:	6263      	str	r3, [r4, #36]	; 0x24
      hcan->State = HAL_CAN_STATE_ERROR;
 8005736:	2305      	movs	r3, #5
 8005738:	f884 3020 	strb.w	r3, [r4, #32]
      return HAL_ERROR;
 800573c:	2001      	movs	r0, #1
 800573e:	e7e1      	b.n	8005704 <HAL_CAN_Init+0x44>
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8005740:	7e22      	ldrb	r2, [r4, #24]
 8005742:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8005744:	681a      	ldr	r2, [r3, #0]
 8005746:	bf0c      	ite	eq
 8005748:	f042 0280 	orreq.w	r2, r2, #128	; 0x80
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800574c:	f022 0280 	bicne.w	r2, r2, #128	; 0x80
 8005750:	601a      	str	r2, [r3, #0]
  if (hcan->Init.AutoBusOff == ENABLE)
 8005752:	7e63      	ldrb	r3, [r4, #25]
 8005754:	2b01      	cmp	r3, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8005756:	6822      	ldr	r2, [r4, #0]
 8005758:	6813      	ldr	r3, [r2, #0]
 800575a:	bf0c      	ite	eq
 800575c:	f043 0340 	orreq.w	r3, r3, #64	; 0x40
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8005760:	f023 0340 	bicne.w	r3, r3, #64	; 0x40
 8005764:	6013      	str	r3, [r2, #0]
  if (hcan->Init.AutoWakeUp == ENABLE)
 8005766:	7ea3      	ldrb	r3, [r4, #26]
 8005768:	2b01      	cmp	r3, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800576a:	6822      	ldr	r2, [r4, #0]
 800576c:	6813      	ldr	r3, [r2, #0]
 800576e:	bf0c      	ite	eq
 8005770:	f043 0320 	orreq.w	r3, r3, #32
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8005774:	f023 0320 	bicne.w	r3, r3, #32
 8005778:	6013      	str	r3, [r2, #0]
  if (hcan->Init.AutoRetransmission == ENABLE)
 800577a:	7ee3      	ldrb	r3, [r4, #27]
 800577c:	2b01      	cmp	r3, #1
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800577e:	6822      	ldr	r2, [r4, #0]
 8005780:	6813      	ldr	r3, [r2, #0]
 8005782:	bf0c      	ite	eq
 8005784:	f023 0310 	biceq.w	r3, r3, #16
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8005788:	f043 0310 	orrne.w	r3, r3, #16
 800578c:	6013      	str	r3, [r2, #0]
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800578e:	7f23      	ldrb	r3, [r4, #28]
 8005790:	2b01      	cmp	r3, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8005792:	6822      	ldr	r2, [r4, #0]
 8005794:	6813      	ldr	r3, [r2, #0]
 8005796:	bf0c      	ite	eq
 8005798:	f043 0308 	orreq.w	r3, r3, #8
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800579c:	f023 0308 	bicne.w	r3, r3, #8
 80057a0:	6013      	str	r3, [r2, #0]
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80057a2:	7f63      	ldrb	r3, [r4, #29]
 80057a4:	2b01      	cmp	r3, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80057a6:	6822      	ldr	r2, [r4, #0]
 80057a8:	6813      	ldr	r3, [r2, #0]
 80057aa:	bf0c      	ite	eq
 80057ac:	f043 0304 	orreq.w	r3, r3, #4
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80057b0:	f023 0304 	bicne.w	r3, r3, #4
 80057b4:	6013      	str	r3, [r2, #0]
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80057b6:	6821      	ldr	r1, [r4, #0]
 80057b8:	68a3      	ldr	r3, [r4, #8]
 80057ba:	68e2      	ldr	r2, [r4, #12]
 80057bc:	4313      	orrs	r3, r2
 80057be:	6922      	ldr	r2, [r4, #16]
 80057c0:	4313      	orrs	r3, r2
 80057c2:	6962      	ldr	r2, [r4, #20]
 80057c4:	4313      	orrs	r3, r2
 80057c6:	6862      	ldr	r2, [r4, #4]
 80057c8:	3a01      	subs	r2, #1
 80057ca:	4313      	orrs	r3, r2
 80057cc:	61cb      	str	r3, [r1, #28]
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80057ce:	2000      	movs	r0, #0
 80057d0:	6260      	str	r0, [r4, #36]	; 0x24
  hcan->State = HAL_CAN_STATE_READY;
 80057d2:	2301      	movs	r3, #1
 80057d4:	f884 3020 	strb.w	r3, [r4, #32]
  return HAL_OK;
 80057d8:	e794      	b.n	8005704 <HAL_CAN_Init+0x44>
    return HAL_ERROR;
 80057da:	2001      	movs	r0, #1
}
 80057dc:	4770      	bx	lr
	...

080057e0 <HAL_CAN_ConfigFilter>:
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
  HAL_CAN_StateTypeDef state = hcan->State;
 80057e0:	f890 3020 	ldrb.w	r3, [r0, #32]

  if ((state == HAL_CAN_STATE_READY) ||
 80057e4:	3b01      	subs	r3, #1
 80057e6:	b2db      	uxtb	r3, r3
 80057e8:	2b01      	cmp	r3, #1
 80057ea:	d905      	bls.n	80057f8 <HAL_CAN_ConfigFilter+0x18>
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80057ec:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80057ee:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80057f2:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 80057f4:	2001      	movs	r0, #1
  }
}
 80057f6:	4770      	bx	lr
{
 80057f8:	b530      	push	{r4, r5, lr}
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80057fa:	4b46      	ldr	r3, [pc, #280]	; (8005914 <HAL_CAN_ConfigFilter+0x134>)
 80057fc:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8005800:	f042 0201 	orr.w	r2, r2, #1
 8005804:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8005808:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800580c:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 8005810:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8005814:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8005818:	6a48      	ldr	r0, [r1, #36]	; 0x24
 800581a:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 800581e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8005822:	694a      	ldr	r2, [r1, #20]
 8005824:	f002 021f 	and.w	r2, r2, #31
 8005828:	2001      	movs	r0, #1
 800582a:	fa00 f202 	lsl.w	r2, r0, r2
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800582e:	f8d3 021c 	ldr.w	r0, [r3, #540]	; 0x21c
 8005832:	ea6f 0c02 	mvn.w	ip, r2
 8005836:	ea20 0002 	bic.w	r0, r0, r2
 800583a:	f8c3 021c 	str.w	r0, [r3, #540]	; 0x21c
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800583e:	69cb      	ldr	r3, [r1, #28]
 8005840:	b9c3      	cbnz	r3, 8005874 <HAL_CAN_ConfigFilter+0x94>
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8005842:	4b34      	ldr	r3, [pc, #208]	; (8005914 <HAL_CAN_ConfigFilter+0x134>)
 8005844:	f8d3 020c 	ldr.w	r0, [r3, #524]	; 0x20c
 8005848:	ea0c 0000 	and.w	r0, ip, r0
 800584c:	f8c3 020c 	str.w	r0, [r3, #524]	; 0x20c
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8005850:	6948      	ldr	r0, [r1, #20]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8005852:	888c      	ldrh	r4, [r1, #4]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8005854:	68cd      	ldr	r5, [r1, #12]
 8005856:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800585a:	3048      	adds	r0, #72	; 0x48
 800585c:	f843 4030 	str.w	r4, [r3, r0, lsl #3]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8005860:	688c      	ldr	r4, [r1, #8]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8005862:	8808      	ldrh	r0, [r1, #0]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8005864:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8005868:	694c      	ldr	r4, [r1, #20]
 800586a:	f104 0e48 	add.w	lr, r4, #72	; 0x48
 800586e:	eb03 03ce 	add.w	r3, r3, lr, lsl #3
 8005872:	6058      	str	r0, [r3, #4]
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8005874:	69cb      	ldr	r3, [r1, #28]
 8005876:	2b01      	cmp	r3, #1
 8005878:	d01e      	beq.n	80058b8 <HAL_CAN_ConfigFilter+0xd8>
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800587a:	698b      	ldr	r3, [r1, #24]
 800587c:	2b00      	cmp	r3, #0
 800587e:	d133      	bne.n	80058e8 <HAL_CAN_ConfigFilter+0x108>
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8005880:	4824      	ldr	r0, [pc, #144]	; (8005914 <HAL_CAN_ConfigFilter+0x134>)
 8005882:	f8d0 3204 	ldr.w	r3, [r0, #516]	; 0x204
 8005886:	ea0c 0303 	and.w	r3, ip, r3
 800588a:	f8c0 3204 	str.w	r3, [r0, #516]	; 0x204
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800588e:	690b      	ldr	r3, [r1, #16]
 8005890:	bb8b      	cbnz	r3, 80058f6 <HAL_CAN_ConfigFilter+0x116>
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8005892:	4820      	ldr	r0, [pc, #128]	; (8005914 <HAL_CAN_ConfigFilter+0x134>)
 8005894:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8005898:	ea0c 0303 	and.w	r3, ip, r3
 800589c:	f8c0 3214 	str.w	r3, [r0, #532]	; 0x214
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80058a0:	6a0b      	ldr	r3, [r1, #32]
 80058a2:	2b01      	cmp	r3, #1
 80058a4:	d02e      	beq.n	8005904 <HAL_CAN_ConfigFilter+0x124>
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80058a6:	4a1b      	ldr	r2, [pc, #108]	; (8005914 <HAL_CAN_ConfigFilter+0x134>)
 80058a8:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
 80058ac:	f023 0301 	bic.w	r3, r3, #1
 80058b0:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    return HAL_OK;
 80058b4:	2000      	movs	r0, #0
}
 80058b6:	bd30      	pop	{r4, r5, pc}
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80058b8:	4b16      	ldr	r3, [pc, #88]	; (8005914 <HAL_CAN_ConfigFilter+0x134>)
 80058ba:	f8d3 020c 	ldr.w	r0, [r3, #524]	; 0x20c
 80058be:	4310      	orrs	r0, r2
 80058c0:	f8c3 020c 	str.w	r0, [r3, #524]	; 0x20c
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80058c4:	6948      	ldr	r0, [r1, #20]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80058c6:	888c      	ldrh	r4, [r1, #4]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80058c8:	680d      	ldr	r5, [r1, #0]
 80058ca:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80058ce:	3048      	adds	r0, #72	; 0x48
 80058d0:	f843 4030 	str.w	r4, [r3, r0, lsl #3]
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80058d4:	694c      	ldr	r4, [r1, #20]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80058d6:	8988      	ldrh	r0, [r1, #12]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80058d8:	688d      	ldr	r5, [r1, #8]
 80058da:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80058de:	3448      	adds	r4, #72	; 0x48
 80058e0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80058e4:	6058      	str	r0, [r3, #4]
 80058e6:	e7c8      	b.n	800587a <HAL_CAN_ConfigFilter+0x9a>
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80058e8:	480a      	ldr	r0, [pc, #40]	; (8005914 <HAL_CAN_ConfigFilter+0x134>)
 80058ea:	f8d0 3204 	ldr.w	r3, [r0, #516]	; 0x204
 80058ee:	4313      	orrs	r3, r2
 80058f0:	f8c0 3204 	str.w	r3, [r0, #516]	; 0x204
 80058f4:	e7cb      	b.n	800588e <HAL_CAN_ConfigFilter+0xae>
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80058f6:	4807      	ldr	r0, [pc, #28]	; (8005914 <HAL_CAN_ConfigFilter+0x134>)
 80058f8:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80058fc:	4313      	orrs	r3, r2
 80058fe:	f8c0 3214 	str.w	r3, [r0, #532]	; 0x214
 8005902:	e7cd      	b.n	80058a0 <HAL_CAN_ConfigFilter+0xc0>
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8005904:	4903      	ldr	r1, [pc, #12]	; (8005914 <HAL_CAN_ConfigFilter+0x134>)
 8005906:	f8d1 321c 	ldr.w	r3, [r1, #540]	; 0x21c
 800590a:	431a      	orrs	r2, r3
 800590c:	f8c1 221c 	str.w	r2, [r1, #540]	; 0x21c
 8005910:	e7c9      	b.n	80058a6 <HAL_CAN_ConfigFilter+0xc6>
 8005912:	bf00      	nop
 8005914:	40006400 	.word	0x40006400

08005918 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8005918:	b570      	push	{r4, r5, r6, lr}
 800591a:	4604      	mov	r4, r0
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800591c:	f890 5020 	ldrb.w	r5, [r0, #32]
 8005920:	b2ed      	uxtb	r5, r5
 8005922:	2d01      	cmp	r5, #1
 8005924:	d006      	beq.n	8005934 <HAL_CAN_Start+0x1c>
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8005926:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8005928:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800592c:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 800592e:	2501      	movs	r5, #1
  }
}
 8005930:	4628      	mov	r0, r5
 8005932:	bd70      	pop	{r4, r5, r6, pc}
    hcan->State = HAL_CAN_STATE_LISTENING;
 8005934:	2302      	movs	r3, #2
 8005936:	f880 3020 	strb.w	r3, [r0, #32]
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800593a:	6802      	ldr	r2, [r0, #0]
 800593c:	6813      	ldr	r3, [r2, #0]
 800593e:	f023 0301 	bic.w	r3, r3, #1
 8005942:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8005944:	f7ff fea2 	bl	800568c <HAL_GetTick>
 8005948:	4606      	mov	r6, r0
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800594a:	6823      	ldr	r3, [r4, #0]
 800594c:	685b      	ldr	r3, [r3, #4]
 800594e:	f013 0f01 	tst.w	r3, #1
 8005952:	d00c      	beq.n	800596e <HAL_CAN_Start+0x56>
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8005954:	f7ff fe9a 	bl	800568c <HAL_GetTick>
 8005958:	1b83      	subs	r3, r0, r6
 800595a:	2b0a      	cmp	r3, #10
 800595c:	d9f5      	bls.n	800594a <HAL_CAN_Start+0x32>
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800595e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005960:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005964:	6263      	str	r3, [r4, #36]	; 0x24
        hcan->State = HAL_CAN_STATE_ERROR;
 8005966:	2305      	movs	r3, #5
 8005968:	f884 3020 	strb.w	r3, [r4, #32]
        return HAL_ERROR;
 800596c:	e7e0      	b.n	8005930 <HAL_CAN_Start+0x18>
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800596e:	2500      	movs	r5, #0
 8005970:	6265      	str	r5, [r4, #36]	; 0x24
    return HAL_OK;
 8005972:	e7dd      	b.n	8005930 <HAL_CAN_Start+0x18>

08005974 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8005974:	b570      	push	{r4, r5, r6, lr}
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8005976:	f890 c020 	ldrb.w	ip, [r0, #32]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800597a:	6804      	ldr	r4, [r0, #0]
 800597c:	68a4      	ldr	r4, [r4, #8]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800597e:	f10c 3cff 	add.w	ip, ip, #4294967295
 8005982:	fa5f fc8c 	uxtb.w	ip, ip
 8005986:	f1bc 0f01 	cmp.w	ip, #1
 800598a:	d86d      	bhi.n	8005a68 <HAL_CAN_AddTxMessage+0xf4>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800598c:	f014 5fe0 	tst.w	r4, #469762048	; 0x1c000000
 8005990:	d064      	beq.n	8005a5c <HAL_CAN_AddTxMessage+0xe8>
        ((tsr & CAN_TSR_TME1) != 0U) ||
        ((tsr & CAN_TSR_TME2) != 0U))
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8005992:	f3c4 6c01 	ubfx	ip, r4, #24, #2

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8005996:	f1bc 0f02 	cmp.w	ip, #2
 800599a:	d905      	bls.n	80059a8 <HAL_CAN_AddTxMessage+0x34>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 800599c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800599e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80059a2:	6243      	str	r3, [r0, #36]	; 0x24

        return HAL_ERROR;
 80059a4:	2001      	movs	r0, #1
 80059a6:	e064      	b.n	8005a72 <HAL_CAN_AddTxMessage+0xfe>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80059a8:	2401      	movs	r4, #1
 80059aa:	fa04 f40c 	lsl.w	r4, r4, ip
 80059ae:	601c      	str	r4, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80059b0:	688b      	ldr	r3, [r1, #8]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d13b      	bne.n	8005a2e <HAL_CAN_AddTxMessage+0xba>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80059b6:	6804      	ldr	r4, [r0, #0]
 80059b8:	680d      	ldr	r5, [r1, #0]
 80059ba:	68cb      	ldr	r3, [r1, #12]
 80059bc:	ea43 5545 	orr.w	r5, r3, r5, lsl #21
 80059c0:	f10c 0318 	add.w	r3, ip, #24
 80059c4:	011b      	lsls	r3, r3, #4
 80059c6:	50e5      	str	r5, [r4, r3]
                                                           pHeader->IDE |
                                                           pHeader->RTR);
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80059c8:	6803      	ldr	r3, [r0, #0]
 80059ca:	690c      	ldr	r4, [r1, #16]
 80059cc:	f10c 0e18 	add.w	lr, ip, #24
 80059d0:	eb03 130e 	add.w	r3, r3, lr, lsl #4
 80059d4:	605c      	str	r4, [r3, #4]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80059d6:	7d0b      	ldrb	r3, [r1, #20]
 80059d8:	2b01      	cmp	r3, #1
 80059da:	d035      	beq.n	8005a48 <HAL_CAN_AddTxMessage+0xd4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80059dc:	6801      	ldr	r1, [r0, #0]
 80059de:	79d4      	ldrb	r4, [r2, #7]
 80059e0:	7993      	ldrb	r3, [r2, #6]
 80059e2:	041b      	lsls	r3, r3, #16
 80059e4:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
 80059e8:	7914      	ldrb	r4, [r2, #4]
 80059ea:	4323      	orrs	r3, r4
 80059ec:	7954      	ldrb	r4, [r2, #5]
 80059ee:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
 80059f2:	eb01 110c 	add.w	r1, r1, ip, lsl #4
 80059f6:	f8c1 318c 	str.w	r3, [r1, #396]	; 0x18c
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80059fa:	6801      	ldr	r1, [r0, #0]
 80059fc:	78d4      	ldrb	r4, [r2, #3]
 80059fe:	7893      	ldrb	r3, [r2, #2]
 8005a00:	041b      	lsls	r3, r3, #16
 8005a02:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
 8005a06:	7814      	ldrb	r4, [r2, #0]
 8005a08:	4323      	orrs	r3, r4
 8005a0a:	7852      	ldrb	r2, [r2, #1]
 8005a0c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005a10:	eb01 110c 	add.w	r1, r1, ip, lsl #4
 8005a14:	f8c1 3188 	str.w	r3, [r1, #392]	; 0x188
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8005a18:	6803      	ldr	r3, [r0, #0]
 8005a1a:	eb03 1c0c 	add.w	ip, r3, ip, lsl #4
 8005a1e:	f8dc 3180 	ldr.w	r3, [ip, #384]	; 0x180
 8005a22:	f043 0301 	orr.w	r3, r3, #1
 8005a26:	f8cc 3180 	str.w	r3, [ip, #384]	; 0x180

      /* Return function status */
      return HAL_OK;
 8005a2a:	2000      	movs	r0, #0
 8005a2c:	e021      	b.n	8005a72 <HAL_CAN_AddTxMessage+0xfe>
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8005a2e:	6804      	ldr	r4, [r0, #0]
 8005a30:	684d      	ldr	r5, [r1, #4]
                                                           pHeader->IDE |
 8005a32:	68ce      	ldr	r6, [r1, #12]
 8005a34:	4333      	orrs	r3, r6
 8005a36:	ea43 03c5 	orr.w	r3, r3, r5, lsl #3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8005a3a:	f10c 0e18 	add.w	lr, ip, #24
 8005a3e:	ea4f 1e0e 	mov.w	lr, lr, lsl #4
 8005a42:	f844 300e 	str.w	r3, [r4, lr]
 8005a46:	e7bf      	b.n	80059c8 <HAL_CAN_AddTxMessage+0x54>
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8005a48:	6803      	ldr	r3, [r0, #0]
 8005a4a:	eb03 130c 	add.w	r3, r3, ip, lsl #4
 8005a4e:	f8d3 1184 	ldr.w	r1, [r3, #388]	; 0x184
 8005a52:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8005a56:	f8c3 1184 	str.w	r1, [r3, #388]	; 0x184
 8005a5a:	e7bf      	b.n	80059dc <HAL_CAN_AddTxMessage+0x68>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8005a5c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8005a5e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005a62:	6243      	str	r3, [r0, #36]	; 0x24

      return HAL_ERROR;
 8005a64:	2001      	movs	r0, #1
 8005a66:	e004      	b.n	8005a72 <HAL_CAN_AddTxMessage+0xfe>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005a68:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8005a6a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005a6e:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 8005a70:	2001      	movs	r0, #1
  }
}
 8005a72:	bd70      	pop	{r4, r5, r6, pc}

08005a74 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
  HAL_CAN_StateTypeDef state = hcan->State;
 8005a74:	f890 c020 	ldrb.w	ip, [r0, #32]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8005a78:	f10c 3cff 	add.w	ip, ip, #4294967295
 8005a7c:	fa5f fc8c 	uxtb.w	ip, ip
 8005a80:	f1bc 0f01 	cmp.w	ip, #1
 8005a84:	f200 8092 	bhi.w	8005bac <HAL_CAN_GetRxMessage+0x138>
{
 8005a88:	b430      	push	{r4, r5}
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8005a8a:	b959      	cbnz	r1, 8005aa4 <HAL_CAN_GetRxMessage+0x30>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8005a8c:	6804      	ldr	r4, [r0, #0]
 8005a8e:	68e4      	ldr	r4, [r4, #12]
 8005a90:	f014 0f03 	tst.w	r4, #3
 8005a94:	d111      	bne.n	8005aba <HAL_CAN_GetRxMessage+0x46>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8005a96:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8005a98:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005a9c:	6243      	str	r3, [r0, #36]	; 0x24

        return HAL_ERROR;
 8005a9e:	2001      	movs	r0, #1
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;

    return HAL_ERROR;
  }
}
 8005aa0:	bc30      	pop	{r4, r5}
 8005aa2:	4770      	bx	lr
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8005aa4:	6804      	ldr	r4, [r0, #0]
 8005aa6:	6924      	ldr	r4, [r4, #16]
 8005aa8:	f014 0f03 	tst.w	r4, #3
 8005aac:	d105      	bne.n	8005aba <HAL_CAN_GetRxMessage+0x46>
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8005aae:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8005ab0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005ab4:	6243      	str	r3, [r0, #36]	; 0x24
        return HAL_ERROR;
 8005ab6:	2001      	movs	r0, #1
 8005ab8:	e7f2      	b.n	8005aa0 <HAL_CAN_GetRxMessage+0x2c>
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8005aba:	f101 041b 	add.w	r4, r1, #27
 8005abe:	0124      	lsls	r4, r4, #4
 8005ac0:	6805      	ldr	r5, [r0, #0]
 8005ac2:	592c      	ldr	r4, [r5, r4]
 8005ac4:	f004 0404 	and.w	r4, r4, #4
 8005ac8:	6094      	str	r4, [r2, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8005aca:	2c00      	cmp	r4, #0
 8005acc:	d15f      	bne.n	8005b8e <HAL_CAN_GetRxMessage+0x11a>
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8005ace:	f101 041b 	add.w	r4, r1, #27
 8005ad2:	0124      	lsls	r4, r4, #4
 8005ad4:	6805      	ldr	r5, [r0, #0]
 8005ad6:	592c      	ldr	r4, [r5, r4]
 8005ad8:	0d64      	lsrs	r4, r4, #21
 8005ada:	6014      	str	r4, [r2, #0]
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8005adc:	6804      	ldr	r4, [r0, #0]
 8005ade:	f101 0c1b 	add.w	ip, r1, #27
 8005ae2:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 8005ae6:	f854 400c 	ldr.w	r4, [r4, ip]
 8005aea:	f004 0402 	and.w	r4, r4, #2
 8005aee:	60d4      	str	r4, [r2, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8005af0:	6804      	ldr	r4, [r0, #0]
 8005af2:	4464      	add	r4, ip
 8005af4:	6864      	ldr	r4, [r4, #4]
 8005af6:	f004 040f 	and.w	r4, r4, #15
 8005afa:	6114      	str	r4, [r2, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8005afc:	6804      	ldr	r4, [r0, #0]
 8005afe:	4464      	add	r4, ip
 8005b00:	6864      	ldr	r4, [r4, #4]
 8005b02:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8005b06:	6194      	str	r4, [r2, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8005b08:	6804      	ldr	r4, [r0, #0]
 8005b0a:	4464      	add	r4, ip
 8005b0c:	6864      	ldr	r4, [r4, #4]
 8005b0e:	0c24      	lsrs	r4, r4, #16
 8005b10:	6154      	str	r4, [r2, #20]
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8005b12:	6802      	ldr	r2, [r0, #0]
 8005b14:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8005b18:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 8005b1c:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8005b1e:	6802      	ldr	r2, [r0, #0]
 8005b20:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8005b24:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 8005b28:	0a12      	lsrs	r2, r2, #8
 8005b2a:	705a      	strb	r2, [r3, #1]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8005b2c:	6802      	ldr	r2, [r0, #0]
 8005b2e:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8005b32:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 8005b36:	0c12      	lsrs	r2, r2, #16
 8005b38:	709a      	strb	r2, [r3, #2]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8005b3a:	6802      	ldr	r2, [r0, #0]
 8005b3c:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8005b40:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 8005b44:	0e12      	lsrs	r2, r2, #24
 8005b46:	70da      	strb	r2, [r3, #3]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8005b48:	6802      	ldr	r2, [r0, #0]
 8005b4a:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8005b4e:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 8005b52:	711a      	strb	r2, [r3, #4]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8005b54:	6802      	ldr	r2, [r0, #0]
 8005b56:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8005b5a:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 8005b5e:	0a12      	lsrs	r2, r2, #8
 8005b60:	715a      	strb	r2, [r3, #5]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8005b62:	6802      	ldr	r2, [r0, #0]
 8005b64:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8005b68:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 8005b6c:	0c12      	lsrs	r2, r2, #16
 8005b6e:	719a      	strb	r2, [r3, #6]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8005b70:	6802      	ldr	r2, [r0, #0]
 8005b72:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8005b76:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 8005b7a:	0e12      	lsrs	r2, r2, #24
 8005b7c:	71da      	strb	r2, [r3, #7]
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8005b7e:	b971      	cbnz	r1, 8005b9e <HAL_CAN_GetRxMessage+0x12a>
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8005b80:	6802      	ldr	r2, [r0, #0]
 8005b82:	68d3      	ldr	r3, [r2, #12]
 8005b84:	f043 0320 	orr.w	r3, r3, #32
 8005b88:	60d3      	str	r3, [r2, #12]
    return HAL_OK;
 8005b8a:	2000      	movs	r0, #0
 8005b8c:	e788      	b.n	8005aa0 <HAL_CAN_GetRxMessage+0x2c>
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8005b8e:	f101 041b 	add.w	r4, r1, #27
 8005b92:	0124      	lsls	r4, r4, #4
 8005b94:	6805      	ldr	r5, [r0, #0]
 8005b96:	592c      	ldr	r4, [r5, r4]
 8005b98:	08e4      	lsrs	r4, r4, #3
 8005b9a:	6054      	str	r4, [r2, #4]
 8005b9c:	e79e      	b.n	8005adc <HAL_CAN_GetRxMessage+0x68>
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8005b9e:	6802      	ldr	r2, [r0, #0]
 8005ba0:	6913      	ldr	r3, [r2, #16]
 8005ba2:	f043 0320 	orr.w	r3, r3, #32
 8005ba6:	6113      	str	r3, [r2, #16]
    return HAL_OK;
 8005ba8:	2000      	movs	r0, #0
 8005baa:	e779      	b.n	8005aa0 <HAL_CAN_GetRxMessage+0x2c>
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005bac:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8005bae:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005bb2:	6243      	str	r3, [r0, #36]	; 0x24
    return HAL_ERROR;
 8005bb4:	2001      	movs	r0, #1
}
 8005bb6:	4770      	bx	lr

08005bb8 <HAL_CAN_ActivateNotification>:
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
  HAL_CAN_StateTypeDef state = hcan->State;
 8005bb8:	f890 3020 	ldrb.w	r3, [r0, #32]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8005bbc:	3b01      	subs	r3, #1
 8005bbe:	b2db      	uxtb	r3, r3
 8005bc0:	2b01      	cmp	r3, #1
 8005bc2:	d905      	bls.n	8005bd0 <HAL_CAN_ActivateNotification+0x18>
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005bc4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8005bc6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005bca:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 8005bcc:	2001      	movs	r0, #1
  }
}
 8005bce:	4770      	bx	lr
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8005bd0:	6802      	ldr	r2, [r0, #0]
 8005bd2:	6953      	ldr	r3, [r2, #20]
 8005bd4:	4319      	orrs	r1, r3
 8005bd6:	6151      	str	r1, [r2, #20]
    return HAL_OK;
 8005bd8:	2000      	movs	r0, #0
 8005bda:	4770      	bx	lr

08005bdc <HAL_CAN_TxMailbox0CompleteCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8005bdc:	4770      	bx	lr

08005bde <HAL_CAN_TxMailbox1CompleteCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8005bde:	4770      	bx	lr

08005be0 <HAL_CAN_TxMailbox2CompleteCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8005be0:	4770      	bx	lr

08005be2 <HAL_CAN_TxMailbox0AbortCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8005be2:	4770      	bx	lr

08005be4 <HAL_CAN_TxMailbox1AbortCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8005be4:	4770      	bx	lr

08005be6 <HAL_CAN_TxMailbox2AbortCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8005be6:	4770      	bx	lr

08005be8 <HAL_CAN_RxFifo0FullCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8005be8:	4770      	bx	lr

08005bea <HAL_CAN_RxFifo1MsgPendingCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8005bea:	4770      	bx	lr

08005bec <HAL_CAN_RxFifo1FullCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8005bec:	4770      	bx	lr

08005bee <HAL_CAN_SleepCallback>:
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8005bee:	4770      	bx	lr

08005bf0 <HAL_CAN_WakeUpFromRxMsgCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8005bf0:	4770      	bx	lr

08005bf2 <HAL_CAN_ErrorCallback>:
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8005bf2:	4770      	bx	lr

08005bf4 <HAL_CAN_IRQHandler>:
{
 8005bf4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bf8:	4605      	mov	r5, r0
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8005bfa:	6803      	ldr	r3, [r0, #0]
 8005bfc:	695c      	ldr	r4, [r3, #20]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8005bfe:	f8d3 8004 	ldr.w	r8, [r3, #4]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8005c02:	689f      	ldr	r7, [r3, #8]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8005c04:	f8d3 b00c 	ldr.w	fp, [r3, #12]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8005c08:	f8d3 a010 	ldr.w	sl, [r3, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8005c0c:	f8d3 9018 	ldr.w	r9, [r3, #24]
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8005c10:	f014 0601 	ands.w	r6, r4, #1
 8005c14:	d03b      	beq.n	8005c8e <HAL_CAN_IRQHandler+0x9a>
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8005c16:	f017 0601 	ands.w	r6, r7, #1
 8005c1a:	d016      	beq.n	8005c4a <HAL_CAN_IRQHandler+0x56>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8005c1c:	2201      	movs	r2, #1
 8005c1e:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8005c20:	f017 0f02 	tst.w	r7, #2
 8005c24:	d108      	bne.n	8005c38 <HAL_CAN_IRQHandler+0x44>
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8005c26:	f017 0f04 	tst.w	r7, #4
 8005c2a:	d10c      	bne.n	8005c46 <HAL_CAN_IRQHandler+0x52>
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8005c2c:	f017 0608 	ands.w	r6, r7, #8
 8005c30:	d006      	beq.n	8005c40 <HAL_CAN_IRQHandler+0x4c>
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8005c32:	f44f 5680 	mov.w	r6, #4096	; 0x1000
 8005c36:	e008      	b.n	8005c4a <HAL_CAN_IRQHandler+0x56>
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8005c38:	f7ff ffd0 	bl	8005bdc <HAL_CAN_TxMailbox0CompleteCallback>
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8005c3c:	2600      	movs	r6, #0
 8005c3e:	e004      	b.n	8005c4a <HAL_CAN_IRQHandler+0x56>
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8005c40:	f7ff ffcf 	bl	8005be2 <HAL_CAN_TxMailbox0AbortCallback>
 8005c44:	e001      	b.n	8005c4a <HAL_CAN_IRQHandler+0x56>
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8005c46:	f44f 6600 	mov.w	r6, #2048	; 0x800
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8005c4a:	f417 7f80 	tst.w	r7, #256	; 0x100
 8005c4e:	d00d      	beq.n	8005c6c <HAL_CAN_IRQHandler+0x78>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8005c50:	682b      	ldr	r3, [r5, #0]
 8005c52:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005c56:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8005c58:	f417 7f00 	tst.w	r7, #512	; 0x200
 8005c5c:	f040 8087 	bne.w	8005d6e <HAL_CAN_IRQHandler+0x17a>
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8005c60:	f417 6f80 	tst.w	r7, #1024	; 0x400
 8005c64:	f000 8087 	beq.w	8005d76 <HAL_CAN_IRQHandler+0x182>
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8005c68:	f446 5600 	orr.w	r6, r6, #8192	; 0x2000
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8005c6c:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 8005c70:	d00d      	beq.n	8005c8e <HAL_CAN_IRQHandler+0x9a>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8005c72:	682b      	ldr	r3, [r5, #0]
 8005c74:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8005c78:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8005c7a:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 8005c7e:	f040 8084 	bne.w	8005d8a <HAL_CAN_IRQHandler+0x196>
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8005c82:	f417 2f80 	tst.w	r7, #262144	; 0x40000
 8005c86:	f000 8084 	beq.w	8005d92 <HAL_CAN_IRQHandler+0x19e>
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8005c8a:	f446 4600 	orr.w	r6, r6, #32768	; 0x8000
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8005c8e:	f014 0f08 	tst.w	r4, #8
 8005c92:	d007      	beq.n	8005ca4 <HAL_CAN_IRQHandler+0xb0>
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8005c94:	f01b 0f10 	tst.w	fp, #16
 8005c98:	d004      	beq.n	8005ca4 <HAL_CAN_IRQHandler+0xb0>
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8005c9a:	f446 7600 	orr.w	r6, r6, #512	; 0x200
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8005c9e:	682b      	ldr	r3, [r5, #0]
 8005ca0:	2210      	movs	r2, #16
 8005ca2:	60da      	str	r2, [r3, #12]
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8005ca4:	f014 0f04 	tst.w	r4, #4
 8005ca8:	d002      	beq.n	8005cb0 <HAL_CAN_IRQHandler+0xbc>
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8005caa:	f01b 0f08 	tst.w	fp, #8
 8005cae:	d17a      	bne.n	8005da6 <HAL_CAN_IRQHandler+0x1b2>
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8005cb0:	f014 0f02 	tst.w	r4, #2
 8005cb4:	d004      	beq.n	8005cc0 <HAL_CAN_IRQHandler+0xcc>
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8005cb6:	682b      	ldr	r3, [r5, #0]
 8005cb8:	68db      	ldr	r3, [r3, #12]
 8005cba:	f013 0f03 	tst.w	r3, #3
 8005cbe:	d179      	bne.n	8005db4 <HAL_CAN_IRQHandler+0x1c0>
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8005cc0:	f014 0f40 	tst.w	r4, #64	; 0x40
 8005cc4:	d007      	beq.n	8005cd6 <HAL_CAN_IRQHandler+0xe2>
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8005cc6:	f01a 0f10 	tst.w	sl, #16
 8005cca:	d004      	beq.n	8005cd6 <HAL_CAN_IRQHandler+0xe2>
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8005ccc:	f446 6680 	orr.w	r6, r6, #1024	; 0x400
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8005cd0:	682b      	ldr	r3, [r5, #0]
 8005cd2:	2210      	movs	r2, #16
 8005cd4:	611a      	str	r2, [r3, #16]
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8005cd6:	f014 0f20 	tst.w	r4, #32
 8005cda:	d002      	beq.n	8005ce2 <HAL_CAN_IRQHandler+0xee>
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8005cdc:	f01a 0f08 	tst.w	sl, #8
 8005ce0:	d16c      	bne.n	8005dbc <HAL_CAN_IRQHandler+0x1c8>
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8005ce2:	f014 0f10 	tst.w	r4, #16
 8005ce6:	d004      	beq.n	8005cf2 <HAL_CAN_IRQHandler+0xfe>
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8005ce8:	682b      	ldr	r3, [r5, #0]
 8005cea:	691b      	ldr	r3, [r3, #16]
 8005cec:	f013 0f03 	tst.w	r3, #3
 8005cf0:	d16b      	bne.n	8005dca <HAL_CAN_IRQHandler+0x1d6>
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8005cf2:	f414 3f00 	tst.w	r4, #131072	; 0x20000
 8005cf6:	d002      	beq.n	8005cfe <HAL_CAN_IRQHandler+0x10a>
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8005cf8:	f018 0f10 	tst.w	r8, #16
 8005cfc:	d169      	bne.n	8005dd2 <HAL_CAN_IRQHandler+0x1de>
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8005cfe:	f414 3f80 	tst.w	r4, #65536	; 0x10000
 8005d02:	d002      	beq.n	8005d0a <HAL_CAN_IRQHandler+0x116>
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8005d04:	f018 0f08 	tst.w	r8, #8
 8005d08:	d16a      	bne.n	8005de0 <HAL_CAN_IRQHandler+0x1ec>
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8005d0a:	f414 4f00 	tst.w	r4, #32768	; 0x8000
 8005d0e:	f000 8084 	beq.w	8005e1a <HAL_CAN_IRQHandler+0x226>
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8005d12:	f018 0f04 	tst.w	r8, #4
 8005d16:	d07d      	beq.n	8005e14 <HAL_CAN_IRQHandler+0x220>
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8005d18:	f414 7f80 	tst.w	r4, #256	; 0x100
 8005d1c:	d004      	beq.n	8005d28 <HAL_CAN_IRQHandler+0x134>
 8005d1e:	f019 0f01 	tst.w	r9, #1
        errorcode |= HAL_CAN_ERROR_EWG;
 8005d22:	bf18      	it	ne
 8005d24:	f046 0601 	orrne.w	r6, r6, #1
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8005d28:	f414 7f00 	tst.w	r4, #512	; 0x200
 8005d2c:	d004      	beq.n	8005d38 <HAL_CAN_IRQHandler+0x144>
 8005d2e:	f019 0f02 	tst.w	r9, #2
        errorcode |= HAL_CAN_ERROR_EPV;
 8005d32:	bf18      	it	ne
 8005d34:	f046 0602 	orrne.w	r6, r6, #2
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8005d38:	f414 6f80 	tst.w	r4, #1024	; 0x400
 8005d3c:	d004      	beq.n	8005d48 <HAL_CAN_IRQHandler+0x154>
 8005d3e:	f019 0f04 	tst.w	r9, #4
        errorcode |= HAL_CAN_ERROR_BOF;
 8005d42:	bf18      	it	ne
 8005d44:	f046 0604 	orrne.w	r6, r6, #4
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8005d48:	f414 6f00 	tst.w	r4, #2048	; 0x800
 8005d4c:	d062      	beq.n	8005e14 <HAL_CAN_IRQHandler+0x220>
 8005d4e:	f019 0970 	ands.w	r9, r9, #112	; 0x70
 8005d52:	d05f      	beq.n	8005e14 <HAL_CAN_IRQHandler+0x220>
        switch (esrflags & CAN_ESR_LEC)
 8005d54:	f1b9 0f40 	cmp.w	r9, #64	; 0x40
 8005d58:	d065      	beq.n	8005e26 <HAL_CAN_IRQHandler+0x232>
 8005d5a:	d84e      	bhi.n	8005dfa <HAL_CAN_IRQHandler+0x206>
 8005d5c:	f1b9 0f20 	cmp.w	r9, #32
 8005d60:	d05e      	beq.n	8005e20 <HAL_CAN_IRQHandler+0x22c>
 8005d62:	f1b9 0f30 	cmp.w	r9, #48	; 0x30
 8005d66:	d142      	bne.n	8005dee <HAL_CAN_IRQHandler+0x1fa>
            errorcode |= HAL_CAN_ERROR_ACK;
 8005d68:	f046 0620 	orr.w	r6, r6, #32
            break;
 8005d6c:	e04d      	b.n	8005e0a <HAL_CAN_IRQHandler+0x216>
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8005d6e:	4628      	mov	r0, r5
 8005d70:	f7ff ff35 	bl	8005bde <HAL_CAN_TxMailbox1CompleteCallback>
 8005d74:	e77a      	b.n	8005c6c <HAL_CAN_IRQHandler+0x78>
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8005d76:	f417 6f00 	tst.w	r7, #2048	; 0x800
 8005d7a:	d002      	beq.n	8005d82 <HAL_CAN_IRQHandler+0x18e>
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8005d7c:	f446 4680 	orr.w	r6, r6, #16384	; 0x4000
 8005d80:	e774      	b.n	8005c6c <HAL_CAN_IRQHandler+0x78>
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8005d82:	4628      	mov	r0, r5
 8005d84:	f7ff ff2e 	bl	8005be4 <HAL_CAN_TxMailbox1AbortCallback>
 8005d88:	e770      	b.n	8005c6c <HAL_CAN_IRQHandler+0x78>
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8005d8a:	4628      	mov	r0, r5
 8005d8c:	f7ff ff28 	bl	8005be0 <HAL_CAN_TxMailbox2CompleteCallback>
 8005d90:	e77d      	b.n	8005c8e <HAL_CAN_IRQHandler+0x9a>
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8005d92:	f417 2f00 	tst.w	r7, #524288	; 0x80000
 8005d96:	d002      	beq.n	8005d9e <HAL_CAN_IRQHandler+0x1aa>
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8005d98:	f446 3680 	orr.w	r6, r6, #65536	; 0x10000
 8005d9c:	e777      	b.n	8005c8e <HAL_CAN_IRQHandler+0x9a>
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8005d9e:	4628      	mov	r0, r5
 8005da0:	f7ff ff21 	bl	8005be6 <HAL_CAN_TxMailbox2AbortCallback>
 8005da4:	e773      	b.n	8005c8e <HAL_CAN_IRQHandler+0x9a>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8005da6:	682b      	ldr	r3, [r5, #0]
 8005da8:	2208      	movs	r2, #8
 8005daa:	60da      	str	r2, [r3, #12]
      HAL_CAN_RxFifo0FullCallback(hcan);
 8005dac:	4628      	mov	r0, r5
 8005dae:	f7ff ff1b 	bl	8005be8 <HAL_CAN_RxFifo0FullCallback>
 8005db2:	e77d      	b.n	8005cb0 <HAL_CAN_IRQHandler+0xbc>
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8005db4:	4628      	mov	r0, r5
 8005db6:	f7fd fbe7 	bl	8003588 <HAL_CAN_RxFifo0MsgPendingCallback>
 8005dba:	e781      	b.n	8005cc0 <HAL_CAN_IRQHandler+0xcc>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8005dbc:	682b      	ldr	r3, [r5, #0]
 8005dbe:	2208      	movs	r2, #8
 8005dc0:	611a      	str	r2, [r3, #16]
      HAL_CAN_RxFifo1FullCallback(hcan);
 8005dc2:	4628      	mov	r0, r5
 8005dc4:	f7ff ff12 	bl	8005bec <HAL_CAN_RxFifo1FullCallback>
 8005dc8:	e78b      	b.n	8005ce2 <HAL_CAN_IRQHandler+0xee>
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8005dca:	4628      	mov	r0, r5
 8005dcc:	f7ff ff0d 	bl	8005bea <HAL_CAN_RxFifo1MsgPendingCallback>
 8005dd0:	e78f      	b.n	8005cf2 <HAL_CAN_IRQHandler+0xfe>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8005dd2:	682b      	ldr	r3, [r5, #0]
 8005dd4:	2210      	movs	r2, #16
 8005dd6:	605a      	str	r2, [r3, #4]
      HAL_CAN_SleepCallback(hcan);
 8005dd8:	4628      	mov	r0, r5
 8005dda:	f7ff ff08 	bl	8005bee <HAL_CAN_SleepCallback>
 8005dde:	e78e      	b.n	8005cfe <HAL_CAN_IRQHandler+0x10a>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8005de0:	682b      	ldr	r3, [r5, #0]
 8005de2:	2208      	movs	r2, #8
 8005de4:	605a      	str	r2, [r3, #4]
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8005de6:	4628      	mov	r0, r5
 8005de8:	f7ff ff02 	bl	8005bf0 <HAL_CAN_WakeUpFromRxMsgCallback>
 8005dec:	e78d      	b.n	8005d0a <HAL_CAN_IRQHandler+0x116>
        switch (esrflags & CAN_ESR_LEC)
 8005dee:	f1b9 0f10 	cmp.w	r9, #16
 8005df2:	d10a      	bne.n	8005e0a <HAL_CAN_IRQHandler+0x216>
            errorcode |= HAL_CAN_ERROR_STF;
 8005df4:	f046 0608 	orr.w	r6, r6, #8
            break;
 8005df8:	e007      	b.n	8005e0a <HAL_CAN_IRQHandler+0x216>
        switch (esrflags & CAN_ESR_LEC)
 8005dfa:	f1b9 0f50 	cmp.w	r9, #80	; 0x50
 8005dfe:	d015      	beq.n	8005e2c <HAL_CAN_IRQHandler+0x238>
 8005e00:	f1b9 0f60 	cmp.w	r9, #96	; 0x60
            errorcode |= HAL_CAN_ERROR_CRC;
 8005e04:	bf08      	it	eq
 8005e06:	f446 7680 	orreq.w	r6, r6, #256	; 0x100
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8005e0a:	682a      	ldr	r2, [r5, #0]
 8005e0c:	6993      	ldr	r3, [r2, #24]
 8005e0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e12:	6193      	str	r3, [r2, #24]
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8005e14:	682b      	ldr	r3, [r5, #0]
 8005e16:	2204      	movs	r2, #4
 8005e18:	605a      	str	r2, [r3, #4]
  if (errorcode != HAL_CAN_ERROR_NONE)
 8005e1a:	b956      	cbnz	r6, 8005e32 <HAL_CAN_IRQHandler+0x23e>
}
 8005e1c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
            errorcode |= HAL_CAN_ERROR_FOR;
 8005e20:	f046 0610 	orr.w	r6, r6, #16
            break;
 8005e24:	e7f1      	b.n	8005e0a <HAL_CAN_IRQHandler+0x216>
            errorcode |= HAL_CAN_ERROR_BR;
 8005e26:	f046 0640 	orr.w	r6, r6, #64	; 0x40
            break;
 8005e2a:	e7ee      	b.n	8005e0a <HAL_CAN_IRQHandler+0x216>
            errorcode |= HAL_CAN_ERROR_BD;
 8005e2c:	f046 0680 	orr.w	r6, r6, #128	; 0x80
            break;
 8005e30:	e7eb      	b.n	8005e0a <HAL_CAN_IRQHandler+0x216>
    hcan->ErrorCode |= errorcode;
 8005e32:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005e34:	431e      	orrs	r6, r3
 8005e36:	626e      	str	r6, [r5, #36]	; 0x24
    HAL_CAN_ErrorCallback(hcan);
 8005e38:	4628      	mov	r0, r5
 8005e3a:	f7ff feda 	bl	8005bf2 <HAL_CAN_ErrorCallback>
}
 8005e3e:	e7ed      	b.n	8005e1c <HAL_CAN_IRQHandler+0x228>

08005e40 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005e40:	4907      	ldr	r1, [pc, #28]	; (8005e60 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8005e42:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005e44:	0203      	lsls	r3, r0, #8
 8005e46:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005e4a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005e4e:	0412      	lsls	r2, r2, #16
 8005e50:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005e52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005e54:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005e58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8005e5c:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8005e5e:	4770      	bx	lr
 8005e60:	e000ed00 	.word	0xe000ed00

08005e64 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005e64:	b500      	push	{lr}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005e66:	4b18      	ldr	r3, [pc, #96]	; (8005ec8 <HAL_NVIC_SetPriority+0x64>)
 8005e68:	68db      	ldr	r3, [r3, #12]
 8005e6a:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005e6e:	f1c3 0c07 	rsb	ip, r3, #7
 8005e72:	f1bc 0f04 	cmp.w	ip, #4
 8005e76:	bf28      	it	cs
 8005e78:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005e7c:	f103 0e04 	add.w	lr, r3, #4
 8005e80:	f1be 0f06 	cmp.w	lr, #6
 8005e84:	bf8c      	ite	hi
 8005e86:	3b03      	subhi	r3, #3
 8005e88:	2300      	movls	r3, #0

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005e8a:	f04f 3eff 	mov.w	lr, #4294967295
 8005e8e:	fa0e fc0c 	lsl.w	ip, lr, ip
 8005e92:	ea21 010c 	bic.w	r1, r1, ip
 8005e96:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005e98:	fa0e f303 	lsl.w	r3, lr, r3
 8005e9c:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005ea0:	4311      	orrs	r1, r2
  if ((int32_t)(IRQn) >= 0)
 8005ea2:	2800      	cmp	r0, #0
 8005ea4:	db09      	blt.n	8005eba <HAL_NVIC_SetPriority+0x56>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005ea6:	0109      	lsls	r1, r1, #4
 8005ea8:	b2c9      	uxtb	r1, r1
 8005eaa:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8005eae:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8005eb2:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8005eb6:	f85d fb04 	ldr.w	pc, [sp], #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005eba:	f000 000f 	and.w	r0, r0, #15
 8005ebe:	0109      	lsls	r1, r1, #4
 8005ec0:	b2c9      	uxtb	r1, r1
 8005ec2:	4b02      	ldr	r3, [pc, #8]	; (8005ecc <HAL_NVIC_SetPriority+0x68>)
 8005ec4:	5419      	strb	r1, [r3, r0]
 8005ec6:	e7f6      	b.n	8005eb6 <HAL_NVIC_SetPriority+0x52>
 8005ec8:	e000ed00 	.word	0xe000ed00
 8005ecc:	e000ed14 	.word	0xe000ed14

08005ed0 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8005ed0:	2800      	cmp	r0, #0
 8005ed2:	db08      	blt.n	8005ee6 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005ed4:	0942      	lsrs	r2, r0, #5
 8005ed6:	f000 001f 	and.w	r0, r0, #31
 8005eda:	2301      	movs	r3, #1
 8005edc:	fa03 f000 	lsl.w	r0, r3, r0
 8005ee0:	4b01      	ldr	r3, [pc, #4]	; (8005ee8 <HAL_NVIC_EnableIRQ+0x18>)
 8005ee2:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8005ee6:	4770      	bx	lr
 8005ee8:	e000e100 	.word	0xe000e100

08005eec <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005eec:	3801      	subs	r0, #1
 8005eee:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8005ef2:	d20b      	bcs.n	8005f0c <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005ef4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8005ef8:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005efa:	4a05      	ldr	r2, [pc, #20]	; (8005f10 <HAL_SYSTICK_Config+0x24>)
 8005efc:	21f0      	movs	r1, #240	; 0xf0
 8005efe:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005f02:	2000      	movs	r0, #0
 8005f04:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005f06:	2207      	movs	r2, #7
 8005f08:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005f0a:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8005f0c:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8005f0e:	4770      	bx	lr
 8005f10:	e000ed00 	.word	0xe000ed00

08005f14 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005f14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f18:	b083      	sub	sp, #12
 8005f1a:	2200      	movs	r2, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005f1c:	4613      	mov	r3, r2
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005f1e:	4d7b      	ldr	r5, [pc, #492]	; (800610c <HAL_GPIO_Init+0x1f8>)
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005f20:	4c7b      	ldr	r4, [pc, #492]	; (8006110 <HAL_GPIO_Init+0x1fc>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005f22:	f8df 81f4 	ldr.w	r8, [pc, #500]	; 8006118 <HAL_GPIO_Init+0x204>
 8005f26:	e04d      	b.n	8005fc4 <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 8005f28:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005f2a:	f04f 0903 	mov.w	r9, #3
 8005f2e:	fa09 f902 	lsl.w	r9, r9, r2
 8005f32:	ea27 0909 	bic.w	r9, r7, r9
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005f36:	68cf      	ldr	r7, [r1, #12]
 8005f38:	4097      	lsls	r7, r2
 8005f3a:	ea47 0709 	orr.w	r7, r7, r9
        GPIOx->OSPEEDR = temp;
 8005f3e:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8005f40:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005f42:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005f46:	684f      	ldr	r7, [r1, #4]
 8005f48:	f3c7 1700 	ubfx	r7, r7, #4, #1
 8005f4c:	409f      	lsls	r7, r3
 8005f4e:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8005f52:	6047      	str	r7, [r0, #4]
 8005f54:	e046      	b.n	8005fe4 <HAL_GPIO_Init+0xd0>
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005f56:	f04f 0e00 	mov.w	lr, #0
 8005f5a:	fa0e fe0b 	lsl.w	lr, lr, fp
 8005f5e:	ea4e 0e0a 	orr.w	lr, lr, sl
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005f62:	f8c7 e008 	str.w	lr, [r7, #8]
        temp = EXTI->RTSR;
 8005f66:	68a7      	ldr	r7, [r4, #8]
        temp &= ~((uint32_t)iocurrent);
 8005f68:	ea6f 0e0c 	mvn.w	lr, ip
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005f6c:	684e      	ldr	r6, [r1, #4]
 8005f6e:	f416 1f80 	tst.w	r6, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8005f72:	bf0c      	ite	eq
 8005f74:	ea0e 0707 	andeq.w	r7, lr, r7
        {
          temp |= iocurrent;
 8005f78:	ea4c 0707 	orrne.w	r7, ip, r7
        }
        EXTI->RTSR = temp;
 8005f7c:	60a7      	str	r7, [r4, #8]

        temp = EXTI->FTSR;
 8005f7e:	68e7      	ldr	r7, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005f80:	684e      	ldr	r6, [r1, #4]
 8005f82:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
        temp &= ~((uint32_t)iocurrent);
 8005f86:	bf0c      	ite	eq
 8005f88:	ea0e 0707 	andeq.w	r7, lr, r7
        {
          temp |= iocurrent;
 8005f8c:	ea4c 0707 	orrne.w	r7, ip, r7
        }
        EXTI->FTSR = temp;
 8005f90:	60e7      	str	r7, [r4, #12]

        temp = EXTI->EMR;
 8005f92:	6867      	ldr	r7, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005f94:	684e      	ldr	r6, [r1, #4]
 8005f96:	f416 3f00 	tst.w	r6, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8005f9a:	bf0c      	ite	eq
 8005f9c:	ea0e 0707 	andeq.w	r7, lr, r7
        {
          temp |= iocurrent;
 8005fa0:	ea4c 0707 	orrne.w	r7, ip, r7
        }
        EXTI->EMR = temp;
 8005fa4:	6067      	str	r7, [r4, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005fa6:	6827      	ldr	r7, [r4, #0]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005fa8:	684e      	ldr	r6, [r1, #4]
 8005faa:	f416 3f80 	tst.w	r6, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8005fae:	bf0c      	ite	eq
 8005fb0:	ea0e 0707 	andeq.w	r7, lr, r7
        {
          temp |= iocurrent;
 8005fb4:	ea4c 0707 	orrne.w	r7, ip, r7
        }
        EXTI->IMR = temp;
 8005fb8:	6027      	str	r7, [r4, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005fba:	3301      	adds	r3, #1
 8005fbc:	3202      	adds	r2, #2
 8005fbe:	2b10      	cmp	r3, #16
 8005fc0:	f000 80a1 	beq.w	8006106 <HAL_GPIO_Init+0x1f2>
    ioposition = 0x01U << position;
 8005fc4:	f04f 0e01 	mov.w	lr, #1
 8005fc8:	fa0e fe03 	lsl.w	lr, lr, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005fcc:	680f      	ldr	r7, [r1, #0]
 8005fce:	ea0e 0c07 	and.w	ip, lr, r7
    if(iocurrent == ioposition)
 8005fd2:	ea3e 0607 	bics.w	r6, lr, r7
 8005fd6:	d1f0      	bne.n	8005fba <HAL_GPIO_Init+0xa6>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005fd8:	684f      	ldr	r7, [r1, #4]
 8005fda:	f007 0703 	and.w	r7, r7, #3
 8005fde:	3f01      	subs	r7, #1
 8005fe0:	2f01      	cmp	r7, #1
 8005fe2:	d9a1      	bls.n	8005f28 <HAL_GPIO_Init+0x14>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005fe4:	684f      	ldr	r7, [r1, #4]
 8005fe6:	f007 0703 	and.w	r7, r7, #3
 8005fea:	2f03      	cmp	r7, #3
 8005fec:	d027      	beq.n	800603e <HAL_GPIO_Init+0x12a>
        temp = GPIOx->PUPDR;
 8005fee:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005ff0:	f04f 0e03 	mov.w	lr, #3
 8005ff4:	fa0e fe02 	lsl.w	lr, lr, r2
 8005ff8:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005ffc:	688f      	ldr	r7, [r1, #8]
 8005ffe:	4097      	lsls	r7, r2
 8006000:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->PUPDR = temp;
 8006004:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006006:	684f      	ldr	r7, [r1, #4]
 8006008:	f007 0703 	and.w	r7, r7, #3
 800600c:	2f02      	cmp	r7, #2
 800600e:	d116      	bne.n	800603e <HAL_GPIO_Init+0x12a>
        temp = GPIOx->AFR[position >> 3U];
 8006010:	ea4f 0ed3 	mov.w	lr, r3, lsr #3
 8006014:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
 8006018:	f8de 7020 	ldr.w	r7, [lr, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800601c:	f003 0907 	and.w	r9, r3, #7
 8006020:	ea4f 0989 	mov.w	r9, r9, lsl #2
 8006024:	f04f 0a0f 	mov.w	sl, #15
 8006028:	fa0a fa09 	lsl.w	sl, sl, r9
 800602c:	ea27 0a0a 	bic.w	sl, r7, sl
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006030:	690f      	ldr	r7, [r1, #16]
 8006032:	fa07 f709 	lsl.w	r7, r7, r9
 8006036:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->AFR[position >> 3U] = temp;
 800603a:	f8ce 7020 	str.w	r7, [lr, #32]
      temp = GPIOx->MODER;
 800603e:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006040:	f04f 0e03 	mov.w	lr, #3
 8006044:	fa0e fe02 	lsl.w	lr, lr, r2
 8006048:	ea27 0e0e 	bic.w	lr, r7, lr
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800604c:	684f      	ldr	r7, [r1, #4]
 800604e:	f007 0703 	and.w	r7, r7, #3
 8006052:	4097      	lsls	r7, r2
 8006054:	ea47 070e 	orr.w	r7, r7, lr
      GPIOx->MODER = temp;
 8006058:	6007      	str	r7, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800605a:	684f      	ldr	r7, [r1, #4]
 800605c:	f417 3f40 	tst.w	r7, #196608	; 0x30000
 8006060:	d0ab      	beq.n	8005fba <HAL_GPIO_Init+0xa6>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006062:	2700      	movs	r7, #0
 8006064:	9701      	str	r7, [sp, #4]
 8006066:	6c6f      	ldr	r7, [r5, #68]	; 0x44
 8006068:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 800606c:	646f      	str	r7, [r5, #68]	; 0x44
 800606e:	6c6f      	ldr	r7, [r5, #68]	; 0x44
 8006070:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 8006074:	9701      	str	r7, [sp, #4]
 8006076:	9f01      	ldr	r7, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8006078:	f023 0703 	bic.w	r7, r3, #3
 800607c:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8006080:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
 8006084:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006088:	f003 0e03 	and.w	lr, r3, #3
 800608c:	ea4f 0b8e 	mov.w	fp, lr, lsl #2
 8006090:	f04f 0e0f 	mov.w	lr, #15
 8006094:	fa0e fe0b 	lsl.w	lr, lr, fp
 8006098:	ea2a 0a0e 	bic.w	sl, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800609c:	4e1d      	ldr	r6, [pc, #116]	; (8006114 <HAL_GPIO_Init+0x200>)
 800609e:	42b0      	cmp	r0, r6
 80060a0:	f43f af59 	beq.w	8005f56 <HAL_GPIO_Init+0x42>
 80060a4:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80060a8:	42b0      	cmp	r0, r6
 80060aa:	d01a      	beq.n	80060e2 <HAL_GPIO_Init+0x1ce>
 80060ac:	4540      	cmp	r0, r8
 80060ae:	d01b      	beq.n	80060e8 <HAL_GPIO_Init+0x1d4>
 80060b0:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 80060b4:	42b0      	cmp	r0, r6
 80060b6:	d01a      	beq.n	80060ee <HAL_GPIO_Init+0x1da>
 80060b8:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80060bc:	42b0      	cmp	r0, r6
 80060be:	d019      	beq.n	80060f4 <HAL_GPIO_Init+0x1e0>
 80060c0:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80060c4:	42b0      	cmp	r0, r6
 80060c6:	d018      	beq.n	80060fa <HAL_GPIO_Init+0x1e6>
 80060c8:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80060cc:	42b0      	cmp	r0, r6
 80060ce:	d017      	beq.n	8006100 <HAL_GPIO_Init+0x1ec>
 80060d0:	f8df e048 	ldr.w	lr, [pc, #72]	; 800611c <HAL_GPIO_Init+0x208>
 80060d4:	4570      	cmp	r0, lr
 80060d6:	bf0c      	ite	eq
 80060d8:	f04f 0e07 	moveq.w	lr, #7
 80060dc:	f04f 0e08 	movne.w	lr, #8
 80060e0:	e73b      	b.n	8005f5a <HAL_GPIO_Init+0x46>
 80060e2:	f04f 0e01 	mov.w	lr, #1
 80060e6:	e738      	b.n	8005f5a <HAL_GPIO_Init+0x46>
 80060e8:	f04f 0e02 	mov.w	lr, #2
 80060ec:	e735      	b.n	8005f5a <HAL_GPIO_Init+0x46>
 80060ee:	f04f 0e03 	mov.w	lr, #3
 80060f2:	e732      	b.n	8005f5a <HAL_GPIO_Init+0x46>
 80060f4:	f04f 0e04 	mov.w	lr, #4
 80060f8:	e72f      	b.n	8005f5a <HAL_GPIO_Init+0x46>
 80060fa:	f04f 0e05 	mov.w	lr, #5
 80060fe:	e72c      	b.n	8005f5a <HAL_GPIO_Init+0x46>
 8006100:	f04f 0e06 	mov.w	lr, #6
 8006104:	e729      	b.n	8005f5a <HAL_GPIO_Init+0x46>
      }
    }
  }
}
 8006106:	b003      	add	sp, #12
 8006108:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800610c:	40023800 	.word	0x40023800
 8006110:	40013c00 	.word	0x40013c00
 8006114:	40020000 	.word	0x40020000
 8006118:	40020800 	.word	0x40020800
 800611c:	40021c00 	.word	0x40021c00

08006120 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006120:	b10a      	cbz	r2, 8006126 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006122:	6181      	str	r1, [r0, #24]
 8006124:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8006126:	0409      	lsls	r1, r1, #16
 8006128:	6181      	str	r1, [r0, #24]
  }
}
 800612a:	4770      	bx	lr

0800612c <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 800612c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800612e:	b085      	sub	sp, #20
 8006130:	4604      	mov	r4, r0
 8006132:	f89d 0028 	ldrb.w	r0, [sp, #40]	; 0x28
 8006136:	f89d 602c 	ldrb.w	r6, [sp, #44]	; 0x2c
 800613a:	f8bd 7030 	ldrh.w	r7, [sp, #48]	; 0x30
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 800613e:	f894 52f8 	ldrb.w	r5, [r4, #760]	; 0x2f8
 8006142:	2d01      	cmp	r5, #1
 8006144:	d025      	beq.n	8006192 <HAL_HCD_HC_Init+0x66>
 8006146:	2501      	movs	r5, #1
 8006148:	f884 52f8 	strb.w	r5, [r4, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 800614c:	f04f 0c2c 	mov.w	ip, #44	; 0x2c
 8006150:	fb0c 4c01 	mla	ip, ip, r1, r4
 8006154:	2500      	movs	r5, #0
 8006156:	f88c 503d 	strb.w	r5, [ip, #61]	; 0x3d
  hhcd->hc[ch_num].dev_addr = dev_address;
 800615a:	f88c 3038 	strb.w	r3, [ip, #56]	; 0x38
  hhcd->hc[ch_num].max_packet = mps;
 800615e:	f8ac 7040 	strh.w	r7, [ip, #64]	; 0x40
  hhcd->hc[ch_num].ch_num = ch_num;
 8006162:	f88c 1039 	strb.w	r1, [ip, #57]	; 0x39
  hhcd->hc[ch_num].ep_type = ep_type;
 8006166:	f88c 603f 	strb.w	r6, [ip, #63]	; 0x3f
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 800616a:	f002 0e7f 	and.w	lr, r2, #127	; 0x7f
 800616e:	f88c e03a 	strb.w	lr, [ip, #58]	; 0x3a

  if ((epnum & 0x80U) == 0x80U)
 8006172:	ea4f 1ed2 	mov.w	lr, r2, lsr #7
 8006176:	f88c e03b 	strb.w	lr, [ip, #59]	; 0x3b
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
  }

  hhcd->hc[ch_num].speed = speed;
 800617a:	f88c 003c 	strb.w	r0, [ip, #60]	; 0x3c

  status =  USB_HC_Init(hhcd->Instance,
 800617e:	9702      	str	r7, [sp, #8]
 8006180:	9601      	str	r6, [sp, #4]
 8006182:	9000      	str	r0, [sp, #0]
 8006184:	6820      	ldr	r0, [r4, #0]
 8006186:	f002 fa16 	bl	80085b6 <USB_HC_Init>
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 800618a:	f884 52f8 	strb.w	r5, [r4, #760]	; 0x2f8

  return status;
}
 800618e:	b005      	add	sp, #20
 8006190:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __HAL_LOCK(hhcd);
 8006192:	2002      	movs	r0, #2
 8006194:	e7fb      	b.n	800618e <HAL_HCD_HC_Init+0x62>

08006196 <HAL_HCD_HC_Halt>:
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
  HAL_StatusTypeDef status = HAL_OK;

  __HAL_LOCK(hhcd);
 8006196:	f890 32f8 	ldrb.w	r3, [r0, #760]	; 0x2f8
 800619a:	2b01      	cmp	r3, #1
 800619c:	d00b      	beq.n	80061b6 <HAL_HCD_HC_Halt+0x20>
{
 800619e:	b510      	push	{r4, lr}
 80061a0:	4604      	mov	r4, r0
  __HAL_LOCK(hhcd);
 80061a2:	2301      	movs	r3, #1
 80061a4:	f880 32f8 	strb.w	r3, [r0, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80061a8:	6800      	ldr	r0, [r0, #0]
 80061aa:	f002 faba 	bl	8008722 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80061ae:	2000      	movs	r0, #0
 80061b0:	f884 02f8 	strb.w	r0, [r4, #760]	; 0x2f8

  return status;
}
 80061b4:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hhcd);
 80061b6:	2002      	movs	r0, #2
}
 80061b8:	4770      	bx	lr

080061ba <HAL_HCD_Init>:
  if (hhcd == NULL)
 80061ba:	2800      	cmp	r0, #0
 80061bc:	d04d      	beq.n	800625a <HAL_HCD_Init+0xa0>
{
 80061be:	b570      	push	{r4, r5, r6, lr}
 80061c0:	b08a      	sub	sp, #40	; 0x28
 80061c2:	4604      	mov	r4, r0
  USBx = hhcd->Instance;
 80061c4:	6805      	ldr	r5, [r0, #0]
  if (hhcd->State == HAL_HCD_STATE_RESET)
 80061c6:	f890 32f9 	ldrb.w	r3, [r0, #761]	; 0x2f9
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d040      	beq.n	8006250 <HAL_HCD_Init+0x96>
  hhcd->State = HAL_HCD_STATE_BUSY;
 80061ce:	2303      	movs	r3, #3
 80061d0:	f884 32f9 	strb.w	r3, [r4, #761]	; 0x2f9
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80061d4:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 80061d6:	f413 7f80 	tst.w	r3, #256	; 0x100
    hhcd->Init.dma_enable = 0U;
 80061da:	bf04      	itt	eq
 80061dc:	2300      	moveq	r3, #0
 80061de:	6123      	streq	r3, [r4, #16]
  __HAL_HCD_DISABLE(hhcd);
 80061e0:	6820      	ldr	r0, [r4, #0]
 80061e2:	f002 f838 	bl	8008256 <USB_DisableGlobalInt>
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80061e6:	46a4      	mov	ip, r4
 80061e8:	f85c 6b10 	ldr.w	r6, [ip], #16
 80061ec:	46ee      	mov	lr, sp
 80061ee:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80061f2:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80061f6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80061fa:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80061fe:	e89c 0003 	ldmia.w	ip, {r0, r1}
 8006202:	e88e 0003 	stmia.w	lr, {r0, r1}
 8006206:	1d25      	adds	r5, r4, #4
 8006208:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 800620c:	4630      	mov	r0, r6
 800620e:	f001 ffd7 	bl	80081c0 <USB_CoreInit>
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8006212:	2101      	movs	r1, #1
 8006214:	6820      	ldr	r0, [r4, #0]
 8006216:	f002 f824 	bl	8008262 <USB_SetCurrentMode>
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 800621a:	46a4      	mov	ip, r4
 800621c:	f85c 6b10 	ldr.w	r6, [ip], #16
 8006220:	46ee      	mov	lr, sp
 8006222:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8006226:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800622a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800622e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8006232:	e89c 0003 	ldmia.w	ip, {r0, r1}
 8006236:	e88e 0003 	stmia.w	lr, {r0, r1}
 800623a:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 800623e:	4630      	mov	r0, r6
 8006240:	f002 f8d2 	bl	80083e8 <USB_HostInit>
  hhcd->State = HAL_HCD_STATE_READY;
 8006244:	2301      	movs	r3, #1
 8006246:	f884 32f9 	strb.w	r3, [r4, #761]	; 0x2f9
  return HAL_OK;
 800624a:	2000      	movs	r0, #0
}
 800624c:	b00a      	add	sp, #40	; 0x28
 800624e:	bd70      	pop	{r4, r5, r6, pc}
    hhcd->Lock = HAL_UNLOCKED;
 8006250:	f880 32f8 	strb.w	r3, [r0, #760]	; 0x2f8
    HAL_HCD_MspInit(hhcd);
 8006254:	f003 fcce 	bl	8009bf4 <HAL_HCD_MspInit>
 8006258:	e7b9      	b.n	80061ce <HAL_HCD_Init+0x14>
    return HAL_ERROR;
 800625a:	2001      	movs	r0, #1
}
 800625c:	4770      	bx	lr

0800625e <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 800625e:	b538      	push	{r3, r4, r5, lr}
 8006260:	f89d 4010 	ldrb.w	r4, [sp, #16]
 8006264:	f8bd 5018 	ldrh.w	r5, [sp, #24]
  hhcd->hc[ch_num].ep_is_in = direction;
 8006268:	f04f 0c2c 	mov.w	ip, #44	; 0x2c
 800626c:	fb0c 0c01 	mla	ip, ip, r1, r0
 8006270:	f88c 203b 	strb.w	r2, [ip, #59]	; 0x3b
  hhcd->hc[ch_num].ep_type  = ep_type;
 8006274:	f88c 303f 	strb.w	r3, [ip, #63]	; 0x3f

  if (token == 0U)
 8006278:	bb3c      	cbnz	r4, 80062ca <HAL_HCD_HC_SubmitRequest+0x6c>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 800627a:	f04f 0c2c 	mov.w	ip, #44	; 0x2c
 800627e:	fb0c 0c01 	mla	ip, ip, r1, r0
 8006282:	2403      	movs	r4, #3
 8006284:	f88c 4042 	strb.w	r4, [ip, #66]	; 0x42
    hhcd->hc[ch_num].do_ping = do_ping;
 8006288:	f89d 401c 	ldrb.w	r4, [sp, #28]
 800628c:	f88c 403d 	strb.w	r4, [ip, #61]	; 0x3d
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8006290:	2b02      	cmp	r3, #2
 8006292:	d048      	beq.n	8006326 <HAL_HCD_HC_SubmitRequest+0xc8>
 8006294:	2b03      	cmp	r3, #3
 8006296:	d06e      	beq.n	8006376 <HAL_HCD_HC_SubmitRequest+0x118>
 8006298:	2b01      	cmp	r3, #1
 800629a:	f000 8094 	beq.w	80063c6 <HAL_HCD_HC_SubmitRequest+0x168>

    default:
      break;
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 800629e:	f04f 0c2c 	mov.w	ip, #44	; 0x2c
 80062a2:	fb0c 0301 	mla	r3, ip, r1, r0
 80062a6:	9a05      	ldr	r2, [sp, #20]
 80062a8:	645a      	str	r2, [r3, #68]	; 0x44
  hhcd->hc[ch_num].xfer_len  = length;
 80062aa:	64dd      	str	r5, [r3, #76]	; 0x4c
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80062ac:	2200      	movs	r2, #0
 80062ae:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
  hhcd->hc[ch_num].xfer_count = 0U;
 80062b2:	651a      	str	r2, [r3, #80]	; 0x50
  hhcd->hc[ch_num].ch_num = ch_num;
 80062b4:	f883 1039 	strb.w	r1, [r3, #57]	; 0x39
  hhcd->hc[ch_num].state = HC_IDLE;
 80062b8:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80062bc:	4619      	mov	r1, r3
 80062be:	7c02      	ldrb	r2, [r0, #16]
 80062c0:	3138      	adds	r1, #56	; 0x38
 80062c2:	6800      	ldr	r0, [r0, #0]
 80062c4:	f002 faae 	bl	8008824 <USB_HC_StartXfer>
}
 80062c8:	bd38      	pop	{r3, r4, r5, pc}
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80062ca:	f04f 0c2c 	mov.w	ip, #44	; 0x2c
 80062ce:	fb0c 0c01 	mla	ip, ip, r1, r0
 80062d2:	f04f 0e02 	mov.w	lr, #2
 80062d6:	f88c e042 	strb.w	lr, [ip, #66]	; 0x42
  switch (ep_type)
 80062da:	2b03      	cmp	r3, #3
 80062dc:	d8df      	bhi.n	800629e <HAL_HCD_HC_SubmitRequest+0x40>
 80062de:	e8df f003 	tbb	[pc, r3]
 80062e2:	7202      	.short	0x7202
 80062e4:	4a22      	.short	0x4a22
      if ((token == 1U) && (direction == 0U)) /*send data */
 80062e6:	2c01      	cmp	r4, #1
 80062e8:	d1d9      	bne.n	800629e <HAL_HCD_HC_SubmitRequest+0x40>
 80062ea:	2a00      	cmp	r2, #0
 80062ec:	d1d7      	bne.n	800629e <HAL_HCD_HC_SubmitRequest+0x40>
        if (length == 0U)
 80062ee:	b965      	cbnz	r5, 800630a <HAL_HCD_HC_SubmitRequest+0xac>
          hhcd->hc[ch_num].toggle_out = 1U;
 80062f0:	232c      	movs	r3, #44	; 0x2c
 80062f2:	fb03 0301 	mla	r3, r3, r1, r0
 80062f6:	2201      	movs	r2, #1
 80062f8:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80062fc:	232c      	movs	r3, #44	; 0x2c
 80062fe:	fb03 0301 	mla	r3, r3, r1, r0
 8006302:	2202      	movs	r2, #2
 8006304:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006308:	e7c9      	b.n	800629e <HAL_HCD_HC_SubmitRequest+0x40>
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800630a:	232c      	movs	r3, #44	; 0x2c
 800630c:	fb03 0301 	mla	r3, r3, r1, r0
 8006310:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8006314:	2b00      	cmp	r3, #0
 8006316:	d1f1      	bne.n	80062fc <HAL_HCD_HC_SubmitRequest+0x9e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8006318:	232c      	movs	r3, #44	; 0x2c
 800631a:	fb03 0301 	mla	r3, r3, r1, r0
 800631e:	2200      	movs	r2, #0
 8006320:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006324:	e7bb      	b.n	800629e <HAL_HCD_HC_SubmitRequest+0x40>
      if (direction == 0U)
 8006326:	b992      	cbnz	r2, 800634e <HAL_HCD_HC_SubmitRequest+0xf0>
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8006328:	232c      	movs	r3, #44	; 0x2c
 800632a:	fb03 0301 	mla	r3, r3, r1, r0
 800632e:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8006332:	b92b      	cbnz	r3, 8006340 <HAL_HCD_HC_SubmitRequest+0xe2>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8006334:	232c      	movs	r3, #44	; 0x2c
 8006336:	fb03 0301 	mla	r3, r3, r1, r0
 800633a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800633e:	e7ae      	b.n	800629e <HAL_HCD_HC_SubmitRequest+0x40>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8006340:	232c      	movs	r3, #44	; 0x2c
 8006342:	fb03 0301 	mla	r3, r3, r1, r0
 8006346:	2202      	movs	r2, #2
 8006348:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800634c:	e7a7      	b.n	800629e <HAL_HCD_HC_SubmitRequest+0x40>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800634e:	232c      	movs	r3, #44	; 0x2c
 8006350:	fb03 0301 	mla	r3, r3, r1, r0
 8006354:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8006358:	b933      	cbnz	r3, 8006368 <HAL_HCD_HC_SubmitRequest+0x10a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800635a:	232c      	movs	r3, #44	; 0x2c
 800635c:	fb03 0301 	mla	r3, r3, r1, r0
 8006360:	2200      	movs	r2, #0
 8006362:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006366:	e79a      	b.n	800629e <HAL_HCD_HC_SubmitRequest+0x40>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8006368:	232c      	movs	r3, #44	; 0x2c
 800636a:	fb03 0301 	mla	r3, r3, r1, r0
 800636e:	2202      	movs	r2, #2
 8006370:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006374:	e793      	b.n	800629e <HAL_HCD_HC_SubmitRequest+0x40>
      if (direction == 0U)
 8006376:	b992      	cbnz	r2, 800639e <HAL_HCD_HC_SubmitRequest+0x140>
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8006378:	232c      	movs	r3, #44	; 0x2c
 800637a:	fb03 0301 	mla	r3, r3, r1, r0
 800637e:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8006382:	b92b      	cbnz	r3, 8006390 <HAL_HCD_HC_SubmitRequest+0x132>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8006384:	232c      	movs	r3, #44	; 0x2c
 8006386:	fb03 0301 	mla	r3, r3, r1, r0
 800638a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800638e:	e786      	b.n	800629e <HAL_HCD_HC_SubmitRequest+0x40>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8006390:	232c      	movs	r3, #44	; 0x2c
 8006392:	fb03 0301 	mla	r3, r3, r1, r0
 8006396:	2202      	movs	r2, #2
 8006398:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800639c:	e77f      	b.n	800629e <HAL_HCD_HC_SubmitRequest+0x40>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800639e:	232c      	movs	r3, #44	; 0x2c
 80063a0:	fb03 0301 	mla	r3, r3, r1, r0
 80063a4:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80063a8:	b933      	cbnz	r3, 80063b8 <HAL_HCD_HC_SubmitRequest+0x15a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80063aa:	232c      	movs	r3, #44	; 0x2c
 80063ac:	fb03 0301 	mla	r3, r3, r1, r0
 80063b0:	2200      	movs	r2, #0
 80063b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80063b6:	e772      	b.n	800629e <HAL_HCD_HC_SubmitRequest+0x40>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80063b8:	232c      	movs	r3, #44	; 0x2c
 80063ba:	fb03 0301 	mla	r3, r3, r1, r0
 80063be:	2202      	movs	r2, #2
 80063c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80063c4:	e76b      	b.n	800629e <HAL_HCD_HC_SubmitRequest+0x40>
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80063c6:	232c      	movs	r3, #44	; 0x2c
 80063c8:	fb03 0301 	mla	r3, r3, r1, r0
 80063cc:	2200      	movs	r2, #0
 80063ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      break;
 80063d2:	e764      	b.n	800629e <HAL_HCD_HC_SubmitRequest+0x40>

080063d4 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80063d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063d8:	b085      	sub	sp, #20
 80063da:	4604      	mov	r4, r0
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80063dc:	6805      	ldr	r5, [r0, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80063de:	4628      	mov	r0, r5
 80063e0:	f001 fffe 	bl	80083e0 <USB_GetMode>
 80063e4:	2801      	cmp	r0, #1
 80063e6:	d002      	beq.n	80063ee <HAL_HCD_IRQHandler+0x1a>
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
    }
  }
}
 80063e8:	b005      	add	sp, #20
 80063ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80063ee:	6820      	ldr	r0, [r4, #0]
 80063f0:	f001 fff2 	bl	80083d8 <USB_ReadInterrupts>
 80063f4:	2800      	cmp	r0, #0
 80063f6:	d0f7      	beq.n	80063e8 <HAL_HCD_IRQHandler+0x14>
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80063f8:	6820      	ldr	r0, [r4, #0]
 80063fa:	f001 ffed 	bl	80083d8 <USB_ReadInterrupts>
 80063fe:	f410 1f00 	tst.w	r0, #2097152	; 0x200000
 8006402:	d003      	beq.n	800640c <HAL_HCD_IRQHandler+0x38>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8006404:	6823      	ldr	r3, [r4, #0]
 8006406:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800640a:	615a      	str	r2, [r3, #20]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800640c:	6820      	ldr	r0, [r4, #0]
 800640e:	f001 ffe3 	bl	80083d8 <USB_ReadInterrupts>
 8006412:	f410 1f80 	tst.w	r0, #1048576	; 0x100000
 8006416:	d003      	beq.n	8006420 <HAL_HCD_IRQHandler+0x4c>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8006418:	6823      	ldr	r3, [r4, #0]
 800641a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800641e:	615a      	str	r2, [r3, #20]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8006420:	6820      	ldr	r0, [r4, #0]
 8006422:	f001 ffd9 	bl	80083d8 <USB_ReadInterrupts>
 8006426:	f010 6f80 	tst.w	r0, #67108864	; 0x4000000
 800642a:	d003      	beq.n	8006434 <HAL_HCD_IRQHandler+0x60>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 800642c:	6823      	ldr	r3, [r4, #0]
 800642e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8006432:	615a      	str	r2, [r3, #20]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8006434:	6820      	ldr	r0, [r4, #0]
 8006436:	f001 ffcf 	bl	80083d8 <USB_ReadInterrupts>
 800643a:	f010 0f02 	tst.w	r0, #2
 800643e:	d002      	beq.n	8006446 <HAL_HCD_IRQHandler+0x72>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8006440:	6823      	ldr	r3, [r4, #0]
 8006442:	2202      	movs	r2, #2
 8006444:	615a      	str	r2, [r3, #20]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8006446:	6820      	ldr	r0, [r4, #0]
 8006448:	f001 ffc6 	bl	80083d8 <USB_ReadInterrupts>
 800644c:	f010 5f00 	tst.w	r0, #536870912	; 0x20000000
 8006450:	d008      	beq.n	8006464 <HAL_HCD_IRQHandler+0x90>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8006452:	6823      	ldr	r3, [r4, #0]
 8006454:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8006458:	615a      	str	r2, [r3, #20]
      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800645a:	f8d5 3440 	ldr.w	r3, [r5, #1088]	; 0x440
 800645e:	f013 0f01 	tst.w	r3, #1
 8006462:	d025      	beq.n	80064b0 <HAL_HCD_IRQHandler+0xdc>
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8006464:	6820      	ldr	r0, [r4, #0]
 8006466:	f001 ffb7 	bl	80083d8 <USB_ReadInterrupts>
 800646a:	f010 7f80 	tst.w	r0, #16777216	; 0x1000000
 800646e:	d12e      	bne.n	80064ce <HAL_HCD_IRQHandler+0xfa>
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8006470:	6820      	ldr	r0, [r4, #0]
 8006472:	f001 ffb1 	bl	80083d8 <USB_ReadInterrupts>
 8006476:	f010 0f08 	tst.w	r0, #8
 800647a:	d179      	bne.n	8006570 <HAL_HCD_IRQHandler+0x19c>
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 800647c:	6820      	ldr	r0, [r4, #0]
 800647e:	f001 ffab 	bl	80083d8 <USB_ReadInterrupts>
 8006482:	f010 0f10 	tst.w	r0, #16
 8006486:	d17a      	bne.n	800657e <HAL_HCD_IRQHandler+0x1aa>
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8006488:	6820      	ldr	r0, [r4, #0]
 800648a:	f001 ffa5 	bl	80083d8 <USB_ReadInterrupts>
 800648e:	f010 7f00 	tst.w	r0, #33554432	; 0x2000000
 8006492:	d0a9      	beq.n	80063e8 <HAL_HCD_IRQHandler+0x14>
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8006494:	6820      	ldr	r0, [r4, #0]
 8006496:	f002 f93f 	bl	8008718 <USB_HC_ReadInterrupt>
 800649a:	4681      	mov	r9, r0
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800649c:	68a3      	ldr	r3, [r4, #8]
 800649e:	2b00      	cmp	r3, #0
 80064a0:	f000 8372 	beq.w	8006b88 <HAL_HCD_IRQHandler+0x7b4>
 80064a4:	f505 65a0 	add.w	r5, r5, #1280	; 0x500
 80064a8:	2600      	movs	r6, #0
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
  {
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80064aa:	f04f 0b2c 	mov.w	fp, #44	; 0x2c
 80064ae:	e149      	b.n	8006744 <HAL_HCD_IRQHandler+0x370>
        (void)USB_FlushTxFifo(USBx, 0x10U);
 80064b0:	2110      	movs	r1, #16
 80064b2:	4628      	mov	r0, r5
 80064b4:	f001 ff06 	bl	80082c4 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 80064b8:	4628      	mov	r0, r5
 80064ba:	f001 ff2b 	bl	8008314 <USB_FlushRxFifo>
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80064be:	2101      	movs	r1, #1
 80064c0:	6820      	ldr	r0, [r4, #0]
 80064c2:	f002 f807 	bl	80084d4 <USB_InitFSLSPClkSel>
        HAL_HCD_Disconnect_Callback(hhcd);
 80064c6:	4620      	mov	r0, r4
 80064c8:	f003 fbea 	bl	8009ca0 <HAL_HCD_Disconnect_Callback>
 80064cc:	e7ca      	b.n	8006464 <HAL_HCD_IRQHandler+0x90>
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064ce:	6826      	ldr	r6, [r4, #0]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80064d0:	f8d6 3440 	ldr.w	r3, [r6, #1088]	; 0x440
 80064d4:	9302      	str	r3, [sp, #8]
  hprt0_dup = USBx_HPRT0;
 80064d6:	f8d6 3440 	ldr.w	r3, [r6, #1088]	; 0x440
 80064da:	9303      	str	r3, [sp, #12]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80064dc:	9b03      	ldr	r3, [sp, #12]
 80064de:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80064e2:	9303      	str	r3, [sp, #12]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80064e4:	9b02      	ldr	r3, [sp, #8]
 80064e6:	f013 0f02 	tst.w	r3, #2
 80064ea:	d007      	beq.n	80064fc <HAL_HCD_IRQHandler+0x128>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80064ec:	9b02      	ldr	r3, [sp, #8]
 80064ee:	f013 0f01 	tst.w	r3, #1
 80064f2:	d124      	bne.n	800653e <HAL_HCD_IRQHandler+0x16a>
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80064f4:	9b03      	ldr	r3, [sp, #12]
 80064f6:	f043 0302 	orr.w	r3, r3, #2
 80064fa:	9303      	str	r3, [sp, #12]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80064fc:	9b02      	ldr	r3, [sp, #8]
 80064fe:	f013 0f08 	tst.w	r3, #8
 8006502:	d010      	beq.n	8006526 <HAL_HCD_IRQHandler+0x152>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8006504:	9b03      	ldr	r3, [sp, #12]
 8006506:	f043 0308 	orr.w	r3, r3, #8
 800650a:	9303      	str	r3, [sp, #12]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800650c:	9b02      	ldr	r3, [sp, #8]
 800650e:	f013 0f04 	tst.w	r3, #4
 8006512:	d029      	beq.n	8006568 <HAL_HCD_IRQHandler+0x194>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8006514:	69a3      	ldr	r3, [r4, #24]
 8006516:	2b02      	cmp	r3, #2
 8006518:	d015      	beq.n	8006546 <HAL_HCD_IRQHandler+0x172>
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 800651a:	68e3      	ldr	r3, [r4, #12]
 800651c:	2b01      	cmp	r3, #1
 800651e:	d01e      	beq.n	800655e <HAL_HCD_IRQHandler+0x18a>
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8006520:	4620      	mov	r0, r4
 8006522:	f003 fbc4 	bl	8009cae <HAL_HCD_PortEnabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8006526:	9b02      	ldr	r3, [sp, #8]
 8006528:	f013 0f20 	tst.w	r3, #32
 800652c:	d003      	beq.n	8006536 <HAL_HCD_IRQHandler+0x162>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800652e:	9b03      	ldr	r3, [sp, #12]
 8006530:	f043 0320 	orr.w	r3, r3, #32
 8006534:	9303      	str	r3, [sp, #12]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8006536:	9b03      	ldr	r3, [sp, #12]
 8006538:	f8c6 3440 	str.w	r3, [r6, #1088]	; 0x440
}
 800653c:	e798      	b.n	8006470 <HAL_HCD_IRQHandler+0x9c>
      HAL_HCD_Connect_Callback(hhcd);
 800653e:	4620      	mov	r0, r4
 8006540:	f003 fba8 	bl	8009c94 <HAL_HCD_Connect_Callback>
 8006544:	e7d6      	b.n	80064f4 <HAL_HCD_IRQHandler+0x120>
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8006546:	9b02      	ldr	r3, [sp, #8]
 8006548:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 800654c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8006550:	bf0c      	ite	eq
 8006552:	2102      	moveq	r1, #2
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8006554:	2101      	movne	r1, #1
 8006556:	6820      	ldr	r0, [r4, #0]
 8006558:	f001 ffbc 	bl	80084d4 <USB_InitFSLSPClkSel>
 800655c:	e7e0      	b.n	8006520 <HAL_HCD_IRQHandler+0x14c>
          USBx_HOST->HFIR = 60000U;
 800655e:	f64e 2260 	movw	r2, #60000	; 0xea60
 8006562:	f8c6 2404 	str.w	r2, [r6, #1028]	; 0x404
 8006566:	e7db      	b.n	8006520 <HAL_HCD_IRQHandler+0x14c>
      HAL_HCD_PortDisabled_Callback(hhcd);
 8006568:	4620      	mov	r0, r4
 800656a:	f003 fba6 	bl	8009cba <HAL_HCD_PortDisabled_Callback>
 800656e:	e7da      	b.n	8006526 <HAL_HCD_IRQHandler+0x152>
      HAL_HCD_SOF_Callback(hhcd);
 8006570:	4620      	mov	r0, r4
 8006572:	f003 fb89 	bl	8009c88 <HAL_HCD_SOF_Callback>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8006576:	6823      	ldr	r3, [r4, #0]
 8006578:	2208      	movs	r2, #8
 800657a:	615a      	str	r2, [r3, #20]
 800657c:	e77e      	b.n	800647c <HAL_HCD_IRQHandler+0xa8>
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800657e:	6822      	ldr	r2, [r4, #0]
 8006580:	6993      	ldr	r3, [r2, #24]
 8006582:	f023 0310 	bic.w	r3, r3, #16
 8006586:	6193      	str	r3, [r2, #24]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8006588:	6827      	ldr	r7, [r4, #0]
  GrxstspReg = hhcd->Instance->GRXSTSP;
 800658a:	6a3e      	ldr	r6, [r7, #32]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 800658c:	f3c6 4243 	ubfx	r2, r6, #17, #4
  switch (pktsts)
 8006590:	2a02      	cmp	r2, #2
 8006592:	d005      	beq.n	80065a0 <HAL_HCD_IRQHandler+0x1cc>
      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006594:	6822      	ldr	r2, [r4, #0]
 8006596:	6993      	ldr	r3, [r2, #24]
 8006598:	f043 0310 	orr.w	r3, r3, #16
 800659c:	6193      	str	r3, [r2, #24]
 800659e:	e773      	b.n	8006488 <HAL_HCD_IRQHandler+0xb4>
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80065a0:	f3c6 180a 	ubfx	r8, r6, #4, #11
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80065a4:	f1b8 0f00 	cmp.w	r8, #0
 80065a8:	d0f4      	beq.n	8006594 <HAL_HCD_IRQHandler+0x1c0>
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80065aa:	f006 060f 	and.w	r6, r6, #15
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80065ae:	232c      	movs	r3, #44	; 0x2c
 80065b0:	fb03 4306 	mla	r3, r3, r6, r4
 80065b4:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80065b6:	2900      	cmp	r1, #0
 80065b8:	d0ec      	beq.n	8006594 <HAL_HCD_IRQHandler+0x1c0>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 80065ba:	232c      	movs	r3, #44	; 0x2c
 80065bc:	fb03 4306 	mla	r3, r3, r6, r4
 80065c0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80065c2:	4442      	add	r2, r8
 80065c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80065c6:	429a      	cmp	r2, r3
 80065c8:	d906      	bls.n	80065d8 <HAL_HCD_IRQHandler+0x204>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 80065ca:	232c      	movs	r3, #44	; 0x2c
 80065cc:	fb03 4306 	mla	r3, r3, r6, r4
 80065d0:	2204      	movs	r2, #4
 80065d2:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
 80065d6:	e7dd      	b.n	8006594 <HAL_HCD_IRQHandler+0x1c0>
          (void)USB_ReadPacket(hhcd->Instance,
 80065d8:	4642      	mov	r2, r8
 80065da:	4638      	mov	r0, r7
 80065dc:	f001 fed7 	bl	800838e <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 80065e0:	222c      	movs	r2, #44	; 0x2c
 80065e2:	fb02 4206 	mla	r2, r2, r6, r4
 80065e6:	6c53      	ldr	r3, [r2, #68]	; 0x44
 80065e8:	4443      	add	r3, r8
 80065ea:	6453      	str	r3, [r2, #68]	; 0x44
          hhcd->hc[ch_num].xfer_count += pktcnt;
 80065ec:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80065ee:	4443      	add	r3, r8
 80065f0:	6513      	str	r3, [r2, #80]	; 0x50
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80065f2:	0170      	lsls	r0, r6, #5
 80065f4:	f507 63a0 	add.w	r3, r7, #1280	; 0x500
 80065f8:	eb03 1146 	add.w	r1, r3, r6, lsl #5
 80065fc:	6909      	ldr	r1, [r1, #16]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80065fe:	f8b2 2040 	ldrh.w	r2, [r2, #64]	; 0x40
 8006602:	4590      	cmp	r8, r2
 8006604:	d1c6      	bne.n	8006594 <HAL_HCD_IRQHandler+0x1c0>
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8006606:	f3c1 41c9 	ubfx	r1, r1, #19, #10
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 800660a:	2900      	cmp	r1, #0
 800660c:	d0c2      	beq.n	8006594 <HAL_HCD_IRQHandler+0x1c0>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 800660e:	58c2      	ldr	r2, [r0, r3]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006610:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006614:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006618:	50c2      	str	r2, [r0, r3]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 800661a:	232c      	movs	r3, #44	; 0x2c
 800661c:	fb03 4306 	mla	r3, r3, r6, r4
 8006620:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
 8006624:	f082 0201 	eor.w	r2, r2, #1
 8006628:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 800662c:	e7b2      	b.n	8006594 <HAL_HCD_IRQHandler+0x1c0>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800662e:	2304      	movs	r3, #4
 8006630:	60bb      	str	r3, [r7, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8006632:	fb0b 4308 	mla	r3, fp, r8, r4
 8006636:	2206      	movs	r2, #6
 8006638:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800663c:	4641      	mov	r1, r8
 800663e:	6820      	ldr	r0, [r4, #0]
 8006640:	f002 f86f 	bl	8008722 <USB_HC_Halt>
  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8006644:	68bb      	ldr	r3, [r7, #8]
 8006646:	f413 7f00 	tst.w	r3, #512	; 0x200
 800664a:	d16e      	bne.n	800672a <HAL_HCD_IRQHandler+0x356>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800664c:	68bb      	ldr	r3, [r7, #8]
 800664e:	f013 0f01 	tst.w	r3, #1
 8006652:	f000 80c2 	beq.w	80067da <HAL_HCD_IRQHandler+0x406>
    if (hhcd->Init.dma_enable != 0U)
 8006656:	6923      	ldr	r3, [r4, #16]
 8006658:	b13b      	cbz	r3, 800666a <HAL_HCD_IRQHandler+0x296>
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800665a:	693a      	ldr	r2, [r7, #16]
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 800665c:	fb0b 4108 	mla	r1, fp, r8, r4
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8006660:	f3c2 0212 	ubfx	r2, r2, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8006664:	6c8b      	ldr	r3, [r1, #72]	; 0x48
 8006666:	1a9b      	subs	r3, r3, r2
 8006668:	650b      	str	r3, [r1, #80]	; 0x50
    hhcd->hc[ch_num].state = HC_XFRC;
 800666a:	fb0b 4308 	mla	r3, fp, r8, r4
 800666e:	2201      	movs	r2, #1
 8006670:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
    hhcd->hc[ch_num].ErrCnt = 0U;
 8006674:	2100      	movs	r1, #0
 8006676:	65d9      	str	r1, [r3, #92]	; 0x5c
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8006678:	60ba      	str	r2, [r7, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800667a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800667e:	f013 03fd 	ands.w	r3, r3, #253	; 0xfd
 8006682:	f000 8085 	beq.w	8006790 <HAL_HCD_IRQHandler+0x3bc>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8006686:	2b01      	cmp	r3, #1
 8006688:	f040 8088 	bne.w	800679c <HAL_HCD_IRQHandler+0x3c8>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800668c:	9a01      	ldr	r2, [sp, #4]
 800668e:	f85a 3002 	ldr.w	r3, [sl, r2]
 8006692:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006696:	f84a 3002 	str.w	r3, [sl, r2]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800669a:	fb0b 4308 	mla	r3, fp, r8, r4
 800669e:	2201      	movs	r2, #1
 80066a0:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80066a4:	4641      	mov	r1, r8
 80066a6:	4620      	mov	r0, r4
 80066a8:	f003 fb00 	bl	8009cac <HAL_HCD_HC_NotifyURBChange_Callback>
 80066ac:	e076      	b.n	800679c <HAL_HCD_IRQHandler+0x3c8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 80066ae:	f44f 7380 	mov.w	r3, #256	; 0x100
 80066b2:	60bb      	str	r3, [r7, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 80066b4:	fb0b 4308 	mla	r3, fp, r8, r4
 80066b8:	2207      	movs	r2, #7
 80066ba:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80066be:	4641      	mov	r1, r8
 80066c0:	6820      	ldr	r0, [r4, #0]
 80066c2:	f002 f82e 	bl	8008722 <USB_HC_Halt>
 80066c6:	e7bd      	b.n	8006644 <HAL_HCD_IRQHandler+0x270>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80066c8:	68bb      	ldr	r3, [r7, #8]
 80066ca:	f013 0f08 	tst.w	r3, #8
 80066ce:	d113      	bne.n	80066f8 <HAL_HCD_IRQHandler+0x324>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80066d0:	68bb      	ldr	r3, [r7, #8]
 80066d2:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80066d6:	d11b      	bne.n	8006710 <HAL_HCD_IRQHandler+0x33c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80066d8:	68bb      	ldr	r3, [r7, #8]
 80066da:	f013 0f80 	tst.w	r3, #128	; 0x80
 80066de:	d0b1      	beq.n	8006644 <HAL_HCD_IRQHandler+0x270>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80066e0:	2380      	movs	r3, #128	; 0x80
 80066e2:	60bb      	str	r3, [r7, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80066e4:	fb0b 4308 	mla	r3, fp, r8, r4
 80066e8:	2206      	movs	r2, #6
 80066ea:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80066ee:	4641      	mov	r1, r8
 80066f0:	6820      	ldr	r0, [r4, #0]
 80066f2:	f002 f816 	bl	8008722 <USB_HC_Halt>
 80066f6:	e7a5      	b.n	8006644 <HAL_HCD_IRQHandler+0x270>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80066f8:	2308      	movs	r3, #8
 80066fa:	60bb      	str	r3, [r7, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 80066fc:	fb0b 4308 	mla	r3, fp, r8, r4
 8006700:	2205      	movs	r2, #5
 8006702:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006706:	4641      	mov	r1, r8
 8006708:	6820      	ldr	r0, [r4, #0]
 800670a:	f002 f80a 	bl	8008722 <USB_HC_Halt>
 800670e:	e799      	b.n	8006644 <HAL_HCD_IRQHandler+0x270>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8006710:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006714:	60bb      	str	r3, [r7, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8006716:	fb0b 4308 	mla	r3, fp, r8, r4
 800671a:	2208      	movs	r2, #8
 800671c:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006720:	4641      	mov	r1, r8
 8006722:	6820      	ldr	r0, [r4, #0]
 8006724:	f001 fffd 	bl	8008722 <USB_HC_Halt>
 8006728:	e78c      	b.n	8006644 <HAL_HCD_IRQHandler+0x270>
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800672a:	4641      	mov	r1, r8
 800672c:	6820      	ldr	r0, [r4, #0]
 800672e:	f001 fff8 	bl	8008722 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8006732:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006736:	60bb      	str	r3, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8006738:	3601      	adds	r6, #1
 800673a:	3520      	adds	r5, #32
 800673c:	68a3      	ldr	r3, [r4, #8]
 800673e:	42b3      	cmp	r3, r6
 8006740:	f240 8222 	bls.w	8006b88 <HAL_HCD_IRQHandler+0x7b4>
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8006744:	f006 030f 	and.w	r3, r6, #15
 8006748:	fa29 f303 	lsr.w	r3, r9, r3
 800674c:	f013 0f01 	tst.w	r3, #1
 8006750:	d0f2      	beq.n	8006738 <HAL_HCD_IRQHandler+0x364>
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8006752:	682b      	ldr	r3, [r5, #0]
 8006754:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8006758:	f000 80ca 	beq.w	80068f0 <HAL_HCD_IRQHandler+0x51c>
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 800675c:	fa5f f886 	uxtb.w	r8, r6
  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8006760:	6823      	ldr	r3, [r4, #0]
 8006762:	f503 6aa0 	add.w	sl, r3, #1280	; 0x500
 8006766:	ea4f 1348 	mov.w	r3, r8, lsl #5
 800676a:	9301      	str	r3, [sp, #4]
 800676c:	eb0a 1748 	add.w	r7, sl, r8, lsl #5
 8006770:	68bb      	ldr	r3, [r7, #8]
 8006772:	f013 0f04 	tst.w	r3, #4
 8006776:	f47f af5a 	bne.w	800662e <HAL_HCD_IRQHandler+0x25a>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 800677a:	68bb      	ldr	r3, [r7, #8]
 800677c:	f413 7f80 	tst.w	r3, #256	; 0x100
 8006780:	d195      	bne.n	80066ae <HAL_HCD_IRQHandler+0x2da>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8006782:	68bb      	ldr	r3, [r7, #8]
 8006784:	f013 0f20 	tst.w	r3, #32
 8006788:	d09e      	beq.n	80066c8 <HAL_HCD_IRQHandler+0x2f4>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800678a:	2320      	movs	r3, #32
 800678c:	60bb      	str	r3, [r7, #8]
 800678e:	e759      	b.n	8006644 <HAL_HCD_IRQHandler+0x270>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006790:	4641      	mov	r1, r8
 8006792:	6820      	ldr	r0, [r4, #0]
 8006794:	f001 ffc5 	bl	8008722 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8006798:	2310      	movs	r3, #16
 800679a:	60bb      	str	r3, [r7, #8]
    if (hhcd->Init.dma_enable == 1U)
 800679c:	6923      	ldr	r3, [r4, #16]
 800679e:	2b01      	cmp	r3, #1
 80067a0:	d008      	beq.n	80067b4 <HAL_HCD_IRQHandler+0x3e0>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80067a2:	fb0b 4808 	mla	r8, fp, r8, r4
 80067a6:	f898 3054 	ldrb.w	r3, [r8, #84]	; 0x54
 80067aa:	f083 0301 	eor.w	r3, r3, #1
 80067ae:	f888 3054 	strb.w	r3, [r8, #84]	; 0x54
 80067b2:	e7c1      	b.n	8006738 <HAL_HCD_IRQHandler+0x364>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 80067b4:	fb0b 4308 	mla	r3, fp, r8, r4
 80067b8:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 80067bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80067be:	fbb3 f3f2 	udiv	r3, r3, r2
 80067c2:	f013 0f01 	tst.w	r3, #1
 80067c6:	d0b7      	beq.n	8006738 <HAL_HCD_IRQHandler+0x364>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 80067c8:	fb0b 4808 	mla	r8, fp, r8, r4
 80067cc:	f898 3054 	ldrb.w	r3, [r8, #84]	; 0x54
 80067d0:	f083 0301 	eor.w	r3, r3, #1
 80067d4:	f888 3054 	strb.w	r3, [r8, #84]	; 0x54
 80067d8:	e7ae      	b.n	8006738 <HAL_HCD_IRQHandler+0x364>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80067da:	68bb      	ldr	r3, [r7, #8]
 80067dc:	f013 0f02 	tst.w	r3, #2
 80067e0:	d05c      	beq.n	800689c <HAL_HCD_IRQHandler+0x4c8>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80067e2:	fb0b 4308 	mla	r3, fp, r8, r4
 80067e6:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 80067ea:	2b01      	cmp	r3, #1
 80067ec:	d012      	beq.n	8006814 <HAL_HCD_IRQHandler+0x440>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80067ee:	2b05      	cmp	r3, #5
 80067f0:	d020      	beq.n	8006834 <HAL_HCD_IRQHandler+0x460>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80067f2:	2b06      	cmp	r3, #6
 80067f4:	d024      	beq.n	8006840 <HAL_HCD_IRQHandler+0x46c>
 80067f6:	2b08      	cmp	r3, #8
 80067f8:	d022      	beq.n	8006840 <HAL_HCD_IRQHandler+0x46c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80067fa:	2b03      	cmp	r3, #3
 80067fc:	d03e      	beq.n	800687c <HAL_HCD_IRQHandler+0x4a8>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 80067fe:	2b07      	cmp	r3, #7
 8006800:	d10d      	bne.n	800681e <HAL_HCD_IRQHandler+0x44a>
      hhcd->hc[ch_num].ErrCnt++;
 8006802:	fb0b 4308 	mla	r3, fp, r8, r4
 8006806:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006808:	3201      	adds	r2, #1
 800680a:	65da      	str	r2, [r3, #92]	; 0x5c
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 800680c:	2204      	movs	r2, #4
 800680e:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
 8006812:	e004      	b.n	800681e <HAL_HCD_IRQHandler+0x44a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8006814:	fb0b 4308 	mla	r3, fp, r8, r4
 8006818:	2201      	movs	r2, #1
 800681a:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800681e:	2302      	movs	r3, #2
 8006820:	60bb      	str	r3, [r7, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8006822:	fb0b 4308 	mla	r3, fp, r8, r4
 8006826:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
 800682a:	4641      	mov	r1, r8
 800682c:	4620      	mov	r0, r4
 800682e:	f003 fa3d 	bl	8009cac <HAL_HCD_HC_NotifyURBChange_Callback>
 8006832:	e781      	b.n	8006738 <HAL_HCD_IRQHandler+0x364>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8006834:	fb0b 4308 	mla	r3, fp, r8, r4
 8006838:	2205      	movs	r2, #5
 800683a:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
 800683e:	e7ee      	b.n	800681e <HAL_HCD_IRQHandler+0x44a>
      hhcd->hc[ch_num].ErrCnt++;
 8006840:	fb0b 4208 	mla	r2, fp, r8, r4
 8006844:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
 8006846:	3301      	adds	r3, #1
 8006848:	65d3      	str	r3, [r2, #92]	; 0x5c
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800684a:	2b02      	cmp	r3, #2
 800684c:	d906      	bls.n	800685c <HAL_HCD_IRQHandler+0x488>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800684e:	4613      	mov	r3, r2
 8006850:	2200      	movs	r2, #0
 8006852:	65da      	str	r2, [r3, #92]	; 0x5c
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8006854:	2204      	movs	r2, #4
 8006856:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
 800685a:	e7e0      	b.n	800681e <HAL_HCD_IRQHandler+0x44a>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800685c:	fb0b 4308 	mla	r3, fp, r8, r4
 8006860:	f04f 0202 	mov.w	r2, #2
 8006864:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006868:	9a01      	ldr	r2, [sp, #4]
 800686a:	f85a 3002 	ldr.w	r3, [sl, r2]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800686e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006872:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006876:	f84a 3002 	str.w	r3, [sl, r2]
 800687a:	e7d0      	b.n	800681e <HAL_HCD_IRQHandler+0x44a>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800687c:	fb0b 4308 	mla	r3, fp, r8, r4
 8006880:	f04f 0202 	mov.w	r2, #2
 8006884:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006888:	9a01      	ldr	r2, [sp, #4]
 800688a:	f85a 3002 	ldr.w	r3, [sl, r2]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800688e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006892:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006896:	f84a 3002 	str.w	r3, [sl, r2]
 800689a:	e7c0      	b.n	800681e <HAL_HCD_IRQHandler+0x44a>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800689c:	68bb      	ldr	r3, [r7, #8]
 800689e:	f013 0f10 	tst.w	r3, #16
 80068a2:	f43f af49 	beq.w	8006738 <HAL_HCD_IRQHandler+0x364>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80068a6:	fb0b 4308 	mla	r3, fp, r8, r4
 80068aa:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80068ae:	2b03      	cmp	r3, #3
 80068b0:	d00b      	beq.n	80068ca <HAL_HCD_IRQHandler+0x4f6>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80068b2:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 80068b6:	d105      	bne.n	80068c4 <HAL_HCD_IRQHandler+0x4f0>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80068b8:	fb0b 4308 	mla	r3, fp, r8, r4
 80068bc:	2200      	movs	r2, #0
 80068be:	65da      	str	r2, [r3, #92]	; 0x5c
      if (hhcd->Init.dma_enable == 0U)
 80068c0:	6923      	ldr	r3, [r4, #16]
 80068c2:	b15b      	cbz	r3, 80068dc <HAL_HCD_IRQHandler+0x508>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80068c4:	2310      	movs	r3, #16
 80068c6:	60bb      	str	r3, [r7, #8]
 80068c8:	e736      	b.n	8006738 <HAL_HCD_IRQHandler+0x364>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80068ca:	fb0b 4308 	mla	r3, fp, r8, r4
 80068ce:	2200      	movs	r2, #0
 80068d0:	65da      	str	r2, [r3, #92]	; 0x5c
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80068d2:	4641      	mov	r1, r8
 80068d4:	6820      	ldr	r0, [r4, #0]
 80068d6:	f001 ff24 	bl	8008722 <USB_HC_Halt>
 80068da:	e7f3      	b.n	80068c4 <HAL_HCD_IRQHandler+0x4f0>
        hhcd->hc[ch_num].state = HC_NAK;
 80068dc:	fb0b 4308 	mla	r3, fp, r8, r4
 80068e0:	2203      	movs	r2, #3
 80068e2:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80068e6:	4641      	mov	r1, r8
 80068e8:	6820      	ldr	r0, [r4, #0]
 80068ea:	f001 ff1a 	bl	8008722 <USB_HC_Halt>
 80068ee:	e7e9      	b.n	80068c4 <HAL_HCD_IRQHandler+0x4f0>
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80068f0:	b2f1      	uxtb	r1, r6
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80068f2:	6820      	ldr	r0, [r4, #0]
  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80068f4:	f500 63a0 	add.w	r3, r0, #1280	; 0x500
 80068f8:	ea4f 1c41 	mov.w	ip, r1, lsl #5
 80068fc:	eb03 1741 	add.w	r7, r3, r1, lsl #5
 8006900:	68ba      	ldr	r2, [r7, #8]
 8006902:	f012 0f04 	tst.w	r2, #4
 8006906:	d11a      	bne.n	800693e <HAL_HCD_IRQHandler+0x56a>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8006908:	68ba      	ldr	r2, [r7, #8]
 800690a:	f012 0f20 	tst.w	r2, #32
 800690e:	d021      	beq.n	8006954 <HAL_HCD_IRQHandler+0x580>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8006910:	2320      	movs	r3, #32
 8006912:	60bb      	str	r3, [r7, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8006914:	fb0b 4301 	mla	r3, fp, r1, r4
 8006918:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800691c:	2b01      	cmp	r3, #1
 800691e:	f47f af0b 	bne.w	8006738 <HAL_HCD_IRQHandler+0x364>
      hhcd->hc[ch_num].do_ping = 0U;
 8006922:	fb0b 4301 	mla	r3, fp, r1, r4
 8006926:	f04f 0200 	mov.w	r2, #0
 800692a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800692e:	f04f 0202 	mov.w	r2, #2
 8006932:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006936:	6820      	ldr	r0, [r4, #0]
 8006938:	f001 fef3 	bl	8008722 <USB_HC_Halt>
 800693c:	e6fc      	b.n	8006738 <HAL_HCD_IRQHandler+0x364>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800693e:	2304      	movs	r3, #4
 8006940:	60bb      	str	r3, [r7, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8006942:	fb0b 4301 	mla	r3, fp, r1, r4
 8006946:	2206      	movs	r2, #6
 8006948:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800694c:	6820      	ldr	r0, [r4, #0]
 800694e:	f001 fee8 	bl	8008722 <USB_HC_Halt>
 8006952:	e6f1      	b.n	8006738 <HAL_HCD_IRQHandler+0x364>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8006954:	68ba      	ldr	r2, [r7, #8]
 8006956:	f412 7f00 	tst.w	r2, #512	; 0x200
 800695a:	d11c      	bne.n	8006996 <HAL_HCD_IRQHandler+0x5c2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800695c:	68ba      	ldr	r2, [r7, #8]
 800695e:	f012 0f01 	tst.w	r2, #1
 8006962:	d01f      	beq.n	80069a4 <HAL_HCD_IRQHandler+0x5d0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8006964:	fb0b 4301 	mla	r3, fp, r1, r4
 8006968:	2200      	movs	r2, #0
 800696a:	65da      	str	r2, [r3, #92]	; 0x5c
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 800696c:	68bb      	ldr	r3, [r7, #8]
 800696e:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006972:	d006      	beq.n	8006982 <HAL_HCD_IRQHandler+0x5ae>
      hhcd->hc[ch_num].do_ping = 1U;
 8006974:	fb0b 4301 	mla	r3, fp, r1, r4
 8006978:	2201      	movs	r2, #1
 800697a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800697e:	2340      	movs	r3, #64	; 0x40
 8006980:	60bb      	str	r3, [r7, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8006982:	2301      	movs	r3, #1
 8006984:	60bb      	str	r3, [r7, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8006986:	fb0b 4201 	mla	r2, fp, r1, r4
 800698a:	f882 3061 	strb.w	r3, [r2, #97]	; 0x61
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800698e:	6820      	ldr	r0, [r4, #0]
 8006990:	f001 fec7 	bl	8008722 <USB_HC_Halt>
 8006994:	e6d0      	b.n	8006738 <HAL_HCD_IRQHandler+0x364>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8006996:	f44f 7300 	mov.w	r3, #512	; 0x200
 800699a:	60bb      	str	r3, [r7, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800699c:	6820      	ldr	r0, [r4, #0]
 800699e:	f001 fec0 	bl	8008722 <USB_HC_Halt>
 80069a2:	e6c9      	b.n	8006738 <HAL_HCD_IRQHandler+0x364>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80069a4:	68ba      	ldr	r2, [r7, #8]
 80069a6:	f012 0f40 	tst.w	r2, #64	; 0x40
 80069aa:	d120      	bne.n	80069ee <HAL_HCD_IRQHandler+0x61a>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80069ac:	68ba      	ldr	r2, [r7, #8]
 80069ae:	f012 0f08 	tst.w	r2, #8
 80069b2:	d12b      	bne.n	8006a0c <HAL_HCD_IRQHandler+0x638>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80069b4:	68ba      	ldr	r2, [r7, #8]
 80069b6:	f012 0f10 	tst.w	r2, #16
 80069ba:	d032      	beq.n	8006a22 <HAL_HCD_IRQHandler+0x64e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80069bc:	fb0b 4301 	mla	r3, fp, r1, r4
 80069c0:	2200      	movs	r2, #0
 80069c2:	65da      	str	r2, [r3, #92]	; 0x5c
    hhcd->hc[ch_num].state = HC_NAK;
 80069c4:	2203      	movs	r2, #3
 80069c6:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
    if (hhcd->hc[ch_num].do_ping == 0U)
 80069ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80069ce:	b94b      	cbnz	r3, 80069e4 <HAL_HCD_IRQHandler+0x610>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 80069d0:	fb0b 4301 	mla	r3, fp, r1, r4
 80069d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80069d8:	b923      	cbnz	r3, 80069e4 <HAL_HCD_IRQHandler+0x610>
        hhcd->hc[ch_num].do_ping = 1U;
 80069da:	fb0b 4301 	mla	r3, fp, r1, r4
 80069de:	2201      	movs	r2, #1
 80069e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80069e4:	f001 fe9d 	bl	8008722 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80069e8:	2310      	movs	r3, #16
 80069ea:	60bb      	str	r3, [r7, #8]
 80069ec:	e6a4      	b.n	8006738 <HAL_HCD_IRQHandler+0x364>
    hhcd->hc[ch_num].state = HC_NYET;
 80069ee:	fb0b 4301 	mla	r3, fp, r1, r4
 80069f2:	2204      	movs	r2, #4
 80069f4:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
    hhcd->hc[ch_num].do_ping = 1U;
 80069f8:	2201      	movs	r2, #1
 80069fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hhcd->hc[ch_num].ErrCnt = 0U;
 80069fe:	2200      	movs	r2, #0
 8006a00:	65da      	str	r2, [r3, #92]	; 0x5c
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006a02:	f001 fe8e 	bl	8008722 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8006a06:	2340      	movs	r3, #64	; 0x40
 8006a08:	60bb      	str	r3, [r7, #8]
 8006a0a:	e695      	b.n	8006738 <HAL_HCD_IRQHandler+0x364>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8006a0c:	2308      	movs	r3, #8
 8006a0e:	60bb      	str	r3, [r7, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8006a10:	fb0b 4301 	mla	r3, fp, r1, r4
 8006a14:	2205      	movs	r2, #5
 8006a16:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006a1a:	6820      	ldr	r0, [r4, #0]
 8006a1c:	f001 fe81 	bl	8008722 <USB_HC_Halt>
 8006a20:	e68a      	b.n	8006738 <HAL_HCD_IRQHandler+0x364>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8006a22:	68ba      	ldr	r2, [r7, #8]
 8006a24:	f012 0f80 	tst.w	r2, #128	; 0x80
 8006a28:	d023      	beq.n	8006a72 <HAL_HCD_IRQHandler+0x69e>
    if (hhcd->Init.dma_enable == 0U)
 8006a2a:	6923      	ldr	r3, [r4, #16]
 8006a2c:	b17b      	cbz	r3, 8006a4e <HAL_HCD_IRQHandler+0x67a>
      hhcd->hc[ch_num].ErrCnt++;
 8006a2e:	fb0b 4201 	mla	r2, fp, r1, r4
 8006a32:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
 8006a34:	3301      	adds	r3, #1
 8006a36:	65d3      	str	r3, [r2, #92]	; 0x5c
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8006a38:	2b02      	cmp	r3, #2
 8006a3a:	d810      	bhi.n	8006a5e <HAL_HCD_IRQHandler+0x68a>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8006a3c:	fb0b 4101 	mla	r1, fp, r1, r4
 8006a40:	f04f 0302 	mov.w	r3, #2
 8006a44:	f881 3060 	strb.w	r3, [r1, #96]	; 0x60
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8006a48:	2380      	movs	r3, #128	; 0x80
 8006a4a:	60bb      	str	r3, [r7, #8]
 8006a4c:	e674      	b.n	8006738 <HAL_HCD_IRQHandler+0x364>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8006a4e:	fb0b 4301 	mla	r3, fp, r1, r4
 8006a52:	2206      	movs	r2, #6
 8006a54:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006a58:	f001 fe63 	bl	8008722 <USB_HC_Halt>
 8006a5c:	e7f4      	b.n	8006a48 <HAL_HCD_IRQHandler+0x674>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8006a5e:	4613      	mov	r3, r2
 8006a60:	2200      	movs	r2, #0
 8006a62:	65da      	str	r2, [r3, #92]	; 0x5c
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8006a64:	2204      	movs	r2, #4
 8006a66:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8006a6a:	4620      	mov	r0, r4
 8006a6c:	f003 f91e 	bl	8009cac <HAL_HCD_HC_NotifyURBChange_Callback>
 8006a70:	e7ea      	b.n	8006a48 <HAL_HCD_IRQHandler+0x674>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8006a72:	68ba      	ldr	r2, [r7, #8]
 8006a74:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8006a78:	d121      	bne.n	8006abe <HAL_HCD_IRQHandler+0x6ea>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8006a7a:	68ba      	ldr	r2, [r7, #8]
 8006a7c:	f012 0f02 	tst.w	r2, #2
 8006a80:	f43f ae5a 	beq.w	8006738 <HAL_HCD_IRQHandler+0x364>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8006a84:	fb0b 4201 	mla	r2, fp, r1, r4
 8006a88:	f892 2061 	ldrb.w	r2, [r2, #97]	; 0x61
 8006a8c:	2a01      	cmp	r2, #1
 8006a8e:	d021      	beq.n	8006ad4 <HAL_HCD_IRQHandler+0x700>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8006a90:	2a03      	cmp	r2, #3
 8006a92:	d04e      	beq.n	8006b32 <HAL_HCD_IRQHandler+0x75e>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8006a94:	2a04      	cmp	r2, #4
 8006a96:	d05c      	beq.n	8006b52 <HAL_HCD_IRQHandler+0x77e>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8006a98:	2a05      	cmp	r2, #5
 8006a9a:	d061      	beq.n	8006b60 <HAL_HCD_IRQHandler+0x78c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8006a9c:	2a06      	cmp	r2, #6
 8006a9e:	d001      	beq.n	8006aa4 <HAL_HCD_IRQHandler+0x6d0>
 8006aa0:	2a08      	cmp	r2, #8
 8006aa2:	d14c      	bne.n	8006b3e <HAL_HCD_IRQHandler+0x76a>
      hhcd->hc[ch_num].ErrCnt++;
 8006aa4:	fb0b 4001 	mla	r0, fp, r1, r4
 8006aa8:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8006aaa:	3201      	adds	r2, #1
 8006aac:	65c2      	str	r2, [r0, #92]	; 0x5c
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8006aae:	2a02      	cmp	r2, #2
 8006ab0:	d95b      	bls.n	8006b6a <HAL_HCD_IRQHandler+0x796>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8006ab2:	2200      	movs	r2, #0
 8006ab4:	65c2      	str	r2, [r0, #92]	; 0x5c
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8006ab6:	2204      	movs	r2, #4
 8006ab8:	f880 2060 	strb.w	r2, [r0, #96]	; 0x60
 8006abc:	e03f      	b.n	8006b3e <HAL_HCD_IRQHandler+0x76a>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8006abe:	fb0b 4301 	mla	r3, fp, r1, r4
 8006ac2:	2208      	movs	r2, #8
 8006ac4:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006ac8:	f001 fe2b 	bl	8008722 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8006acc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006ad0:	60bb      	str	r3, [r7, #8]
 8006ad2:	e631      	b.n	8006738 <HAL_HCD_IRQHandler+0x364>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8006ad4:	fb0b 4301 	mla	r3, fp, r1, r4
 8006ad8:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8006adc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006ae0:	3b02      	subs	r3, #2
 8006ae2:	b2db      	uxtb	r3, r3
 8006ae4:	4293      	cmp	r3, r2
 8006ae6:	d82a      	bhi.n	8006b3e <HAL_HCD_IRQHandler+0x76a>
        if (hhcd->Init.dma_enable == 0U)
 8006ae8:	6923      	ldr	r3, [r4, #16]
 8006aea:	b943      	cbnz	r3, 8006afe <HAL_HCD_IRQHandler+0x72a>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8006aec:	fb0b 4201 	mla	r2, fp, r1, r4
 8006af0:	f892 3055 	ldrb.w	r3, [r2, #85]	; 0x55
 8006af4:	f083 0301 	eor.w	r3, r3, #1
 8006af8:	f882 3055 	strb.w	r3, [r2, #85]	; 0x55
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8006afc:	e01f      	b.n	8006b3e <HAL_HCD_IRQHandler+0x76a>
 8006afe:	2b01      	cmp	r3, #1
 8006b00:	d11d      	bne.n	8006b3e <HAL_HCD_IRQHandler+0x76a>
 8006b02:	fb0b 4301 	mla	r3, fp, r1, r4
 8006b06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b08:	b1cb      	cbz	r3, 8006b3e <HAL_HCD_IRQHandler+0x76a>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8006b0a:	fb0b 4201 	mla	r2, fp, r1, r4
 8006b0e:	f8b2 2040 	ldrh.w	r2, [r2, #64]	; 0x40
 8006b12:	3b01      	subs	r3, #1
 8006b14:	4413      	add	r3, r2
 8006b16:	fbb3 f3f2 	udiv	r3, r3, r2
          if ((num_packets & 1U) != 0U)
 8006b1a:	f013 0f01 	tst.w	r3, #1
 8006b1e:	d00e      	beq.n	8006b3e <HAL_HCD_IRQHandler+0x76a>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8006b20:	fb0b 4201 	mla	r2, fp, r1, r4
 8006b24:	f892 3055 	ldrb.w	r3, [r2, #85]	; 0x55
 8006b28:	f083 0301 	eor.w	r3, r3, #1
 8006b2c:	f882 3055 	strb.w	r3, [r2, #85]	; 0x55
 8006b30:	e005      	b.n	8006b3e <HAL_HCD_IRQHandler+0x76a>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8006b32:	fb0b 4301 	mla	r3, fp, r1, r4
 8006b36:	f04f 0202 	mov.w	r2, #2
 8006b3a:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8006b3e:	2302      	movs	r3, #2
 8006b40:	60bb      	str	r3, [r7, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8006b42:	fb0b 4301 	mla	r3, fp, r1, r4
 8006b46:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
 8006b4a:	4620      	mov	r0, r4
 8006b4c:	f003 f8ae 	bl	8009cac <HAL_HCD_HC_NotifyURBChange_Callback>
 8006b50:	e5f2      	b.n	8006738 <HAL_HCD_IRQHandler+0x364>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8006b52:	fb0b 4301 	mla	r3, fp, r1, r4
 8006b56:	f04f 0202 	mov.w	r2, #2
 8006b5a:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
 8006b5e:	e7ee      	b.n	8006b3e <HAL_HCD_IRQHandler+0x76a>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8006b60:	fb0b 4301 	mla	r3, fp, r1, r4
 8006b64:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
 8006b68:	e7e9      	b.n	8006b3e <HAL_HCD_IRQHandler+0x76a>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8006b6a:	fb0b 4201 	mla	r2, fp, r1, r4
 8006b6e:	f04f 0002 	mov.w	r0, #2
 8006b72:	f882 0060 	strb.w	r0, [r2, #96]	; 0x60
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006b76:	f853 200c 	ldr.w	r2, [r3, ip]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006b7a:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006b7e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006b82:	f843 200c 	str.w	r2, [r3, ip]
 8006b86:	e7da      	b.n	8006b3e <HAL_HCD_IRQHandler+0x76a>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8006b88:	6823      	ldr	r3, [r4, #0]
 8006b8a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006b8e:	615a      	str	r2, [r3, #20]
 8006b90:	e42a      	b.n	80063e8 <HAL_HCD_IRQHandler+0x14>

08006b92 <HAL_HCD_Start>:
  __HAL_LOCK(hhcd);
 8006b92:	f890 32f8 	ldrb.w	r3, [r0, #760]	; 0x2f8
 8006b96:	2b01      	cmp	r3, #1
 8006b98:	d00e      	beq.n	8006bb8 <HAL_HCD_Start+0x26>
{
 8006b9a:	b510      	push	{r4, lr}
 8006b9c:	4604      	mov	r4, r0
  __HAL_LOCK(hhcd);
 8006b9e:	2101      	movs	r1, #1
 8006ba0:	f880 12f8 	strb.w	r1, [r0, #760]	; 0x2f8
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8006ba4:	6800      	ldr	r0, [r0, #0]
 8006ba6:	f001 fcd2 	bl	800854e <USB_DriveVbus>
  __HAL_HCD_ENABLE(hhcd);
 8006baa:	6820      	ldr	r0, [r4, #0]
 8006bac:	f001 fb4d 	bl	800824a <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8006bb0:	2000      	movs	r0, #0
 8006bb2:	f884 02f8 	strb.w	r0, [r4, #760]	; 0x2f8
}
 8006bb6:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hhcd);
 8006bb8:	2002      	movs	r0, #2
}
 8006bba:	4770      	bx	lr

08006bbc <HAL_HCD_Stop>:
  __HAL_LOCK(hhcd);
 8006bbc:	f890 32f8 	ldrb.w	r3, [r0, #760]	; 0x2f8
 8006bc0:	2b01      	cmp	r3, #1
 8006bc2:	d00b      	beq.n	8006bdc <HAL_HCD_Stop+0x20>
{
 8006bc4:	b510      	push	{r4, lr}
 8006bc6:	4604      	mov	r4, r0
  __HAL_LOCK(hhcd);
 8006bc8:	2301      	movs	r3, #1
 8006bca:	f880 32f8 	strb.w	r3, [r0, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8006bce:	6800      	ldr	r0, [r0, #0]
 8006bd0:	f001 fed3 	bl	800897a <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8006bd4:	2000      	movs	r0, #0
 8006bd6:	f884 02f8 	strb.w	r0, [r4, #760]	; 0x2f8
}
 8006bda:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hhcd);
 8006bdc:	2002      	movs	r0, #2
}
 8006bde:	4770      	bx	lr

08006be0 <HAL_HCD_ResetPort>:
{
 8006be0:	b508      	push	{r3, lr}
  return (USB_ResetPort(hhcd->Instance));
 8006be2:	6800      	ldr	r0, [r0, #0]
 8006be4:	f001 fc94 	bl	8008510 <USB_ResetPort>
}
 8006be8:	bd08      	pop	{r3, pc}

08006bea <HAL_HCD_HC_GetURBState>:
  return hhcd->hc[chnum].urb_state;
 8006bea:	232c      	movs	r3, #44	; 0x2c
 8006bec:	fb03 0001 	mla	r0, r3, r1, r0
}
 8006bf0:	f890 0060 	ldrb.w	r0, [r0, #96]	; 0x60
 8006bf4:	4770      	bx	lr

08006bf6 <HAL_HCD_HC_GetXferCount>:
  return hhcd->hc[chnum].xfer_count;
 8006bf6:	232c      	movs	r3, #44	; 0x2c
 8006bf8:	fb03 0001 	mla	r0, r3, r1, r0
}
 8006bfc:	6d00      	ldr	r0, [r0, #80]	; 0x50
 8006bfe:	4770      	bx	lr

08006c00 <HAL_HCD_GetCurrentFrame>:
{
 8006c00:	b508      	push	{r3, lr}
  return (USB_GetCurrentFrame(hhcd->Instance));
 8006c02:	6800      	ldr	r0, [r0, #0]
 8006c04:	f001 fcd2 	bl	80085ac <USB_GetCurrentFrame>
}
 8006c08:	bd08      	pop	{r3, pc}

08006c0a <HAL_HCD_GetCurrentSpeed>:
{
 8006c0a:	b508      	push	{r3, lr}
  return (USB_GetHostSpeed(hhcd->Instance));
 8006c0c:	6800      	ldr	r0, [r0, #0]
 8006c0e:	f001 fcc2 	bl	8008596 <USB_GetHostSpeed>
}
 8006c12:	bd08      	pop	{r3, pc}

08006c14 <HAL_I2S_Init>:
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8006c14:	2800      	cmp	r0, #0
 8006c16:	f000 80b3 	beq.w	8006d80 <HAL_I2S_Init+0x16c>
{
 8006c1a:	b538      	push	{r3, r4, r5, lr}
 8006c1c:	4604      	mov	r4, r0
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8006c1e:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d038      	beq.n	8006c98 <HAL_I2S_Init+0x84>
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8006c26:	2202      	movs	r2, #2
 8006c28:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8006c2c:	6821      	ldr	r1, [r4, #0]
 8006c2e:	69cb      	ldr	r3, [r1, #28]
 8006c30:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8006c34:	f023 030f 	bic.w	r3, r3, #15
 8006c38:	61cb      	str	r3, [r1, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8006c3a:	6823      	ldr	r3, [r4, #0]
 8006c3c:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8006c3e:	6963      	ldr	r3, [r4, #20]
 8006c40:	4293      	cmp	r3, r2
 8006c42:	d04a      	beq.n	8006cda <HAL_I2S_Init+0xc6>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8006c44:	68e3      	ldr	r3, [r4, #12]
      packetlength = 16U;
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	bf0c      	ite	eq
 8006c4a:	2510      	moveq	r5, #16
 8006c4c:	2520      	movne	r5, #32
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8006c4e:	68a3      	ldr	r3, [r4, #8]
 8006c50:	2b20      	cmp	r3, #32
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8006c52:	bf98      	it	ls
 8006c54:	006d      	lslls	r5, r5, #1
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8006c56:	2001      	movs	r0, #1
 8006c58:	f000 fe58 	bl	800790c <HAL_RCCEx_GetPeriphCLKFreq>
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8006c5c:	6923      	ldr	r3, [r4, #16]
 8006c5e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006c62:	d020      	beq.n	8006ca6 <HAL_I2S_Init+0x92>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8006c64:	fbb0 f0f5 	udiv	r0, r0, r5
 8006c68:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8006c6c:	0043      	lsls	r3, r0, #1
 8006c6e:	6960      	ldr	r0, [r4, #20]
 8006c70:	fbb3 f3f0 	udiv	r3, r3, r0
 8006c74:	3305      	adds	r3, #5
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8006c76:	4a43      	ldr	r2, [pc, #268]	; (8006d84 <HAL_I2S_Init+0x170>)
 8006c78:	fba2 2303 	umull	r2, r3, r2, r3

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8006c7c:	f3c3 02c0 	ubfx	r2, r3, #3, #1

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8006c80:	ebc2 03d3 	rsb	r3, r2, r3, lsr #3
 8006c84:	085b      	lsrs	r3, r3, #1
    i2sdiv = 2U;
    i2sodd = 0U;
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8006c86:	1e99      	subs	r1, r3, #2
 8006c88:	29fd      	cmp	r1, #253	; 0xfd
 8006c8a:	d924      	bls.n	8006cd6 <HAL_I2S_Init+0xc2>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8006c8c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8006c8e:	f043 0310 	orr.w	r3, r3, #16
 8006c92:	6463      	str	r3, [r4, #68]	; 0x44
    return  HAL_ERROR;
 8006c94:	2001      	movs	r0, #1
 8006c96:	e03f      	b.n	8006d18 <HAL_I2S_Init+0x104>
    hi2s->Lock = HAL_UNLOCKED;
 8006c98:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8006c9c:	4b3a      	ldr	r3, [pc, #232]	; (8006d88 <HAL_I2S_Init+0x174>)
 8006c9e:	6343      	str	r3, [r0, #52]	; 0x34
    HAL_I2S_MspInit(hi2s);
 8006ca0:	f7fd fa8c 	bl	80041bc <HAL_I2S_MspInit>
 8006ca4:	e7bf      	b.n	8006c26 <HAL_I2S_Init+0x12>
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8006ca6:	68e3      	ldr	r3, [r4, #12]
 8006ca8:	b153      	cbz	r3, 8006cc0 <HAL_I2S_Init+0xac>
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8006caa:	00ad      	lsls	r5, r5, #2
 8006cac:	fbb0 f0f5 	udiv	r0, r0, r5
 8006cb0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8006cb4:	0043      	lsls	r3, r0, #1
 8006cb6:	6960      	ldr	r0, [r4, #20]
 8006cb8:	fbb3 f3f0 	udiv	r3, r3, r0
 8006cbc:	3305      	adds	r3, #5
 8006cbe:	e7da      	b.n	8006c76 <HAL_I2S_Init+0x62>
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8006cc0:	00ed      	lsls	r5, r5, #3
 8006cc2:	fbb0 f0f5 	udiv	r0, r0, r5
 8006cc6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8006cca:	0043      	lsls	r3, r0, #1
 8006ccc:	6960      	ldr	r0, [r4, #20]
 8006cce:	fbb3 f3f0 	udiv	r3, r3, r0
 8006cd2:	3305      	adds	r3, #5
 8006cd4:	e7cf      	b.n	8006c76 <HAL_I2S_Init+0x62>
    i2sodd = (uint32_t)(i2sodd << 8U);
 8006cd6:	0212      	lsls	r2, r2, #8
 8006cd8:	e000      	b.n	8006cdc <HAL_I2S_Init+0xc8>
    i2sodd = 0U;
 8006cda:	2200      	movs	r2, #0
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8006cdc:	6821      	ldr	r1, [r4, #0]
 8006cde:	4313      	orrs	r3, r2
 8006ce0:	6922      	ldr	r2, [r4, #16]
 8006ce2:	4313      	orrs	r3, r2
 8006ce4:	620b      	str	r3, [r1, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8006ce6:	6821      	ldr	r1, [r4, #0]
 8006ce8:	69ca      	ldr	r2, [r1, #28]
 8006cea:	6863      	ldr	r3, [r4, #4]
 8006cec:	68a0      	ldr	r0, [r4, #8]
 8006cee:	4303      	orrs	r3, r0
 8006cf0:	f422 627b 	bic.w	r2, r2, #4016	; 0xfb0
 8006cf4:	f022 020f 	bic.w	r2, r2, #15
 8006cf8:	4313      	orrs	r3, r2
 8006cfa:	68e2      	ldr	r2, [r4, #12]
 8006cfc:	4313      	orrs	r3, r2
 8006cfe:	69a2      	ldr	r2, [r4, #24]
 8006d00:	4313      	orrs	r3, r2
 8006d02:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006d06:	61cb      	str	r3, [r1, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8006d08:	6a23      	ldr	r3, [r4, #32]
 8006d0a:	2b01      	cmp	r3, #1
 8006d0c:	d005      	beq.n	8006d1a <HAL_I2S_Init+0x106>
    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8006d0e:	2000      	movs	r0, #0
 8006d10:	6460      	str	r0, [r4, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8006d12:	2301      	movs	r3, #1
 8006d14:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41

  return HAL_OK;
}
 8006d18:	bd38      	pop	{r3, r4, r5, pc}
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8006d1a:	4b1c      	ldr	r3, [pc, #112]	; (8006d8c <HAL_I2S_Init+0x178>)
 8006d1c:	6363      	str	r3, [r4, #52]	; 0x34
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8006d1e:	6821      	ldr	r1, [r4, #0]
 8006d20:	4b1b      	ldr	r3, [pc, #108]	; (8006d90 <HAL_I2S_Init+0x17c>)
 8006d22:	4a1c      	ldr	r2, [pc, #112]	; (8006d94 <HAL_I2S_Init+0x180>)
 8006d24:	4299      	cmp	r1, r3
 8006d26:	bf18      	it	ne
 8006d28:	f04f 2240 	movne.w	r2, #1073758208	; 0x40004000
 8006d2c:	69d3      	ldr	r3, [r2, #28]
 8006d2e:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8006d32:	f023 030f 	bic.w	r3, r3, #15
 8006d36:	61d3      	str	r3, [r2, #28]
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8006d38:	6821      	ldr	r1, [r4, #0]
 8006d3a:	4a15      	ldr	r2, [pc, #84]	; (8006d90 <HAL_I2S_Init+0x17c>)
 8006d3c:	4b15      	ldr	r3, [pc, #84]	; (8006d94 <HAL_I2S_Init+0x180>)
 8006d3e:	4291      	cmp	r1, r2
 8006d40:	bf18      	it	ne
 8006d42:	f04f 2340 	movne.w	r3, #1073758208	; 0x40004000
 8006d46:	2202      	movs	r2, #2
 8006d48:	621a      	str	r2, [r3, #32]
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8006d4a:	6821      	ldr	r1, [r4, #0]
 8006d4c:	4b10      	ldr	r3, [pc, #64]	; (8006d90 <HAL_I2S_Init+0x17c>)
 8006d4e:	4a11      	ldr	r2, [pc, #68]	; (8006d94 <HAL_I2S_Init+0x180>)
 8006d50:	4299      	cmp	r1, r3
 8006d52:	bf18      	it	ne
 8006d54:	f04f 2240 	movne.w	r2, #1073758208	; 0x40004000
 8006d58:	69d1      	ldr	r1, [r2, #28]
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8006d5a:	6863      	ldr	r3, [r4, #4]
      tmp = I2S_MODE_SLAVE_TX;
 8006d5c:	f433 7300 	bics.w	r3, r3, #512	; 0x200
 8006d60:	bf0c      	ite	eq
 8006d62:	f44f 7080 	moveq.w	r0, #256	; 0x100
 8006d66:	2000      	movne	r0, #0
                         (uint16_t)hi2s->Init.Standard   | \
 8006d68:	68a3      	ldr	r3, [r4, #8]
                         (uint16_t)hi2s->Init.DataFormat | \
 8006d6a:	68e5      	ldr	r5, [r4, #12]
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8006d6c:	432b      	orrs	r3, r5
 8006d6e:	4303      	orrs	r3, r0
                         (uint16_t)hi2s->Init.CPOL);
 8006d70:	69a0      	ldr	r0, [r4, #24]
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8006d72:	4303      	orrs	r3, r0
 8006d74:	430b      	orrs	r3, r1
 8006d76:	b29b      	uxth	r3, r3
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8006d78:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006d7c:	61d3      	str	r3, [r2, #28]
 8006d7e:	e7c6      	b.n	8006d0e <HAL_I2S_Init+0xfa>
    return HAL_ERROR;
 8006d80:	2001      	movs	r0, #1
}
 8006d82:	4770      	bx	lr
 8006d84:	cccccccd 	.word	0xcccccccd
 8006d88:	08006d9f 	.word	0x08006d9f
 8006d8c:	08006ec9 	.word	0x08006ec9
 8006d90:	40003800 	.word	0x40003800
 8006d94:	40003400 	.word	0x40003400

08006d98 <HAL_I2S_TxCpltCallback>:
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8006d98:	4770      	bx	lr

08006d9a <HAL_I2S_RxCpltCallback>:
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8006d9a:	4770      	bx	lr

08006d9c <HAL_I2S_ErrorCallback>:
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8006d9c:	4770      	bx	lr

08006d9e <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8006d9e:	b510      	push	{r4, lr}
 8006da0:	b084      	sub	sp, #16
 8006da2:	4604      	mov	r4, r0
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8006da4:	6802      	ldr	r2, [r0, #0]
 8006da6:	6893      	ldr	r3, [r2, #8]
 8006da8:	9303      	str	r3, [sp, #12]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8006daa:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8006dae:	b2db      	uxtb	r3, r3
 8006db0:	2b04      	cmp	r3, #4
 8006db2:	d006      	beq.n	8006dc2 <I2S_IRQHandler+0x24>
      HAL_I2S_ErrorCallback(hi2s);
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8006db4:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8006db8:	b2db      	uxtb	r3, r3
 8006dba:	2b03      	cmp	r3, #3
 8006dbc:	d042      	beq.n	8006e44 <I2S_IRQHandler+0xa6>
#else
      HAL_I2S_ErrorCallback(hi2s);
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006dbe:	b004      	add	sp, #16
 8006dc0:	bd10      	pop	{r4, pc}
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8006dc2:	9b03      	ldr	r3, [sp, #12]
 8006dc4:	f013 0f01 	tst.w	r3, #1
 8006dc8:	d003      	beq.n	8006dd2 <I2S_IRQHandler+0x34>
 8006dca:	6853      	ldr	r3, [r2, #4]
 8006dcc:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006dd0:	d11f      	bne.n	8006e12 <I2S_IRQHandler+0x74>
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8006dd2:	9b03      	ldr	r3, [sp, #12]
 8006dd4:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006dd8:	d0ec      	beq.n	8006db4 <I2S_IRQHandler+0x16>
 8006dda:	6823      	ldr	r3, [r4, #0]
 8006ddc:	685a      	ldr	r2, [r3, #4]
 8006dde:	f012 0f20 	tst.w	r2, #32
 8006de2:	d0e7      	beq.n	8006db4 <I2S_IRQHandler+0x16>
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006de4:	685a      	ldr	r2, [r3, #4]
 8006de6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006dea:	605a      	str	r2, [r3, #4]
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8006dec:	2300      	movs	r3, #0
 8006dee:	9301      	str	r3, [sp, #4]
 8006df0:	6823      	ldr	r3, [r4, #0]
 8006df2:	68da      	ldr	r2, [r3, #12]
 8006df4:	9201      	str	r2, [sp, #4]
 8006df6:	689b      	ldr	r3, [r3, #8]
 8006df8:	9301      	str	r3, [sp, #4]
 8006dfa:	9b01      	ldr	r3, [sp, #4]
      hi2s->State = HAL_I2S_STATE_READY;
 8006dfc:	2301      	movs	r3, #1
 8006dfe:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8006e02:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8006e04:	f043 0302 	orr.w	r3, r3, #2
 8006e08:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 8006e0a:	4620      	mov	r0, r4
 8006e0c:	f7ff ffc6 	bl	8006d9c <HAL_I2S_ErrorCallback>
 8006e10:	e7d0      	b.n	8006db4 <I2S_IRQHandler+0x16>
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8006e12:	68d2      	ldr	r2, [r2, #12]
 8006e14:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8006e16:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8006e18:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8006e1a:	3302      	adds	r3, #2
 8006e1c:	62c3      	str	r3, [r0, #44]	; 0x2c
  hi2s->RxXferCount--;
 8006e1e:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 8006e20:	3b01      	subs	r3, #1
 8006e22:	b29b      	uxth	r3, r3
 8006e24:	8643      	strh	r3, [r0, #50]	; 0x32
  if (hi2s->RxXferCount == 0U)
 8006e26:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 8006e28:	b29b      	uxth	r3, r3
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d1d1      	bne.n	8006dd2 <I2S_IRQHandler+0x34>
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006e2e:	6802      	ldr	r2, [r0, #0]
 8006e30:	6853      	ldr	r3, [r2, #4]
 8006e32:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8006e36:	6053      	str	r3, [r2, #4]
    hi2s->State = HAL_I2S_STATE_READY;
 8006e38:	2301      	movs	r3, #1
 8006e3a:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    HAL_I2S_RxCpltCallback(hi2s);
 8006e3e:	f7ff ffac 	bl	8006d9a <HAL_I2S_RxCpltCallback>
 8006e42:	e7c6      	b.n	8006dd2 <I2S_IRQHandler+0x34>
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8006e44:	9b03      	ldr	r3, [sp, #12]
 8006e46:	f013 0f02 	tst.w	r3, #2
 8006e4a:	d004      	beq.n	8006e56 <I2S_IRQHandler+0xb8>
 8006e4c:	6823      	ldr	r3, [r4, #0]
 8006e4e:	685a      	ldr	r2, [r3, #4]
 8006e50:	f012 0f80 	tst.w	r2, #128	; 0x80
 8006e54:	d11d      	bne.n	8006e92 <I2S_IRQHandler+0xf4>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8006e56:	9b03      	ldr	r3, [sp, #12]
 8006e58:	f013 0f08 	tst.w	r3, #8
 8006e5c:	d0af      	beq.n	8006dbe <I2S_IRQHandler+0x20>
 8006e5e:	6823      	ldr	r3, [r4, #0]
 8006e60:	685a      	ldr	r2, [r3, #4]
 8006e62:	f012 0f20 	tst.w	r2, #32
 8006e66:	d0aa      	beq.n	8006dbe <I2S_IRQHandler+0x20>
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006e68:	685a      	ldr	r2, [r3, #4]
 8006e6a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006e6e:	605a      	str	r2, [r3, #4]
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8006e70:	2300      	movs	r3, #0
 8006e72:	9302      	str	r3, [sp, #8]
 8006e74:	6823      	ldr	r3, [r4, #0]
 8006e76:	689b      	ldr	r3, [r3, #8]
 8006e78:	9302      	str	r3, [sp, #8]
 8006e7a:	9b02      	ldr	r3, [sp, #8]
      hi2s->State = HAL_I2S_STATE_READY;
 8006e7c:	2301      	movs	r3, #1
 8006e7e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8006e82:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8006e84:	f043 0304 	orr.w	r3, r3, #4
 8006e88:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 8006e8a:	4620      	mov	r0, r4
 8006e8c:	f7ff ff86 	bl	8006d9c <HAL_I2S_ErrorCallback>
}
 8006e90:	e795      	b.n	8006dbe <I2S_IRQHandler+0x20>
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8006e92:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8006e94:	8812      	ldrh	r2, [r2, #0]
 8006e96:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8006e98:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006e9a:	3302      	adds	r3, #2
 8006e9c:	6263      	str	r3, [r4, #36]	; 0x24
  hi2s->TxXferCount--;
 8006e9e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8006ea0:	3b01      	subs	r3, #1
 8006ea2:	b29b      	uxth	r3, r3
 8006ea4:	8563      	strh	r3, [r4, #42]	; 0x2a
  if (hi2s->TxXferCount == 0U)
 8006ea6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8006ea8:	b29b      	uxth	r3, r3
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d1d3      	bne.n	8006e56 <I2S_IRQHandler+0xb8>
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006eae:	6822      	ldr	r2, [r4, #0]
 8006eb0:	6853      	ldr	r3, [r2, #4]
 8006eb2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006eb6:	6053      	str	r3, [r2, #4]
    hi2s->State = HAL_I2S_STATE_READY;
 8006eb8:	2301      	movs	r3, #1
 8006eba:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    HAL_I2S_TxCpltCallback(hi2s);
 8006ebe:	4620      	mov	r0, r4
 8006ec0:	f7ff ff6a 	bl	8006d98 <HAL_I2S_TxCpltCallback>
 8006ec4:	e7c7      	b.n	8006e56 <I2S_IRQHandler+0xb8>

08006ec6 <HAL_I2SEx_TxRxCpltCallback>:
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8006ec6:	4770      	bx	lr

08006ec8 <HAL_I2SEx_FullDuplex_IRQHandler>:
{
 8006ec8:	b510      	push	{r4, lr}
 8006eca:	b086      	sub	sp, #24
 8006ecc:	4604      	mov	r4, r0
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8006ece:	6802      	ldr	r2, [r0, #0]
 8006ed0:	6893      	ldr	r3, [r2, #8]
 8006ed2:	9305      	str	r3, [sp, #20]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8006ed4:	499a      	ldr	r1, [pc, #616]	; (8007140 <HAL_I2SEx_FullDuplex_IRQHandler+0x278>)
 8006ed6:	4b9b      	ldr	r3, [pc, #620]	; (8007144 <HAL_I2SEx_FullDuplex_IRQHandler+0x27c>)
 8006ed8:	428a      	cmp	r2, r1
 8006eda:	bf18      	it	ne
 8006edc:	f04f 2340 	movne.w	r3, #1073758208	; 0x40004000
 8006ee0:	6899      	ldr	r1, [r3, #8]
 8006ee2:	9104      	str	r1, [sp, #16]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8006ee4:	6851      	ldr	r1, [r2, #4]
 8006ee6:	9103      	str	r1, [sp, #12]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8006ee8:	6859      	ldr	r1, [r3, #4]
 8006eea:	9102      	str	r1, [sp, #8]
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8006eec:	6841      	ldr	r1, [r0, #4]
 8006eee:	f431 7100 	bics.w	r1, r1, #512	; 0x200
 8006ef2:	f040 80ac 	bne.w	800704e <HAL_I2SEx_FullDuplex_IRQHandler+0x186>
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8006ef6:	9b05      	ldr	r3, [sp, #20]
 8006ef8:	f013 0f02 	tst.w	r3, #2
 8006efc:	d003      	beq.n	8006f06 <HAL_I2SEx_FullDuplex_IRQHandler+0x3e>
 8006efe:	9b03      	ldr	r3, [sp, #12]
 8006f00:	f013 0f80 	tst.w	r3, #128	; 0x80
 8006f04:	d15b      	bne.n	8006fbe <HAL_I2SEx_FullDuplex_IRQHandler+0xf6>
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8006f06:	9b04      	ldr	r3, [sp, #16]
 8006f08:	f013 0f01 	tst.w	r3, #1
 8006f0c:	d003      	beq.n	8006f16 <HAL_I2SEx_FullDuplex_IRQHandler+0x4e>
 8006f0e:	9b02      	ldr	r3, [sp, #8]
 8006f10:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006f14:	d16f      	bne.n	8006ff6 <HAL_I2SEx_FullDuplex_IRQHandler+0x12e>
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8006f16:	9b04      	ldr	r3, [sp, #16]
 8006f18:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006f1c:	d025      	beq.n	8006f6a <HAL_I2SEx_FullDuplex_IRQHandler+0xa2>
 8006f1e:	9b02      	ldr	r3, [sp, #8]
 8006f20:	f013 0f20 	tst.w	r3, #32
 8006f24:	d021      	beq.n	8006f6a <HAL_I2SEx_FullDuplex_IRQHandler+0xa2>
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006f26:	6821      	ldr	r1, [r4, #0]
 8006f28:	4a85      	ldr	r2, [pc, #532]	; (8007140 <HAL_I2SEx_FullDuplex_IRQHandler+0x278>)
 8006f2a:	4b86      	ldr	r3, [pc, #536]	; (8007144 <HAL_I2SEx_FullDuplex_IRQHandler+0x27c>)
 8006f2c:	4291      	cmp	r1, r2
 8006f2e:	bf18      	it	ne
 8006f30:	f04f 2340 	movne.w	r3, #1073758208	; 0x40004000
 8006f34:	685a      	ldr	r2, [r3, #4]
 8006f36:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006f3a:	605a      	str	r2, [r3, #4]
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006f3c:	6822      	ldr	r2, [r4, #0]
 8006f3e:	6853      	ldr	r3, [r2, #4]
 8006f40:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006f44:	6053      	str	r3, [r2, #4]
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8006f46:	2300      	movs	r3, #0
 8006f48:	9300      	str	r3, [sp, #0]
 8006f4a:	6823      	ldr	r3, [r4, #0]
 8006f4c:	68da      	ldr	r2, [r3, #12]
 8006f4e:	9200      	str	r2, [sp, #0]
 8006f50:	689b      	ldr	r3, [r3, #8]
 8006f52:	9300      	str	r3, [sp, #0]
 8006f54:	9b00      	ldr	r3, [sp, #0]
      hi2s->State = HAL_I2S_STATE_READY;
 8006f56:	2301      	movs	r3, #1
 8006f58:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8006f5c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8006f5e:	f043 0302 	orr.w	r3, r3, #2
 8006f62:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 8006f64:	4620      	mov	r0, r4
 8006f66:	f7ff ff19 	bl	8006d9c <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006f6a:	9b05      	ldr	r3, [sp, #20]
 8006f6c:	f013 0f08 	tst.w	r3, #8
 8006f70:	d023      	beq.n	8006fba <HAL_I2SEx_FullDuplex_IRQHandler+0xf2>
 8006f72:	9b03      	ldr	r3, [sp, #12]
 8006f74:	f013 0f20 	tst.w	r3, #32
 8006f78:	d01f      	beq.n	8006fba <HAL_I2SEx_FullDuplex_IRQHandler+0xf2>
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006f7a:	6822      	ldr	r2, [r4, #0]
 8006f7c:	6853      	ldr	r3, [r2, #4]
 8006f7e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006f82:	6053      	str	r3, [r2, #4]
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006f84:	6821      	ldr	r1, [r4, #0]
 8006f86:	4a6e      	ldr	r2, [pc, #440]	; (8007140 <HAL_I2SEx_FullDuplex_IRQHandler+0x278>)
 8006f88:	4b6e      	ldr	r3, [pc, #440]	; (8007144 <HAL_I2SEx_FullDuplex_IRQHandler+0x27c>)
 8006f8a:	4291      	cmp	r1, r2
 8006f8c:	bf18      	it	ne
 8006f8e:	f04f 2340 	movne.w	r3, #1073758208	; 0x40004000
 8006f92:	685a      	ldr	r2, [r3, #4]
 8006f94:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006f98:	605a      	str	r2, [r3, #4]
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8006f9a:	2300      	movs	r3, #0
 8006f9c:	9301      	str	r3, [sp, #4]
 8006f9e:	6823      	ldr	r3, [r4, #0]
 8006fa0:	689b      	ldr	r3, [r3, #8]
 8006fa2:	9301      	str	r3, [sp, #4]
 8006fa4:	9b01      	ldr	r3, [sp, #4]
      hi2s->State = HAL_I2S_STATE_READY;
 8006fa6:	2301      	movs	r3, #1
 8006fa8:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8006fac:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8006fae:	f043 0304 	orr.w	r3, r3, #4
 8006fb2:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 8006fb4:	4620      	mov	r0, r4
 8006fb6:	f7ff fef1 	bl	8006d9c <HAL_I2S_ErrorCallback>
}
 8006fba:	b006      	add	sp, #24
 8006fbc:	bd10      	pop	{r4, pc}
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8006fbe:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8006fc0:	1c99      	adds	r1, r3, #2
 8006fc2:	6241      	str	r1, [r0, #36]	; 0x24
 8006fc4:	881b      	ldrh	r3, [r3, #0]
 8006fc6:	60d3      	str	r3, [r2, #12]
  hi2s->TxXferCount--;
 8006fc8:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8006fca:	3b01      	subs	r3, #1
 8006fcc:	b29b      	uxth	r3, r3
 8006fce:	8543      	strh	r3, [r0, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8006fd0:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8006fd2:	b29b      	uxth	r3, r3
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d196      	bne.n	8006f06 <HAL_I2SEx_FullDuplex_IRQHandler+0x3e>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006fd8:	6802      	ldr	r2, [r0, #0]
 8006fda:	6853      	ldr	r3, [r2, #4]
 8006fdc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006fe0:	6053      	str	r3, [r2, #4]

    if (hi2s->RxXferCount == 0U)
 8006fe2:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 8006fe4:	b29b      	uxth	r3, r3
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d18d      	bne.n	8006f06 <HAL_I2SEx_FullDuplex_IRQHandler+0x3e>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006fea:	2301      	movs	r3, #1
 8006fec:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006ff0:	f7ff ff69 	bl	8006ec6 <HAL_I2SEx_TxRxCpltCallback>
 8006ff4:	e787      	b.n	8006f06 <HAL_I2SEx_FullDuplex_IRQHandler+0x3e>
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8006ff6:	6821      	ldr	r1, [r4, #0]
 8006ff8:	4a51      	ldr	r2, [pc, #324]	; (8007140 <HAL_I2SEx_FullDuplex_IRQHandler+0x278>)
 8006ffa:	4b52      	ldr	r3, [pc, #328]	; (8007144 <HAL_I2SEx_FullDuplex_IRQHandler+0x27c>)
 8006ffc:	4291      	cmp	r1, r2
 8006ffe:	bf18      	it	ne
 8007000:	f04f 2340 	movne.w	r3, #1073758208	; 0x40004000
 8007004:	68da      	ldr	r2, [r3, #12]
 8007006:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8007008:	1c99      	adds	r1, r3, #2
 800700a:	62e1      	str	r1, [r4, #44]	; 0x2c
 800700c:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800700e:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8007010:	3b01      	subs	r3, #1
 8007012:	b29b      	uxth	r3, r3
 8007014:	8663      	strh	r3, [r4, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8007016:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8007018:	b29b      	uxth	r3, r3
 800701a:	2b00      	cmp	r3, #0
 800701c:	f47f af7b 	bne.w	8006f16 <HAL_I2SEx_FullDuplex_IRQHandler+0x4e>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007020:	6821      	ldr	r1, [r4, #0]
 8007022:	4a47      	ldr	r2, [pc, #284]	; (8007140 <HAL_I2SEx_FullDuplex_IRQHandler+0x278>)
 8007024:	4b47      	ldr	r3, [pc, #284]	; (8007144 <HAL_I2SEx_FullDuplex_IRQHandler+0x27c>)
 8007026:	4291      	cmp	r1, r2
 8007028:	bf18      	it	ne
 800702a:	f04f 2340 	movne.w	r3, #1073758208	; 0x40004000
 800702e:	685a      	ldr	r2, [r3, #4]
 8007030:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8007034:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8007036:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8007038:	b29b      	uxth	r3, r3
 800703a:	2b00      	cmp	r3, #0
 800703c:	f47f af6b 	bne.w	8006f16 <HAL_I2SEx_FullDuplex_IRQHandler+0x4e>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8007040:	2301      	movs	r3, #1
 8007042:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8007046:	4620      	mov	r0, r4
 8007048:	f7ff ff3d 	bl	8006ec6 <HAL_I2SEx_TxRxCpltCallback>
 800704c:	e763      	b.n	8006f16 <HAL_I2SEx_FullDuplex_IRQHandler+0x4e>
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 800704e:	9a04      	ldr	r2, [sp, #16]
 8007050:	f012 0f02 	tst.w	r2, #2
 8007054:	d003      	beq.n	800705e <HAL_I2SEx_FullDuplex_IRQHandler+0x196>
 8007056:	9a02      	ldr	r2, [sp, #8]
 8007058:	f012 0f80 	tst.w	r2, #128	; 0x80
 800705c:	d14e      	bne.n	80070fc <HAL_I2SEx_FullDuplex_IRQHandler+0x234>
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 800705e:	9b05      	ldr	r3, [sp, #20]
 8007060:	f013 0f01 	tst.w	r3, #1
 8007064:	d003      	beq.n	800706e <HAL_I2SEx_FullDuplex_IRQHandler+0x1a6>
 8007066:	9b03      	ldr	r3, [sp, #12]
 8007068:	f013 0f40 	tst.w	r3, #64	; 0x40
 800706c:	d16c      	bne.n	8007148 <HAL_I2SEx_FullDuplex_IRQHandler+0x280>
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800706e:	9b05      	ldr	r3, [sp, #20]
 8007070:	f013 0f40 	tst.w	r3, #64	; 0x40
 8007074:	d01d      	beq.n	80070b2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1ea>
 8007076:	9b03      	ldr	r3, [sp, #12]
 8007078:	f013 0f20 	tst.w	r3, #32
 800707c:	d019      	beq.n	80070b2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1ea>
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800707e:	6822      	ldr	r2, [r4, #0]
 8007080:	6853      	ldr	r3, [r2, #4]
 8007082:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8007086:	6053      	str	r3, [r2, #4]
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007088:	6821      	ldr	r1, [r4, #0]
 800708a:	4a2d      	ldr	r2, [pc, #180]	; (8007140 <HAL_I2SEx_FullDuplex_IRQHandler+0x278>)
 800708c:	4b2d      	ldr	r3, [pc, #180]	; (8007144 <HAL_I2SEx_FullDuplex_IRQHandler+0x27c>)
 800708e:	4291      	cmp	r1, r2
 8007090:	bf18      	it	ne
 8007092:	f04f 2340 	movne.w	r3, #1073758208	; 0x40004000
 8007096:	685a      	ldr	r2, [r3, #4]
 8007098:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800709c:	605a      	str	r2, [r3, #4]
      hi2s->State = HAL_I2S_STATE_READY;
 800709e:	2301      	movs	r3, #1
 80070a0:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80070a4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80070a6:	f043 0302 	orr.w	r3, r3, #2
 80070aa:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 80070ac:	4620      	mov	r0, r4
 80070ae:	f7ff fe75 	bl	8006d9c <HAL_I2S_ErrorCallback>
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80070b2:	9b04      	ldr	r3, [sp, #16]
 80070b4:	f013 0f08 	tst.w	r3, #8
 80070b8:	f43f af7f 	beq.w	8006fba <HAL_I2SEx_FullDuplex_IRQHandler+0xf2>
 80070bc:	9b02      	ldr	r3, [sp, #8]
 80070be:	f013 0f20 	tst.w	r3, #32
 80070c2:	f43f af7a 	beq.w	8006fba <HAL_I2SEx_FullDuplex_IRQHandler+0xf2>
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80070c6:	6821      	ldr	r1, [r4, #0]
 80070c8:	4a1d      	ldr	r2, [pc, #116]	; (8007140 <HAL_I2SEx_FullDuplex_IRQHandler+0x278>)
 80070ca:	4b1e      	ldr	r3, [pc, #120]	; (8007144 <HAL_I2SEx_FullDuplex_IRQHandler+0x27c>)
 80070cc:	4291      	cmp	r1, r2
 80070ce:	bf18      	it	ne
 80070d0:	f04f 2340 	movne.w	r3, #1073758208	; 0x40004000
 80070d4:	685a      	ldr	r2, [r3, #4]
 80070d6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80070da:	605a      	str	r2, [r3, #4]
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80070dc:	6822      	ldr	r2, [r4, #0]
 80070de:	6853      	ldr	r3, [r2, #4]
 80070e0:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 80070e4:	6053      	str	r3, [r2, #4]
      hi2s->State = HAL_I2S_STATE_READY;
 80070e6:	2301      	movs	r3, #1
 80070e8:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80070ec:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80070ee:	f043 0304 	orr.w	r3, r3, #4
 80070f2:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 80070f4:	4620      	mov	r0, r4
 80070f6:	f7ff fe51 	bl	8006d9c <HAL_I2S_ErrorCallback>
}
 80070fa:	e75e      	b.n	8006fba <HAL_I2SEx_FullDuplex_IRQHandler+0xf2>
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80070fc:	6a42      	ldr	r2, [r0, #36]	; 0x24
 80070fe:	1c91      	adds	r1, r2, #2
 8007100:	6241      	str	r1, [r0, #36]	; 0x24
 8007102:	8812      	ldrh	r2, [r2, #0]
 8007104:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8007106:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8007108:	3b01      	subs	r3, #1
 800710a:	b29b      	uxth	r3, r3
 800710c:	8543      	strh	r3, [r0, #42]	; 0x2a
  if (hi2s->TxXferCount == 0U)
 800710e:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8007110:	b29b      	uxth	r3, r3
 8007112:	2b00      	cmp	r3, #0
 8007114:	d1a3      	bne.n	800705e <HAL_I2SEx_FullDuplex_IRQHandler+0x196>
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007116:	6801      	ldr	r1, [r0, #0]
 8007118:	4a09      	ldr	r2, [pc, #36]	; (8007140 <HAL_I2SEx_FullDuplex_IRQHandler+0x278>)
 800711a:	4b0a      	ldr	r3, [pc, #40]	; (8007144 <HAL_I2SEx_FullDuplex_IRQHandler+0x27c>)
 800711c:	4291      	cmp	r1, r2
 800711e:	bf18      	it	ne
 8007120:	f04f 2340 	movne.w	r3, #1073758208	; 0x40004000
 8007124:	685a      	ldr	r2, [r3, #4]
 8007126:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800712a:	605a      	str	r2, [r3, #4]
    if (hi2s->RxXferCount == 0U)
 800712c:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 800712e:	b29b      	uxth	r3, r3
 8007130:	2b00      	cmp	r3, #0
 8007132:	d194      	bne.n	800705e <HAL_I2SEx_FullDuplex_IRQHandler+0x196>
      hi2s->State = HAL_I2S_STATE_READY;
 8007134:	2301      	movs	r3, #1
 8007136:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800713a:	f7ff fec4 	bl	8006ec6 <HAL_I2SEx_TxRxCpltCallback>
 800713e:	e78e      	b.n	800705e <HAL_I2SEx_FullDuplex_IRQHandler+0x196>
 8007140:	40003800 	.word	0x40003800
 8007144:	40003400 	.word	0x40003400
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8007148:	6823      	ldr	r3, [r4, #0]
 800714a:	68da      	ldr	r2, [r3, #12]
 800714c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800714e:	1c99      	adds	r1, r3, #2
 8007150:	62e1      	str	r1, [r4, #44]	; 0x2c
 8007152:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8007154:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8007156:	3b01      	subs	r3, #1
 8007158:	b29b      	uxth	r3, r3
 800715a:	8663      	strh	r3, [r4, #50]	; 0x32
  if (hi2s->RxXferCount == 0U)
 800715c:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 800715e:	b29b      	uxth	r3, r3
 8007160:	2b00      	cmp	r3, #0
 8007162:	d184      	bne.n	800706e <HAL_I2SEx_FullDuplex_IRQHandler+0x1a6>
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007164:	6822      	ldr	r2, [r4, #0]
 8007166:	6853      	ldr	r3, [r2, #4]
 8007168:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 800716c:	6053      	str	r3, [r2, #4]
    if (hi2s->TxXferCount == 0U)
 800716e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8007170:	b29b      	uxth	r3, r3
 8007172:	2b00      	cmp	r3, #0
 8007174:	f47f af7b 	bne.w	800706e <HAL_I2SEx_FullDuplex_IRQHandler+0x1a6>
      hi2s->State = HAL_I2S_STATE_READY;
 8007178:	2301      	movs	r3, #1
 800717a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800717e:	4620      	mov	r0, r4
 8007180:	f7ff fea1 	bl	8006ec6 <HAL_I2SEx_TxRxCpltCallback>
 8007184:	e773      	b.n	800706e <HAL_I2SEx_FullDuplex_IRQHandler+0x1a6>
 8007186:	bf00      	nop

08007188 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007188:	2800      	cmp	r0, #0
 800718a:	f000 81e1 	beq.w	8007550 <HAL_RCC_OscConfig+0x3c8>
{
 800718e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007192:	b082      	sub	sp, #8
 8007194:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007196:	6803      	ldr	r3, [r0, #0]
 8007198:	f013 0f01 	tst.w	r3, #1
 800719c:	d03b      	beq.n	8007216 <HAL_RCC_OscConfig+0x8e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800719e:	4b9f      	ldr	r3, [pc, #636]	; (800741c <HAL_RCC_OscConfig+0x294>)
 80071a0:	689b      	ldr	r3, [r3, #8]
 80071a2:	f003 030c 	and.w	r3, r3, #12
 80071a6:	2b04      	cmp	r3, #4
 80071a8:	d02c      	beq.n	8007204 <HAL_RCC_OscConfig+0x7c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80071aa:	4b9c      	ldr	r3, [pc, #624]	; (800741c <HAL_RCC_OscConfig+0x294>)
 80071ac:	689b      	ldr	r3, [r3, #8]
 80071ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80071b2:	2b08      	cmp	r3, #8
 80071b4:	d021      	beq.n	80071fa <HAL_RCC_OscConfig+0x72>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80071b6:	6863      	ldr	r3, [r4, #4]
 80071b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80071bc:	d04f      	beq.n	800725e <HAL_RCC_OscConfig+0xd6>
 80071be:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80071c2:	d052      	beq.n	800726a <HAL_RCC_OscConfig+0xe2>
 80071c4:	4b95      	ldr	r3, [pc, #596]	; (800741c <HAL_RCC_OscConfig+0x294>)
 80071c6:	681a      	ldr	r2, [r3, #0]
 80071c8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80071cc:	601a      	str	r2, [r3, #0]
 80071ce:	681a      	ldr	r2, [r3, #0]
 80071d0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80071d4:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80071d6:	6863      	ldr	r3, [r4, #4]
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d050      	beq.n	800727e <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80071dc:	f7fe fa56 	bl	800568c <HAL_GetTick>
 80071e0:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80071e2:	4e8e      	ldr	r6, [pc, #568]	; (800741c <HAL_RCC_OscConfig+0x294>)
 80071e4:	6833      	ldr	r3, [r6, #0]
 80071e6:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80071ea:	d114      	bne.n	8007216 <HAL_RCC_OscConfig+0x8e>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80071ec:	f7fe fa4e 	bl	800568c <HAL_GetTick>
 80071f0:	1b40      	subs	r0, r0, r5
 80071f2:	2864      	cmp	r0, #100	; 0x64
 80071f4:	d9f6      	bls.n	80071e4 <HAL_RCC_OscConfig+0x5c>
          {
            return HAL_TIMEOUT;
 80071f6:	2003      	movs	r0, #3
 80071f8:	e1b1      	b.n	800755e <HAL_RCC_OscConfig+0x3d6>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80071fa:	4b88      	ldr	r3, [pc, #544]	; (800741c <HAL_RCC_OscConfig+0x294>)
 80071fc:	685b      	ldr	r3, [r3, #4]
 80071fe:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8007202:	d0d8      	beq.n	80071b6 <HAL_RCC_OscConfig+0x2e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007204:	4b85      	ldr	r3, [pc, #532]	; (800741c <HAL_RCC_OscConfig+0x294>)
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800720c:	d003      	beq.n	8007216 <HAL_RCC_OscConfig+0x8e>
 800720e:	6863      	ldr	r3, [r4, #4]
 8007210:	2b00      	cmp	r3, #0
 8007212:	f000 819f 	beq.w	8007554 <HAL_RCC_OscConfig+0x3cc>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007216:	6823      	ldr	r3, [r4, #0]
 8007218:	f013 0f02 	tst.w	r3, #2
 800721c:	d054      	beq.n	80072c8 <HAL_RCC_OscConfig+0x140>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800721e:	4b7f      	ldr	r3, [pc, #508]	; (800741c <HAL_RCC_OscConfig+0x294>)
 8007220:	689b      	ldr	r3, [r3, #8]
 8007222:	f013 0f0c 	tst.w	r3, #12
 8007226:	d03e      	beq.n	80072a6 <HAL_RCC_OscConfig+0x11e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007228:	4b7c      	ldr	r3, [pc, #496]	; (800741c <HAL_RCC_OscConfig+0x294>)
 800722a:	689b      	ldr	r3, [r3, #8]
 800722c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007230:	2b08      	cmp	r3, #8
 8007232:	d033      	beq.n	800729c <HAL_RCC_OscConfig+0x114>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007234:	68e3      	ldr	r3, [r4, #12]
 8007236:	2b00      	cmp	r3, #0
 8007238:	d068      	beq.n	800730c <HAL_RCC_OscConfig+0x184>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800723a:	4b79      	ldr	r3, [pc, #484]	; (8007420 <HAL_RCC_OscConfig+0x298>)
 800723c:	2201      	movs	r2, #1
 800723e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007240:	f7fe fa24 	bl	800568c <HAL_GetTick>
 8007244:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007246:	4e75      	ldr	r6, [pc, #468]	; (800741c <HAL_RCC_OscConfig+0x294>)
 8007248:	6833      	ldr	r3, [r6, #0]
 800724a:	f013 0f02 	tst.w	r3, #2
 800724e:	d154      	bne.n	80072fa <HAL_RCC_OscConfig+0x172>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007250:	f7fe fa1c 	bl	800568c <HAL_GetTick>
 8007254:	1b40      	subs	r0, r0, r5
 8007256:	2802      	cmp	r0, #2
 8007258:	d9f6      	bls.n	8007248 <HAL_RCC_OscConfig+0xc0>
          {
            return HAL_TIMEOUT;
 800725a:	2003      	movs	r0, #3
 800725c:	e17f      	b.n	800755e <HAL_RCC_OscConfig+0x3d6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800725e:	4a6f      	ldr	r2, [pc, #444]	; (800741c <HAL_RCC_OscConfig+0x294>)
 8007260:	6813      	ldr	r3, [r2, #0]
 8007262:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007266:	6013      	str	r3, [r2, #0]
 8007268:	e7b5      	b.n	80071d6 <HAL_RCC_OscConfig+0x4e>
 800726a:	4b6c      	ldr	r3, [pc, #432]	; (800741c <HAL_RCC_OscConfig+0x294>)
 800726c:	681a      	ldr	r2, [r3, #0]
 800726e:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8007272:	601a      	str	r2, [r3, #0]
 8007274:	681a      	ldr	r2, [r3, #0]
 8007276:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800727a:	601a      	str	r2, [r3, #0]
 800727c:	e7ab      	b.n	80071d6 <HAL_RCC_OscConfig+0x4e>
        tickstart = HAL_GetTick();
 800727e:	f7fe fa05 	bl	800568c <HAL_GetTick>
 8007282:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007284:	4e65      	ldr	r6, [pc, #404]	; (800741c <HAL_RCC_OscConfig+0x294>)
 8007286:	6833      	ldr	r3, [r6, #0]
 8007288:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800728c:	d0c3      	beq.n	8007216 <HAL_RCC_OscConfig+0x8e>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800728e:	f7fe f9fd 	bl	800568c <HAL_GetTick>
 8007292:	1b40      	subs	r0, r0, r5
 8007294:	2864      	cmp	r0, #100	; 0x64
 8007296:	d9f6      	bls.n	8007286 <HAL_RCC_OscConfig+0xfe>
            return HAL_TIMEOUT;
 8007298:	2003      	movs	r0, #3
 800729a:	e160      	b.n	800755e <HAL_RCC_OscConfig+0x3d6>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800729c:	4b5f      	ldr	r3, [pc, #380]	; (800741c <HAL_RCC_OscConfig+0x294>)
 800729e:	685b      	ldr	r3, [r3, #4]
 80072a0:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80072a4:	d1c6      	bne.n	8007234 <HAL_RCC_OscConfig+0xac>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80072a6:	4b5d      	ldr	r3, [pc, #372]	; (800741c <HAL_RCC_OscConfig+0x294>)
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	f013 0f02 	tst.w	r3, #2
 80072ae:	d003      	beq.n	80072b8 <HAL_RCC_OscConfig+0x130>
 80072b0:	68e3      	ldr	r3, [r4, #12]
 80072b2:	2b01      	cmp	r3, #1
 80072b4:	f040 8150 	bne.w	8007558 <HAL_RCC_OscConfig+0x3d0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80072b8:	4a58      	ldr	r2, [pc, #352]	; (800741c <HAL_RCC_OscConfig+0x294>)
 80072ba:	6813      	ldr	r3, [r2, #0]
 80072bc:	6921      	ldr	r1, [r4, #16]
 80072be:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80072c2:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80072c6:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80072c8:	6823      	ldr	r3, [r4, #0]
 80072ca:	f013 0f08 	tst.w	r3, #8
 80072ce:	d042      	beq.n	8007356 <HAL_RCC_OscConfig+0x1ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80072d0:	6963      	ldr	r3, [r4, #20]
 80072d2:	b36b      	cbz	r3, 8007330 <HAL_RCC_OscConfig+0x1a8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80072d4:	4b52      	ldr	r3, [pc, #328]	; (8007420 <HAL_RCC_OscConfig+0x298>)
 80072d6:	2201      	movs	r2, #1
 80072d8:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80072dc:	f7fe f9d6 	bl	800568c <HAL_GetTick>
 80072e0:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80072e2:	4e4e      	ldr	r6, [pc, #312]	; (800741c <HAL_RCC_OscConfig+0x294>)
 80072e4:	6f73      	ldr	r3, [r6, #116]	; 0x74
 80072e6:	f013 0f02 	tst.w	r3, #2
 80072ea:	d134      	bne.n	8007356 <HAL_RCC_OscConfig+0x1ce>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80072ec:	f7fe f9ce 	bl	800568c <HAL_GetTick>
 80072f0:	1b40      	subs	r0, r0, r5
 80072f2:	2802      	cmp	r0, #2
 80072f4:	d9f6      	bls.n	80072e4 <HAL_RCC_OscConfig+0x15c>
        {
          return HAL_TIMEOUT;
 80072f6:	2003      	movs	r0, #3
 80072f8:	e131      	b.n	800755e <HAL_RCC_OscConfig+0x3d6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80072fa:	4a48      	ldr	r2, [pc, #288]	; (800741c <HAL_RCC_OscConfig+0x294>)
 80072fc:	6813      	ldr	r3, [r2, #0]
 80072fe:	6921      	ldr	r1, [r4, #16]
 8007300:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8007304:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8007308:	6013      	str	r3, [r2, #0]
 800730a:	e7dd      	b.n	80072c8 <HAL_RCC_OscConfig+0x140>
        __HAL_RCC_HSI_DISABLE();
 800730c:	4b44      	ldr	r3, [pc, #272]	; (8007420 <HAL_RCC_OscConfig+0x298>)
 800730e:	2200      	movs	r2, #0
 8007310:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8007312:	f7fe f9bb 	bl	800568c <HAL_GetTick>
 8007316:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007318:	4e40      	ldr	r6, [pc, #256]	; (800741c <HAL_RCC_OscConfig+0x294>)
 800731a:	6833      	ldr	r3, [r6, #0]
 800731c:	f013 0f02 	tst.w	r3, #2
 8007320:	d0d2      	beq.n	80072c8 <HAL_RCC_OscConfig+0x140>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007322:	f7fe f9b3 	bl	800568c <HAL_GetTick>
 8007326:	1b40      	subs	r0, r0, r5
 8007328:	2802      	cmp	r0, #2
 800732a:	d9f6      	bls.n	800731a <HAL_RCC_OscConfig+0x192>
            return HAL_TIMEOUT;
 800732c:	2003      	movs	r0, #3
 800732e:	e116      	b.n	800755e <HAL_RCC_OscConfig+0x3d6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007330:	4b3b      	ldr	r3, [pc, #236]	; (8007420 <HAL_RCC_OscConfig+0x298>)
 8007332:	2200      	movs	r2, #0
 8007334:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007338:	f7fe f9a8 	bl	800568c <HAL_GetTick>
 800733c:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800733e:	4e37      	ldr	r6, [pc, #220]	; (800741c <HAL_RCC_OscConfig+0x294>)
 8007340:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8007342:	f013 0f02 	tst.w	r3, #2
 8007346:	d006      	beq.n	8007356 <HAL_RCC_OscConfig+0x1ce>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007348:	f7fe f9a0 	bl	800568c <HAL_GetTick>
 800734c:	1b40      	subs	r0, r0, r5
 800734e:	2802      	cmp	r0, #2
 8007350:	d9f6      	bls.n	8007340 <HAL_RCC_OscConfig+0x1b8>
        {
          return HAL_TIMEOUT;
 8007352:	2003      	movs	r0, #3
 8007354:	e103      	b.n	800755e <HAL_RCC_OscConfig+0x3d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007356:	6823      	ldr	r3, [r4, #0]
 8007358:	f013 0f04 	tst.w	r3, #4
 800735c:	d076      	beq.n	800744c <HAL_RCC_OscConfig+0x2c4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800735e:	4b2f      	ldr	r3, [pc, #188]	; (800741c <HAL_RCC_OscConfig+0x294>)
 8007360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007362:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8007366:	d133      	bne.n	80073d0 <HAL_RCC_OscConfig+0x248>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007368:	2300      	movs	r3, #0
 800736a:	9301      	str	r3, [sp, #4]
 800736c:	4b2b      	ldr	r3, [pc, #172]	; (800741c <HAL_RCC_OscConfig+0x294>)
 800736e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007370:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8007374:	641a      	str	r2, [r3, #64]	; 0x40
 8007376:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007378:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800737c:	9301      	str	r3, [sp, #4]
 800737e:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8007380:	2501      	movs	r5, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007382:	4b28      	ldr	r3, [pc, #160]	; (8007424 <HAL_RCC_OscConfig+0x29c>)
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	f413 7f80 	tst.w	r3, #256	; 0x100
 800738a:	d023      	beq.n	80073d4 <HAL_RCC_OscConfig+0x24c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800738c:	68a3      	ldr	r3, [r4, #8]
 800738e:	2b01      	cmp	r3, #1
 8007390:	d034      	beq.n	80073fc <HAL_RCC_OscConfig+0x274>
 8007392:	2b05      	cmp	r3, #5
 8007394:	d038      	beq.n	8007408 <HAL_RCC_OscConfig+0x280>
 8007396:	4b21      	ldr	r3, [pc, #132]	; (800741c <HAL_RCC_OscConfig+0x294>)
 8007398:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800739a:	f022 0201 	bic.w	r2, r2, #1
 800739e:	671a      	str	r2, [r3, #112]	; 0x70
 80073a0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80073a2:	f022 0204 	bic.w	r2, r2, #4
 80073a6:	671a      	str	r2, [r3, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80073a8:	68a3      	ldr	r3, [r4, #8]
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d03c      	beq.n	8007428 <HAL_RCC_OscConfig+0x2a0>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80073ae:	f7fe f96d 	bl	800568c <HAL_GetTick>
 80073b2:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80073b4:	4f19      	ldr	r7, [pc, #100]	; (800741c <HAL_RCC_OscConfig+0x294>)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80073b6:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80073ba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80073bc:	f013 0f02 	tst.w	r3, #2
 80073c0:	d143      	bne.n	800744a <HAL_RCC_OscConfig+0x2c2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80073c2:	f7fe f963 	bl	800568c <HAL_GetTick>
 80073c6:	1b80      	subs	r0, r0, r6
 80073c8:	4540      	cmp	r0, r8
 80073ca:	d9f6      	bls.n	80073ba <HAL_RCC_OscConfig+0x232>
        {
          return HAL_TIMEOUT;
 80073cc:	2003      	movs	r0, #3
 80073ce:	e0c6      	b.n	800755e <HAL_RCC_OscConfig+0x3d6>
    FlagStatus       pwrclkchanged = RESET;
 80073d0:	2500      	movs	r5, #0
 80073d2:	e7d6      	b.n	8007382 <HAL_RCC_OscConfig+0x1fa>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80073d4:	4a13      	ldr	r2, [pc, #76]	; (8007424 <HAL_RCC_OscConfig+0x29c>)
 80073d6:	6813      	ldr	r3, [r2, #0]
 80073d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80073dc:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80073de:	f7fe f955 	bl	800568c <HAL_GetTick>
 80073e2:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80073e4:	4f0f      	ldr	r7, [pc, #60]	; (8007424 <HAL_RCC_OscConfig+0x29c>)
 80073e6:	683b      	ldr	r3, [r7, #0]
 80073e8:	f413 7f80 	tst.w	r3, #256	; 0x100
 80073ec:	d1ce      	bne.n	800738c <HAL_RCC_OscConfig+0x204>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80073ee:	f7fe f94d 	bl	800568c <HAL_GetTick>
 80073f2:	1b80      	subs	r0, r0, r6
 80073f4:	2802      	cmp	r0, #2
 80073f6:	d9f6      	bls.n	80073e6 <HAL_RCC_OscConfig+0x25e>
          return HAL_TIMEOUT;
 80073f8:	2003      	movs	r0, #3
 80073fa:	e0b0      	b.n	800755e <HAL_RCC_OscConfig+0x3d6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80073fc:	4a07      	ldr	r2, [pc, #28]	; (800741c <HAL_RCC_OscConfig+0x294>)
 80073fe:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8007400:	f043 0301 	orr.w	r3, r3, #1
 8007404:	6713      	str	r3, [r2, #112]	; 0x70
 8007406:	e7cf      	b.n	80073a8 <HAL_RCC_OscConfig+0x220>
 8007408:	4b04      	ldr	r3, [pc, #16]	; (800741c <HAL_RCC_OscConfig+0x294>)
 800740a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800740c:	f042 0204 	orr.w	r2, r2, #4
 8007410:	671a      	str	r2, [r3, #112]	; 0x70
 8007412:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007414:	f042 0201 	orr.w	r2, r2, #1
 8007418:	671a      	str	r2, [r3, #112]	; 0x70
 800741a:	e7c5      	b.n	80073a8 <HAL_RCC_OscConfig+0x220>
 800741c:	40023800 	.word	0x40023800
 8007420:	42470000 	.word	0x42470000
 8007424:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007428:	f7fe f930 	bl	800568c <HAL_GetTick>
 800742c:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800742e:	4f52      	ldr	r7, [pc, #328]	; (8007578 <HAL_RCC_OscConfig+0x3f0>)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007430:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007434:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007436:	f013 0f02 	tst.w	r3, #2
 800743a:	d006      	beq.n	800744a <HAL_RCC_OscConfig+0x2c2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800743c:	f7fe f926 	bl	800568c <HAL_GetTick>
 8007440:	1b80      	subs	r0, r0, r6
 8007442:	4540      	cmp	r0, r8
 8007444:	d9f6      	bls.n	8007434 <HAL_RCC_OscConfig+0x2ac>
        {
          return HAL_TIMEOUT;
 8007446:	2003      	movs	r0, #3
 8007448:	e089      	b.n	800755e <HAL_RCC_OscConfig+0x3d6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800744a:	b9ed      	cbnz	r5, 8007488 <HAL_RCC_OscConfig+0x300>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800744c:	69a3      	ldr	r3, [r4, #24]
 800744e:	2b00      	cmp	r3, #0
 8007450:	f000 8084 	beq.w	800755c <HAL_RCC_OscConfig+0x3d4>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007454:	4a48      	ldr	r2, [pc, #288]	; (8007578 <HAL_RCC_OscConfig+0x3f0>)
 8007456:	6892      	ldr	r2, [r2, #8]
 8007458:	f002 020c 	and.w	r2, r2, #12
 800745c:	2a08      	cmp	r2, #8
 800745e:	d051      	beq.n	8007504 <HAL_RCC_OscConfig+0x37c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007460:	2b02      	cmp	r3, #2
 8007462:	d017      	beq.n	8007494 <HAL_RCC_OscConfig+0x30c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007464:	4b45      	ldr	r3, [pc, #276]	; (800757c <HAL_RCC_OscConfig+0x3f4>)
 8007466:	2200      	movs	r2, #0
 8007468:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800746a:	f7fe f90f 	bl	800568c <HAL_GetTick>
 800746e:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007470:	4d41      	ldr	r5, [pc, #260]	; (8007578 <HAL_RCC_OscConfig+0x3f0>)
 8007472:	682b      	ldr	r3, [r5, #0]
 8007474:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8007478:	d042      	beq.n	8007500 <HAL_RCC_OscConfig+0x378>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800747a:	f7fe f907 	bl	800568c <HAL_GetTick>
 800747e:	1b00      	subs	r0, r0, r4
 8007480:	2802      	cmp	r0, #2
 8007482:	d9f6      	bls.n	8007472 <HAL_RCC_OscConfig+0x2ea>
          {
            return HAL_TIMEOUT;
 8007484:	2003      	movs	r0, #3
 8007486:	e06a      	b.n	800755e <HAL_RCC_OscConfig+0x3d6>
      __HAL_RCC_PWR_CLK_DISABLE();
 8007488:	4a3b      	ldr	r2, [pc, #236]	; (8007578 <HAL_RCC_OscConfig+0x3f0>)
 800748a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800748c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007490:	6413      	str	r3, [r2, #64]	; 0x40
 8007492:	e7db      	b.n	800744c <HAL_RCC_OscConfig+0x2c4>
        __HAL_RCC_PLL_DISABLE();
 8007494:	4b39      	ldr	r3, [pc, #228]	; (800757c <HAL_RCC_OscConfig+0x3f4>)
 8007496:	2200      	movs	r2, #0
 8007498:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 800749a:	f7fe f8f7 	bl	800568c <HAL_GetTick>
 800749e:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80074a0:	4e35      	ldr	r6, [pc, #212]	; (8007578 <HAL_RCC_OscConfig+0x3f0>)
 80074a2:	6833      	ldr	r3, [r6, #0]
 80074a4:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80074a8:	d006      	beq.n	80074b8 <HAL_RCC_OscConfig+0x330>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80074aa:	f7fe f8ef 	bl	800568c <HAL_GetTick>
 80074ae:	1b40      	subs	r0, r0, r5
 80074b0:	2802      	cmp	r0, #2
 80074b2:	d9f6      	bls.n	80074a2 <HAL_RCC_OscConfig+0x31a>
            return HAL_TIMEOUT;
 80074b4:	2003      	movs	r0, #3
 80074b6:	e052      	b.n	800755e <HAL_RCC_OscConfig+0x3d6>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80074b8:	69e3      	ldr	r3, [r4, #28]
 80074ba:	6a22      	ldr	r2, [r4, #32]
 80074bc:	4313      	orrs	r3, r2
 80074be:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80074c0:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80074c4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80074c6:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80074ca:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80074cc:	0852      	lsrs	r2, r2, #1
 80074ce:	3a01      	subs	r2, #1
 80074d0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80074d4:	4a28      	ldr	r2, [pc, #160]	; (8007578 <HAL_RCC_OscConfig+0x3f0>)
 80074d6:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 80074d8:	4b28      	ldr	r3, [pc, #160]	; (800757c <HAL_RCC_OscConfig+0x3f4>)
 80074da:	2201      	movs	r2, #1
 80074dc:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 80074de:	f7fe f8d5 	bl	800568c <HAL_GetTick>
 80074e2:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80074e4:	4d24      	ldr	r5, [pc, #144]	; (8007578 <HAL_RCC_OscConfig+0x3f0>)
 80074e6:	682b      	ldr	r3, [r5, #0]
 80074e8:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80074ec:	d106      	bne.n	80074fc <HAL_RCC_OscConfig+0x374>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80074ee:	f7fe f8cd 	bl	800568c <HAL_GetTick>
 80074f2:	1b00      	subs	r0, r0, r4
 80074f4:	2802      	cmp	r0, #2
 80074f6:	d9f6      	bls.n	80074e6 <HAL_RCC_OscConfig+0x35e>
            return HAL_TIMEOUT;
 80074f8:	2003      	movs	r0, #3
 80074fa:	e030      	b.n	800755e <HAL_RCC_OscConfig+0x3d6>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 80074fc:	2000      	movs	r0, #0
 80074fe:	e02e      	b.n	800755e <HAL_RCC_OscConfig+0x3d6>
 8007500:	2000      	movs	r0, #0
 8007502:	e02c      	b.n	800755e <HAL_RCC_OscConfig+0x3d6>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007504:	2b01      	cmp	r3, #1
 8007506:	d02d      	beq.n	8007564 <HAL_RCC_OscConfig+0x3dc>
        pll_config = RCC->PLLCFGR;
 8007508:	4b1b      	ldr	r3, [pc, #108]	; (8007578 <HAL_RCC_OscConfig+0x3f0>)
 800750a:	685b      	ldr	r3, [r3, #4]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800750c:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007510:	69e2      	ldr	r2, [r4, #28]
 8007512:	4291      	cmp	r1, r2
 8007514:	d128      	bne.n	8007568 <HAL_RCC_OscConfig+0x3e0>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007516:	f003 023f 	and.w	r2, r3, #63	; 0x3f
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800751a:	6a21      	ldr	r1, [r4, #32]
 800751c:	428a      	cmp	r2, r1
 800751e:	d125      	bne.n	800756c <HAL_RCC_OscConfig+0x3e4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007520:	6a61      	ldr	r1, [r4, #36]	; 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007522:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 8007526:	401a      	ands	r2, r3
 8007528:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 800752c:	d120      	bne.n	8007570 <HAL_RCC_OscConfig+0x3e8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800752e:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 8007532:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8007534:	0852      	lsrs	r2, r2, #1
 8007536:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007538:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 800753c:	d11a      	bne.n	8007574 <HAL_RCC_OscConfig+0x3ec>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800753e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8007540:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007544:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
        return HAL_ERROR;
 8007548:	bf14      	ite	ne
 800754a:	2001      	movne	r0, #1
 800754c:	2000      	moveq	r0, #0
 800754e:	e006      	b.n	800755e <HAL_RCC_OscConfig+0x3d6>
    return HAL_ERROR;
 8007550:	2001      	movs	r0, #1
}
 8007552:	4770      	bx	lr
        return HAL_ERROR;
 8007554:	2001      	movs	r0, #1
 8007556:	e002      	b.n	800755e <HAL_RCC_OscConfig+0x3d6>
        return HAL_ERROR;
 8007558:	2001      	movs	r0, #1
 800755a:	e000      	b.n	800755e <HAL_RCC_OscConfig+0x3d6>
  return HAL_OK;
 800755c:	2000      	movs	r0, #0
}
 800755e:	b002      	add	sp, #8
 8007560:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return HAL_ERROR;
 8007564:	2001      	movs	r0, #1
 8007566:	e7fa      	b.n	800755e <HAL_RCC_OscConfig+0x3d6>
          return HAL_ERROR;
 8007568:	2001      	movs	r0, #1
 800756a:	e7f8      	b.n	800755e <HAL_RCC_OscConfig+0x3d6>
 800756c:	2001      	movs	r0, #1
 800756e:	e7f6      	b.n	800755e <HAL_RCC_OscConfig+0x3d6>
 8007570:	2001      	movs	r0, #1
 8007572:	e7f4      	b.n	800755e <HAL_RCC_OscConfig+0x3d6>
 8007574:	2001      	movs	r0, #1
 8007576:	e7f2      	b.n	800755e <HAL_RCC_OscConfig+0x3d6>
 8007578:	40023800 	.word	0x40023800
 800757c:	42470000 	.word	0x42470000

08007580 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007580:	b508      	push	{r3, lr}
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007582:	4b31      	ldr	r3, [pc, #196]	; (8007648 <HAL_RCC_GetSysClockFreq+0xc8>)
 8007584:	689b      	ldr	r3, [r3, #8]
 8007586:	f003 030c 	and.w	r3, r3, #12
 800758a:	2b04      	cmp	r3, #4
 800758c:	d057      	beq.n	800763e <HAL_RCC_GetSysClockFreq+0xbe>
 800758e:	2b08      	cmp	r3, #8
 8007590:	d157      	bne.n	8007642 <HAL_RCC_GetSysClockFreq+0xc2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007592:	4b2d      	ldr	r3, [pc, #180]	; (8007648 <HAL_RCC_GetSysClockFreq+0xc8>)
 8007594:	685a      	ldr	r2, [r3, #4]
 8007596:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800759a:	685b      	ldr	r3, [r3, #4]
 800759c:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80075a0:	d02a      	beq.n	80075f8 <HAL_RCC_GetSysClockFreq+0x78>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80075a2:	4b29      	ldr	r3, [pc, #164]	; (8007648 <HAL_RCC_GetSysClockFreq+0xc8>)
 80075a4:	6859      	ldr	r1, [r3, #4]
 80075a6:	f3c1 1c88 	ubfx	ip, r1, #6, #9
 80075aa:	ea4f 114c 	mov.w	r1, ip, lsl #5
 80075ae:	ebb1 000c 	subs.w	r0, r1, ip
 80075b2:	eb6e 0e0e 	sbc.w	lr, lr, lr
 80075b6:	ea4f 138e 	mov.w	r3, lr, lsl #6
 80075ba:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80075be:	0181      	lsls	r1, r0, #6
 80075c0:	1a09      	subs	r1, r1, r0
 80075c2:	eb63 030e 	sbc.w	r3, r3, lr
 80075c6:	00db      	lsls	r3, r3, #3
 80075c8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80075cc:	00c9      	lsls	r1, r1, #3
 80075ce:	eb11 0c0c 	adds.w	ip, r1, ip
 80075d2:	f143 0300 	adc.w	r3, r3, #0
 80075d6:	0259      	lsls	r1, r3, #9
 80075d8:	2300      	movs	r3, #0
 80075da:	ea4f 204c 	mov.w	r0, ip, lsl #9
 80075de:	ea41 51dc 	orr.w	r1, r1, ip, lsr #23
 80075e2:	f7f9 fad5 	bl	8000b90 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80075e6:	4b18      	ldr	r3, [pc, #96]	; (8007648 <HAL_RCC_GetSysClockFreq+0xc8>)
 80075e8:	685b      	ldr	r3, [r3, #4]
 80075ea:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80075ee:	3301      	adds	r3, #1
 80075f0:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 80075f2:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 80075f6:	e025      	b.n	8007644 <HAL_RCC_GetSysClockFreq+0xc4>
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80075f8:	4b13      	ldr	r3, [pc, #76]	; (8007648 <HAL_RCC_GetSysClockFreq+0xc8>)
 80075fa:	6859      	ldr	r1, [r3, #4]
 80075fc:	f3c1 1c88 	ubfx	ip, r1, #6, #9
 8007600:	ea4f 114c 	mov.w	r1, ip, lsl #5
 8007604:	ebb1 000c 	subs.w	r0, r1, ip
 8007608:	eb6e 0e0e 	sbc.w	lr, lr, lr
 800760c:	ea4f 138e 	mov.w	r3, lr, lsl #6
 8007610:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8007614:	0181      	lsls	r1, r0, #6
 8007616:	1a09      	subs	r1, r1, r0
 8007618:	eb63 030e 	sbc.w	r3, r3, lr
 800761c:	00db      	lsls	r3, r3, #3
 800761e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007622:	00c9      	lsls	r1, r1, #3
 8007624:	eb11 0c0c 	adds.w	ip, r1, ip
 8007628:	f143 0300 	adc.w	r3, r3, #0
 800762c:	0299      	lsls	r1, r3, #10
 800762e:	2300      	movs	r3, #0
 8007630:	ea4f 208c 	mov.w	r0, ip, lsl #10
 8007634:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 8007638:	f7f9 faaa 	bl	8000b90 <__aeabi_uldivmod>
 800763c:	e7d3      	b.n	80075e6 <HAL_RCC_GetSysClockFreq+0x66>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800763e:	4803      	ldr	r0, [pc, #12]	; (800764c <HAL_RCC_GetSysClockFreq+0xcc>)
 8007640:	e000      	b.n	8007644 <HAL_RCC_GetSysClockFreq+0xc4>
      sysclockfreq = HSI_VALUE;
 8007642:	4803      	ldr	r0, [pc, #12]	; (8007650 <HAL_RCC_GetSysClockFreq+0xd0>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8007644:	bd08      	pop	{r3, pc}
 8007646:	bf00      	nop
 8007648:	40023800 	.word	0x40023800
 800764c:	007a1200 	.word	0x007a1200
 8007650:	00f42400 	.word	0x00f42400

08007654 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8007654:	2800      	cmp	r0, #0
 8007656:	f000 809d 	beq.w	8007794 <HAL_RCC_ClockConfig+0x140>
{
 800765a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800765e:	460d      	mov	r5, r1
 8007660:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007662:	4b50      	ldr	r3, [pc, #320]	; (80077a4 <HAL_RCC_ClockConfig+0x150>)
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	f003 0307 	and.w	r3, r3, #7
 800766a:	428b      	cmp	r3, r1
 800766c:	d208      	bcs.n	8007680 <HAL_RCC_ClockConfig+0x2c>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800766e:	b2cb      	uxtb	r3, r1
 8007670:	4a4c      	ldr	r2, [pc, #304]	; (80077a4 <HAL_RCC_ClockConfig+0x150>)
 8007672:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007674:	6813      	ldr	r3, [r2, #0]
 8007676:	f003 0307 	and.w	r3, r3, #7
 800767a:	428b      	cmp	r3, r1
 800767c:	f040 808c 	bne.w	8007798 <HAL_RCC_ClockConfig+0x144>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007680:	6823      	ldr	r3, [r4, #0]
 8007682:	f013 0f02 	tst.w	r3, #2
 8007686:	d017      	beq.n	80076b8 <HAL_RCC_ClockConfig+0x64>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007688:	f013 0f04 	tst.w	r3, #4
 800768c:	d004      	beq.n	8007698 <HAL_RCC_ClockConfig+0x44>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800768e:	4a46      	ldr	r2, [pc, #280]	; (80077a8 <HAL_RCC_ClockConfig+0x154>)
 8007690:	6893      	ldr	r3, [r2, #8]
 8007692:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007696:	6093      	str	r3, [r2, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007698:	6823      	ldr	r3, [r4, #0]
 800769a:	f013 0f08 	tst.w	r3, #8
 800769e:	d004      	beq.n	80076aa <HAL_RCC_ClockConfig+0x56>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80076a0:	4a41      	ldr	r2, [pc, #260]	; (80077a8 <HAL_RCC_ClockConfig+0x154>)
 80076a2:	6893      	ldr	r3, [r2, #8]
 80076a4:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80076a8:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80076aa:	4a3f      	ldr	r2, [pc, #252]	; (80077a8 <HAL_RCC_ClockConfig+0x154>)
 80076ac:	6893      	ldr	r3, [r2, #8]
 80076ae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80076b2:	68a1      	ldr	r1, [r4, #8]
 80076b4:	430b      	orrs	r3, r1
 80076b6:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80076b8:	6823      	ldr	r3, [r4, #0]
 80076ba:	f013 0f01 	tst.w	r3, #1
 80076be:	d032      	beq.n	8007726 <HAL_RCC_ClockConfig+0xd2>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80076c0:	6862      	ldr	r2, [r4, #4]
 80076c2:	2a01      	cmp	r2, #1
 80076c4:	d021      	beq.n	800770a <HAL_RCC_ClockConfig+0xb6>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80076c6:	1e93      	subs	r3, r2, #2
 80076c8:	2b01      	cmp	r3, #1
 80076ca:	d925      	bls.n	8007718 <HAL_RCC_ClockConfig+0xc4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80076cc:	4b36      	ldr	r3, [pc, #216]	; (80077a8 <HAL_RCC_ClockConfig+0x154>)
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	f013 0f02 	tst.w	r3, #2
 80076d4:	d062      	beq.n	800779c <HAL_RCC_ClockConfig+0x148>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80076d6:	4934      	ldr	r1, [pc, #208]	; (80077a8 <HAL_RCC_ClockConfig+0x154>)
 80076d8:	688b      	ldr	r3, [r1, #8]
 80076da:	f023 0303 	bic.w	r3, r3, #3
 80076de:	4313      	orrs	r3, r2
 80076e0:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 80076e2:	f7fd ffd3 	bl	800568c <HAL_GetTick>
 80076e6:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80076e8:	4f2f      	ldr	r7, [pc, #188]	; (80077a8 <HAL_RCC_ClockConfig+0x154>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80076ea:	f241 3888 	movw	r8, #5000	; 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80076ee:	68bb      	ldr	r3, [r7, #8]
 80076f0:	f003 030c 	and.w	r3, r3, #12
 80076f4:	6862      	ldr	r2, [r4, #4]
 80076f6:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80076fa:	d014      	beq.n	8007726 <HAL_RCC_ClockConfig+0xd2>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80076fc:	f7fd ffc6 	bl	800568c <HAL_GetTick>
 8007700:	1b80      	subs	r0, r0, r6
 8007702:	4540      	cmp	r0, r8
 8007704:	d9f3      	bls.n	80076ee <HAL_RCC_ClockConfig+0x9a>
        return HAL_TIMEOUT;
 8007706:	2003      	movs	r0, #3
 8007708:	e042      	b.n	8007790 <HAL_RCC_ClockConfig+0x13c>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800770a:	4b27      	ldr	r3, [pc, #156]	; (80077a8 <HAL_RCC_ClockConfig+0x154>)
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8007712:	d1e0      	bne.n	80076d6 <HAL_RCC_ClockConfig+0x82>
        return HAL_ERROR;
 8007714:	2001      	movs	r0, #1
 8007716:	e03b      	b.n	8007790 <HAL_RCC_ClockConfig+0x13c>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007718:	4b23      	ldr	r3, [pc, #140]	; (80077a8 <HAL_RCC_ClockConfig+0x154>)
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8007720:	d1d9      	bne.n	80076d6 <HAL_RCC_ClockConfig+0x82>
        return HAL_ERROR;
 8007722:	2001      	movs	r0, #1
 8007724:	e034      	b.n	8007790 <HAL_RCC_ClockConfig+0x13c>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007726:	4b1f      	ldr	r3, [pc, #124]	; (80077a4 <HAL_RCC_ClockConfig+0x150>)
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	f003 0307 	and.w	r3, r3, #7
 800772e:	42ab      	cmp	r3, r5
 8007730:	d907      	bls.n	8007742 <HAL_RCC_ClockConfig+0xee>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007732:	b2ea      	uxtb	r2, r5
 8007734:	4b1b      	ldr	r3, [pc, #108]	; (80077a4 <HAL_RCC_ClockConfig+0x150>)
 8007736:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	f003 0307 	and.w	r3, r3, #7
 800773e:	42ab      	cmp	r3, r5
 8007740:	d12e      	bne.n	80077a0 <HAL_RCC_ClockConfig+0x14c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007742:	6823      	ldr	r3, [r4, #0]
 8007744:	f013 0f04 	tst.w	r3, #4
 8007748:	d006      	beq.n	8007758 <HAL_RCC_ClockConfig+0x104>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800774a:	4a17      	ldr	r2, [pc, #92]	; (80077a8 <HAL_RCC_ClockConfig+0x154>)
 800774c:	6893      	ldr	r3, [r2, #8]
 800774e:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8007752:	68e1      	ldr	r1, [r4, #12]
 8007754:	430b      	orrs	r3, r1
 8007756:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007758:	6823      	ldr	r3, [r4, #0]
 800775a:	f013 0f08 	tst.w	r3, #8
 800775e:	d007      	beq.n	8007770 <HAL_RCC_ClockConfig+0x11c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007760:	4a11      	ldr	r2, [pc, #68]	; (80077a8 <HAL_RCC_ClockConfig+0x154>)
 8007762:	6893      	ldr	r3, [r2, #8]
 8007764:	6921      	ldr	r1, [r4, #16]
 8007766:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800776a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800776e:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007770:	f7ff ff06 	bl	8007580 <HAL_RCC_GetSysClockFreq>
 8007774:	4b0c      	ldr	r3, [pc, #48]	; (80077a8 <HAL_RCC_ClockConfig+0x154>)
 8007776:	689b      	ldr	r3, [r3, #8]
 8007778:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800777c:	4a0b      	ldr	r2, [pc, #44]	; (80077ac <HAL_RCC_ClockConfig+0x158>)
 800777e:	5cd3      	ldrb	r3, [r2, r3]
 8007780:	40d8      	lsrs	r0, r3
 8007782:	4b0b      	ldr	r3, [pc, #44]	; (80077b0 <HAL_RCC_ClockConfig+0x15c>)
 8007784:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 8007786:	4b0b      	ldr	r3, [pc, #44]	; (80077b4 <HAL_RCC_ClockConfig+0x160>)
 8007788:	6818      	ldr	r0, [r3, #0]
 800778a:	f7fd ff33 	bl	80055f4 <HAL_InitTick>
  return HAL_OK;
 800778e:	2000      	movs	r0, #0
}
 8007790:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_ERROR;
 8007794:	2001      	movs	r0, #1
}
 8007796:	4770      	bx	lr
      return HAL_ERROR;
 8007798:	2001      	movs	r0, #1
 800779a:	e7f9      	b.n	8007790 <HAL_RCC_ClockConfig+0x13c>
        return HAL_ERROR;
 800779c:	2001      	movs	r0, #1
 800779e:	e7f7      	b.n	8007790 <HAL_RCC_ClockConfig+0x13c>
      return HAL_ERROR;
 80077a0:	2001      	movs	r0, #1
 80077a2:	e7f5      	b.n	8007790 <HAL_RCC_ClockConfig+0x13c>
 80077a4:	40023c00 	.word	0x40023c00
 80077a8:	40023800 	.word	0x40023800
 80077ac:	0800ba00 	.word	0x0800ba00
 80077b0:	20000018 	.word	0x20000018
 80077b4:	20000020 	.word	0x20000020

080077b8 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80077b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80077ba:	b083      	sub	sp, #12
 80077bc:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80077be:	6803      	ldr	r3, [r0, #0]
 80077c0:	f013 0f05 	tst.w	r3, #5
 80077c4:	d106      	bne.n	80077d4 <HAL_RCCEx_PeriphCLKConfig+0x1c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80077c6:	6823      	ldr	r3, [r4, #0]
 80077c8:	f013 0f02 	tst.w	r3, #2
 80077cc:	d12e      	bne.n	800782c <HAL_RCCEx_PeriphCLKConfig+0x74>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80077ce:	2000      	movs	r0, #0
}
 80077d0:	b003      	add	sp, #12
 80077d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_PLLI2S_DISABLE();
 80077d4:	4b4a      	ldr	r3, [pc, #296]	; (8007900 <HAL_RCCEx_PeriphCLKConfig+0x148>)
 80077d6:	2200      	movs	r2, #0
 80077d8:	669a      	str	r2, [r3, #104]	; 0x68
    tickstart = HAL_GetTick();
 80077da:	f7fd ff57 	bl	800568c <HAL_GetTick>
 80077de:	4605      	mov	r5, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80077e0:	4e48      	ldr	r6, [pc, #288]	; (8007904 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80077e2:	6833      	ldr	r3, [r6, #0]
 80077e4:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 80077e8:	d006      	beq.n	80077f8 <HAL_RCCEx_PeriphCLKConfig+0x40>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80077ea:	f7fd ff4f 	bl	800568c <HAL_GetTick>
 80077ee:	1b43      	subs	r3, r0, r5
 80077f0:	2b02      	cmp	r3, #2
 80077f2:	d9f6      	bls.n	80077e2 <HAL_RCCEx_PeriphCLKConfig+0x2a>
        return HAL_TIMEOUT;
 80077f4:	2003      	movs	r0, #3
 80077f6:	e7eb      	b.n	80077d0 <HAL_RCCEx_PeriphCLKConfig+0x18>
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80077f8:	6862      	ldr	r2, [r4, #4]
 80077fa:	68a3      	ldr	r3, [r4, #8]
 80077fc:	071b      	lsls	r3, r3, #28
 80077fe:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8007802:	4a40      	ldr	r2, [pc, #256]	; (8007904 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8007804:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 8007808:	4b3d      	ldr	r3, [pc, #244]	; (8007900 <HAL_RCCEx_PeriphCLKConfig+0x148>)
 800780a:	2201      	movs	r2, #1
 800780c:	669a      	str	r2, [r3, #104]	; 0x68
    tickstart = HAL_GetTick();
 800780e:	f7fd ff3d 	bl	800568c <HAL_GetTick>
 8007812:	4605      	mov	r5, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007814:	4e3b      	ldr	r6, [pc, #236]	; (8007904 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8007816:	6833      	ldr	r3, [r6, #0]
 8007818:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 800781c:	d1d3      	bne.n	80077c6 <HAL_RCCEx_PeriphCLKConfig+0xe>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800781e:	f7fd ff35 	bl	800568c <HAL_GetTick>
 8007822:	1b43      	subs	r3, r0, r5
 8007824:	2b02      	cmp	r3, #2
 8007826:	d9f6      	bls.n	8007816 <HAL_RCCEx_PeriphCLKConfig+0x5e>
        return HAL_TIMEOUT;
 8007828:	2003      	movs	r0, #3
 800782a:	e7d1      	b.n	80077d0 <HAL_RCCEx_PeriphCLKConfig+0x18>
    __HAL_RCC_PWR_CLK_ENABLE();
 800782c:	2300      	movs	r3, #0
 800782e:	9301      	str	r3, [sp, #4]
 8007830:	4b34      	ldr	r3, [pc, #208]	; (8007904 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8007832:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007834:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8007838:	641a      	str	r2, [r3, #64]	; 0x40
 800783a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800783c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007840:	9301      	str	r3, [sp, #4]
 8007842:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 8007844:	4a30      	ldr	r2, [pc, #192]	; (8007908 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8007846:	6813      	ldr	r3, [r2, #0]
 8007848:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800784c:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 800784e:	f7fd ff1d 	bl	800568c <HAL_GetTick>
 8007852:	4605      	mov	r5, r0
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007854:	4e2c      	ldr	r6, [pc, #176]	; (8007908 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8007856:	6833      	ldr	r3, [r6, #0]
 8007858:	f413 7f80 	tst.w	r3, #256	; 0x100
 800785c:	d106      	bne.n	800786c <HAL_RCCEx_PeriphCLKConfig+0xb4>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800785e:	f7fd ff15 	bl	800568c <HAL_GetTick>
 8007862:	1b43      	subs	r3, r0, r5
 8007864:	2b02      	cmp	r3, #2
 8007866:	d9f6      	bls.n	8007856 <HAL_RCCEx_PeriphCLKConfig+0x9e>
        return HAL_TIMEOUT;
 8007868:	2003      	movs	r0, #3
 800786a:	e7b1      	b.n	80077d0 <HAL_RCCEx_PeriphCLKConfig+0x18>
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800786c:	4b25      	ldr	r3, [pc, #148]	; (8007904 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800786e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007870:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8007874:	d014      	beq.n	80078a0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8007876:	68e2      	ldr	r2, [r4, #12]
 8007878:	f402 7240 	and.w	r2, r2, #768	; 0x300
 800787c:	429a      	cmp	r2, r3
 800787e:	d00f      	beq.n	80078a0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007880:	4b20      	ldr	r3, [pc, #128]	; (8007904 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8007882:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007884:	f422 7240 	bic.w	r2, r2, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 8007888:	491d      	ldr	r1, [pc, #116]	; (8007900 <HAL_RCCEx_PeriphCLKConfig+0x148>)
 800788a:	2001      	movs	r0, #1
 800788c:	f8c1 0e40 	str.w	r0, [r1, #3648]	; 0xe40
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007890:	2000      	movs	r0, #0
 8007892:	f8c1 0e40 	str.w	r0, [r1, #3648]	; 0xe40
      RCC->BDCR = tmpreg1;
 8007896:	671a      	str	r2, [r3, #112]	; 0x70
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007898:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800789a:	f013 0f01 	tst.w	r3, #1
 800789e:	d113      	bne.n	80078c8 <HAL_RCCEx_PeriphCLKConfig+0x110>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80078a0:	68e3      	ldr	r3, [r4, #12]
 80078a2:	f403 7240 	and.w	r2, r3, #768	; 0x300
 80078a6:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 80078aa:	d01e      	beq.n	80078ea <HAL_RCCEx_PeriphCLKConfig+0x132>
 80078ac:	4a15      	ldr	r2, [pc, #84]	; (8007904 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80078ae:	6893      	ldr	r3, [r2, #8]
 80078b0:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80078b4:	6093      	str	r3, [r2, #8]
 80078b6:	4a13      	ldr	r2, [pc, #76]	; (8007904 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80078b8:	6f11      	ldr	r1, [r2, #112]	; 0x70
 80078ba:	68e3      	ldr	r3, [r4, #12]
 80078bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80078c0:	430b      	orrs	r3, r1
 80078c2:	6713      	str	r3, [r2, #112]	; 0x70
  return HAL_OK;
 80078c4:	2000      	movs	r0, #0
 80078c6:	e783      	b.n	80077d0 <HAL_RCCEx_PeriphCLKConfig+0x18>
        tickstart = HAL_GetTick();
 80078c8:	f7fd fee0 	bl	800568c <HAL_GetTick>
 80078cc:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80078ce:	4e0d      	ldr	r6, [pc, #52]	; (8007904 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80078d0:	f241 3788 	movw	r7, #5000	; 0x1388
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80078d4:	6f33      	ldr	r3, [r6, #112]	; 0x70
 80078d6:	f013 0f02 	tst.w	r3, #2
 80078da:	d1e1      	bne.n	80078a0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80078dc:	f7fd fed6 	bl	800568c <HAL_GetTick>
 80078e0:	1b40      	subs	r0, r0, r5
 80078e2:	42b8      	cmp	r0, r7
 80078e4:	d9f6      	bls.n	80078d4 <HAL_RCCEx_PeriphCLKConfig+0x11c>
            return HAL_TIMEOUT;
 80078e6:	2003      	movs	r0, #3
 80078e8:	e772      	b.n	80077d0 <HAL_RCCEx_PeriphCLKConfig+0x18>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80078ea:	4906      	ldr	r1, [pc, #24]	; (8007904 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80078ec:	688a      	ldr	r2, [r1, #8]
 80078ee:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 80078f2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80078f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80078fa:	4313      	orrs	r3, r2
 80078fc:	608b      	str	r3, [r1, #8]
 80078fe:	e7da      	b.n	80078b6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8007900:	42470000 	.word	0x42470000
 8007904:	40023800 	.word	0x40023800
 8007908:	40007000 	.word	0x40007000

0800790c <HAL_RCCEx_GetPeriphCLKFreq>:
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
  uint32_t srcclk = 0U;
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
  switch (PeriphClk)
 800790c:	2801      	cmp	r0, #1
 800790e:	d001      	beq.n	8007914 <HAL_RCCEx_GetPeriphCLKFreq+0x8>
  uint32_t frequency = 0U;
 8007910:	2000      	movs	r0, #0
 8007912:	4770      	bx	lr
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8007914:	4b10      	ldr	r3, [pc, #64]	; (8007958 <HAL_RCCEx_GetPeriphCLKFreq+0x4c>)
 8007916:	689b      	ldr	r3, [r3, #8]
      switch (srcclk)
 8007918:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 800791c:	d001      	beq.n	8007922 <HAL_RCCEx_GetPeriphCLKFreq+0x16>
 800791e:	2000      	movs	r0, #0
      }
      break;
    }
  }
  return frequency;
}
 8007920:	4770      	bx	lr
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8007922:	4b0d      	ldr	r3, [pc, #52]	; (8007958 <HAL_RCCEx_GetPeriphCLKFreq+0x4c>)
 8007924:	685b      	ldr	r3, [r3, #4]
 8007926:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800792a:	4b0b      	ldr	r3, [pc, #44]	; (8007958 <HAL_RCCEx_GetPeriphCLKFreq+0x4c>)
 800792c:	685a      	ldr	r2, [r3, #4]
 800792e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8007932:	bf14      	ite	ne
 8007934:	4809      	ldrne	r0, [pc, #36]	; (800795c <HAL_RCCEx_GetPeriphCLKFreq+0x50>)
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007936:	480a      	ldreq	r0, [pc, #40]	; (8007960 <HAL_RCCEx_GetPeriphCLKFreq+0x54>)
 8007938:	fbb0 f2f2 	udiv	r2, r0, r2
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800793c:	4b06      	ldr	r3, [pc, #24]	; (8007958 <HAL_RCCEx_GetPeriphCLKFreq+0x4c>)
 800793e:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8007942:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8007946:	f3c0 1088 	ubfx	r0, r0, #6, #9
 800794a:	fb02 f000 	mul.w	r0, r2, r0
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800794e:	f3c3 7302 	ubfx	r3, r3, #28, #3
 8007952:	fbb0 f0f3 	udiv	r0, r0, r3
          break;
 8007956:	4770      	bx	lr
 8007958:	40023800 	.word	0x40023800
 800795c:	007a1200 	.word	0x007a1200
 8007960:	00f42400 	.word	0x00f42400

08007964 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007964:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007966:	6a03      	ldr	r3, [r0, #32]
 8007968:	f023 0301 	bic.w	r3, r3, #1
 800796c:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800796e:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007970:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007972:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007974:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007978:	680d      	ldr	r5, [r1, #0]
 800797a:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800797c:	f023 0302 	bic.w	r3, r3, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007980:	688d      	ldr	r5, [r1, #8]
 8007982:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007984:	4d11      	ldr	r5, [pc, #68]	; (80079cc <TIM_OC1_SetConfig+0x68>)
 8007986:	42a8      	cmp	r0, r5
 8007988:	d00a      	beq.n	80079a0 <TIM_OC1_SetConfig+0x3c>
 800798a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800798e:	42a8      	cmp	r0, r5
 8007990:	d114      	bne.n	80079bc <TIM_OC1_SetConfig+0x58>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007992:	f023 0308 	bic.w	r3, r3, #8
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007996:	68cd      	ldr	r5, [r1, #12]
 8007998:	432b      	orrs	r3, r5
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800799a:	f023 0304 	bic.w	r3, r3, #4
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800799e:	e005      	b.n	80079ac <TIM_OC1_SetConfig+0x48>
    tmpccer &= ~TIM_CCER_CC1NP;
 80079a0:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 80079a4:	68cd      	ldr	r5, [r1, #12]
 80079a6:	432b      	orrs	r3, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 80079a8:	f023 0304 	bic.w	r3, r3, #4
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80079ac:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80079b0:	698d      	ldr	r5, [r1, #24]
 80079b2:	694e      	ldr	r6, [r1, #20]
 80079b4:	ea46 0c05 	orr.w	ip, r6, r5
 80079b8:	ea4c 0404 	orr.w	r4, ip, r4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80079bc:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80079be:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80079c0:	684a      	ldr	r2, [r1, #4]
 80079c2:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80079c4:	6203      	str	r3, [r0, #32]
}
 80079c6:	bc70      	pop	{r4, r5, r6}
 80079c8:	4770      	bx	lr
 80079ca:	bf00      	nop
 80079cc:	40010000 	.word	0x40010000

080079d0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80079d0:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80079d2:	6a03      	ldr	r3, [r0, #32]
 80079d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80079d8:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80079da:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80079dc:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80079de:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80079e0:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80079e4:	680d      	ldr	r5, [r1, #0]
 80079e6:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80079e8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80079ec:	688d      	ldr	r5, [r1, #8]
 80079ee:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80079f2:	4d12      	ldr	r5, [pc, #72]	; (8007a3c <TIM_OC3_SetConfig+0x6c>)
 80079f4:	42a8      	cmp	r0, r5
 80079f6:	d00b      	beq.n	8007a10 <TIM_OC3_SetConfig+0x40>
 80079f8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80079fc:	42a8      	cmp	r0, r5
 80079fe:	d116      	bne.n	8007a2e <TIM_OC3_SetConfig+0x5e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007a00:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007a04:	68cd      	ldr	r5, [r1, #12]
 8007a06:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007a0a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a0e:	e006      	b.n	8007a1e <TIM_OC3_SetConfig+0x4e>
    tmpccer &= ~TIM_CCER_CC3NP;
 8007a10:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007a14:	68cd      	ldr	r5, [r1, #12]
 8007a16:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 8007a1a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007a1e:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007a22:	698d      	ldr	r5, [r1, #24]
 8007a24:	694e      	ldr	r6, [r1, #20]
 8007a26:	ea46 0c05 	orr.w	ip, r6, r5
 8007a2a:	ea44 140c 	orr.w	r4, r4, ip, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007a2e:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007a30:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007a32:	684a      	ldr	r2, [r1, #4]
 8007a34:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007a36:	6203      	str	r3, [r0, #32]
}
 8007a38:	bc70      	pop	{r4, r5, r6}
 8007a3a:	4770      	bx	lr
 8007a3c:	40010000 	.word	0x40010000

08007a40 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007a40:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007a42:	6a03      	ldr	r3, [r0, #32]
 8007a44:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007a48:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a4a:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007a4c:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007a4e:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007a50:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007a54:	680d      	ldr	r5, [r1, #0]
 8007a56:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007a5a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007a5e:	688d      	ldr	r5, [r1, #8]
 8007a60:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a64:	4d09      	ldr	r5, [pc, #36]	; (8007a8c <TIM_OC4_SetConfig+0x4c>)
 8007a66:	42a8      	cmp	r0, r5
 8007a68:	d003      	beq.n	8007a72 <TIM_OC4_SetConfig+0x32>
 8007a6a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8007a6e:	42a8      	cmp	r0, r5
 8007a70:	d104      	bne.n	8007a7c <TIM_OC4_SetConfig+0x3c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007a72:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007a76:	694d      	ldr	r5, [r1, #20]
 8007a78:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007a7c:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007a7e:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007a80:	684a      	ldr	r2, [r1, #4]
 8007a82:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007a84:	6203      	str	r3, [r0, #32]
}
 8007a86:	bc30      	pop	{r4, r5}
 8007a88:	4770      	bx	lr
 8007a8a:	bf00      	nop
 8007a8c:	40010000 	.word	0x40010000

08007a90 <HAL_TIM_OC_MspInit>:
}
 8007a90:	4770      	bx	lr

08007a92 <HAL_TIM_PWM_MspInit>:
}
 8007a92:	4770      	bx	lr

08007a94 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 8007a94:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007a96:	4a40      	ldr	r2, [pc, #256]	; (8007b98 <TIM_Base_SetConfig+0x104>)
 8007a98:	4290      	cmp	r0, r2
 8007a9a:	d05d      	beq.n	8007b58 <TIM_Base_SetConfig+0xc4>
 8007a9c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8007aa0:	d031      	beq.n	8007b06 <TIM_Base_SetConfig+0x72>
 8007aa2:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8007aa6:	4290      	cmp	r0, r2
 8007aa8:	d051      	beq.n	8007b4e <TIM_Base_SetConfig+0xba>
 8007aaa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007aae:	4290      	cmp	r0, r2
 8007ab0:	d06d      	beq.n	8007b8e <TIM_Base_SetConfig+0xfa>
 8007ab2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007ab6:	4290      	cmp	r0, r2
 8007ab8:	d064      	beq.n	8007b84 <TIM_Base_SetConfig+0xf0>
 8007aba:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8007abe:	4290      	cmp	r0, r2
 8007ac0:	d033      	beq.n	8007b2a <TIM_Base_SetConfig+0x96>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007ac2:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8007ac6:	4290      	cmp	r0, r2
 8007ac8:	d021      	beq.n	8007b0e <TIM_Base_SetConfig+0x7a>
 8007aca:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007ace:	4290      	cmp	r0, r2
 8007ad0:	d01d      	beq.n	8007b0e <TIM_Base_SetConfig+0x7a>
 8007ad2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007ad6:	4290      	cmp	r0, r2
 8007ad8:	d019      	beq.n	8007b0e <TIM_Base_SetConfig+0x7a>
 8007ada:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8007ade:	4290      	cmp	r0, r2
 8007ae0:	d015      	beq.n	8007b0e <TIM_Base_SetConfig+0x7a>
 8007ae2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007ae6:	4290      	cmp	r0, r2
 8007ae8:	d011      	beq.n	8007b0e <TIM_Base_SetConfig+0x7a>
 8007aea:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007aee:	4290      	cmp	r0, r2
 8007af0:	d00d      	beq.n	8007b0e <TIM_Base_SetConfig+0x7a>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007af2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007af6:	694a      	ldr	r2, [r1, #20]
 8007af8:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8007afa:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007afc:	688b      	ldr	r3, [r1, #8]
 8007afe:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8007b00:	680b      	ldr	r3, [r1, #0]
 8007b02:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007b04:	e03b      	b.n	8007b7e <TIM_Base_SetConfig+0xea>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007b06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8007b0a:	684a      	ldr	r2, [r1, #4]
 8007b0c:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 8007b0e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007b12:	68ca      	ldr	r2, [r1, #12]
 8007b14:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007b16:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007b1a:	694a      	ldr	r2, [r1, #20]
 8007b1c:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8007b1e:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007b20:	688b      	ldr	r3, [r1, #8]
 8007b22:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8007b24:	680b      	ldr	r3, [r1, #0]
 8007b26:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007b28:	e029      	b.n	8007b7e <TIM_Base_SetConfig+0xea>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007b2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8007b2e:	684a      	ldr	r2, [r1, #4]
 8007b30:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 8007b32:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007b36:	68ca      	ldr	r2, [r1, #12]
 8007b38:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007b3a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007b3e:	694a      	ldr	r2, [r1, #20]
 8007b40:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8007b42:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007b44:	688b      	ldr	r3, [r1, #8]
 8007b46:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8007b48:	680b      	ldr	r3, [r1, #0]
 8007b4a:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007b4c:	e015      	b.n	8007b7a <TIM_Base_SetConfig+0xe6>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007b4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8007b52:	684a      	ldr	r2, [r1, #4]
 8007b54:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007b56:	e7da      	b.n	8007b0e <TIM_Base_SetConfig+0x7a>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007b58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8007b5c:	684a      	ldr	r2, [r1, #4]
 8007b5e:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 8007b60:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007b64:	68ca      	ldr	r2, [r1, #12]
 8007b66:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007b68:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007b6c:	694a      	ldr	r2, [r1, #20]
 8007b6e:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8007b70:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007b72:	688b      	ldr	r3, [r1, #8]
 8007b74:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8007b76:	680b      	ldr	r3, [r1, #0]
 8007b78:	6283      	str	r3, [r0, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8007b7a:	690b      	ldr	r3, [r1, #16]
 8007b7c:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8007b7e:	2301      	movs	r3, #1
 8007b80:	6143      	str	r3, [r0, #20]
}
 8007b82:	4770      	bx	lr
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007b84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8007b88:	684a      	ldr	r2, [r1, #4]
 8007b8a:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007b8c:	e7bf      	b.n	8007b0e <TIM_Base_SetConfig+0x7a>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007b8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8007b92:	684a      	ldr	r2, [r1, #4]
 8007b94:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007b96:	e7ba      	b.n	8007b0e <TIM_Base_SetConfig+0x7a>
 8007b98:	40010000 	.word	0x40010000

08007b9c <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8007b9c:	b340      	cbz	r0, 8007bf0 <HAL_TIM_Base_Init+0x54>
{
 8007b9e:	b510      	push	{r4, lr}
 8007ba0:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8007ba2:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8007ba6:	b1f3      	cbz	r3, 8007be6 <HAL_TIM_Base_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 8007ba8:	2302      	movs	r3, #2
 8007baa:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007bae:	4621      	mov	r1, r4
 8007bb0:	f851 0b04 	ldr.w	r0, [r1], #4
 8007bb4:	f7ff ff6e 	bl	8007a94 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007bb8:	2301      	movs	r3, #1
 8007bba:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007bbe:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8007bc2:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8007bc6:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8007bca:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007bce:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007bd2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007bd6:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8007bda:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8007bde:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8007be2:	2000      	movs	r0, #0
}
 8007be4:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8007be6:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8007bea:	f7fc fb45 	bl	8004278 <HAL_TIM_Base_MspInit>
 8007bee:	e7db      	b.n	8007ba8 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8007bf0:	2001      	movs	r0, #1
}
 8007bf2:	4770      	bx	lr

08007bf4 <HAL_TIM_OC_Init>:
  if (htim == NULL)
 8007bf4:	b340      	cbz	r0, 8007c48 <HAL_TIM_OC_Init+0x54>
{
 8007bf6:	b510      	push	{r4, lr}
 8007bf8:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8007bfa:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8007bfe:	b1f3      	cbz	r3, 8007c3e <HAL_TIM_OC_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 8007c00:	2302      	movs	r3, #2
 8007c02:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8007c06:	4621      	mov	r1, r4
 8007c08:	f851 0b04 	ldr.w	r0, [r1], #4
 8007c0c:	f7ff ff42 	bl	8007a94 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007c10:	2301      	movs	r3, #1
 8007c12:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007c16:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8007c1a:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8007c1e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8007c22:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007c26:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007c2a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007c2e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8007c32:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8007c36:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8007c3a:	2000      	movs	r0, #0
}
 8007c3c:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8007c3e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_OC_MspInit(htim);
 8007c42:	f7ff ff25 	bl	8007a90 <HAL_TIM_OC_MspInit>
 8007c46:	e7db      	b.n	8007c00 <HAL_TIM_OC_Init+0xc>
    return HAL_ERROR;
 8007c48:	2001      	movs	r0, #1
}
 8007c4a:	4770      	bx	lr

08007c4c <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8007c4c:	b340      	cbz	r0, 8007ca0 <HAL_TIM_PWM_Init+0x54>
{
 8007c4e:	b510      	push	{r4, lr}
 8007c50:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8007c52:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8007c56:	b1f3      	cbz	r3, 8007c96 <HAL_TIM_PWM_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 8007c58:	2302      	movs	r3, #2
 8007c5a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007c5e:	4621      	mov	r1, r4
 8007c60:	f851 0b04 	ldr.w	r0, [r1], #4
 8007c64:	f7ff ff16 	bl	8007a94 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007c68:	2301      	movs	r3, #1
 8007c6a:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007c6e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8007c72:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8007c76:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8007c7a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007c7e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007c82:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007c86:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8007c8a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8007c8e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8007c92:	2000      	movs	r0, #0
}
 8007c94:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8007c96:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8007c9a:	f7ff fefa 	bl	8007a92 <HAL_TIM_PWM_MspInit>
 8007c9e:	e7db      	b.n	8007c58 <HAL_TIM_PWM_Init+0xc>
    return HAL_ERROR;
 8007ca0:	2001      	movs	r0, #1
}
 8007ca2:	4770      	bx	lr

08007ca4 <TIM_OC2_SetConfig>:
{
 8007ca4:	b470      	push	{r4, r5, r6}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007ca6:	6a03      	ldr	r3, [r0, #32]
 8007ca8:	f023 0310 	bic.w	r3, r3, #16
 8007cac:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8007cae:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8007cb0:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8007cb2:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007cb4:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007cb8:	680d      	ldr	r5, [r1, #0]
 8007cba:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 8007cbe:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007cc2:	688d      	ldr	r5, [r1, #8]
 8007cc4:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007cc8:	4d12      	ldr	r5, [pc, #72]	; (8007d14 <TIM_OC2_SetConfig+0x70>)
 8007cca:	42a8      	cmp	r0, r5
 8007ccc:	d00b      	beq.n	8007ce6 <TIM_OC2_SetConfig+0x42>
 8007cce:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8007cd2:	42a8      	cmp	r0, r5
 8007cd4:	d116      	bne.n	8007d04 <TIM_OC2_SetConfig+0x60>
    tmpccer &= ~TIM_CCER_CC2NP;
 8007cd6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007cda:	68cd      	ldr	r5, [r1, #12]
 8007cdc:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8007ce0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007ce4:	e006      	b.n	8007cf4 <TIM_OC2_SetConfig+0x50>
    tmpccer &= ~TIM_CCER_CC2NP;
 8007ce6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007cea:	68cd      	ldr	r5, [r1, #12]
 8007cec:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8007cf0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007cf4:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007cf8:	698d      	ldr	r5, [r1, #24]
 8007cfa:	694e      	ldr	r6, [r1, #20]
 8007cfc:	ea46 0c05 	orr.w	ip, r6, r5
 8007d00:	ea44 048c 	orr.w	r4, r4, ip, lsl #2
  TIMx->CR2 = tmpcr2;
 8007d04:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8007d06:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8007d08:	684a      	ldr	r2, [r1, #4]
 8007d0a:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8007d0c:	6203      	str	r3, [r0, #32]
}
 8007d0e:	bc70      	pop	{r4, r5, r6}
 8007d10:	4770      	bx	lr
 8007d12:	bf00      	nop
 8007d14:	40010000 	.word	0x40010000

08007d18 <HAL_TIM_OC_ConfigChannel>:
  __HAL_LOCK(htim);
 8007d18:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8007d1c:	2b01      	cmp	r3, #1
 8007d1e:	d028      	beq.n	8007d72 <HAL_TIM_OC_ConfigChannel+0x5a>
{
 8007d20:	b510      	push	{r4, lr}
 8007d22:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8007d24:	2301      	movs	r3, #1
 8007d26:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 8007d2a:	2a0c      	cmp	r2, #12
 8007d2c:	d81c      	bhi.n	8007d68 <HAL_TIM_OC_ConfigChannel+0x50>
 8007d2e:	e8df f002 	tbb	[pc, r2]
 8007d32:	1b07      	.short	0x1b07
 8007d34:	1b0c1b1b 	.word	0x1b0c1b1b
 8007d38:	1b111b1b 	.word	0x1b111b1b
 8007d3c:	1b1b      	.short	0x1b1b
 8007d3e:	16          	.byte	0x16
 8007d3f:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007d40:	6800      	ldr	r0, [r0, #0]
 8007d42:	f7ff fe0f 	bl	8007964 <TIM_OC1_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8007d46:	2000      	movs	r0, #0
      break;
 8007d48:	e00f      	b.n	8007d6a <HAL_TIM_OC_ConfigChannel+0x52>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007d4a:	6800      	ldr	r0, [r0, #0]
 8007d4c:	f7ff ffaa 	bl	8007ca4 <TIM_OC2_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8007d50:	2000      	movs	r0, #0
      break;
 8007d52:	e00a      	b.n	8007d6a <HAL_TIM_OC_ConfigChannel+0x52>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007d54:	6800      	ldr	r0, [r0, #0]
 8007d56:	f7ff fe3b 	bl	80079d0 <TIM_OC3_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8007d5a:	2000      	movs	r0, #0
      break;
 8007d5c:	e005      	b.n	8007d6a <HAL_TIM_OC_ConfigChannel+0x52>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007d5e:	6800      	ldr	r0, [r0, #0]
 8007d60:	f7ff fe6e 	bl	8007a40 <TIM_OC4_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8007d64:	2000      	movs	r0, #0
      break;
 8007d66:	e000      	b.n	8007d6a <HAL_TIM_OC_ConfigChannel+0x52>
  switch (Channel)
 8007d68:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 8007d6a:	2300      	movs	r3, #0
 8007d6c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8007d70:	bd10      	pop	{r4, pc}
  __HAL_LOCK(htim);
 8007d72:	2002      	movs	r0, #2
}
 8007d74:	4770      	bx	lr

08007d76 <HAL_TIM_PWM_ConfigChannel>:
{
 8007d76:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8007d78:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8007d7c:	2b01      	cmp	r3, #1
 8007d7e:	d066      	beq.n	8007e4e <HAL_TIM_PWM_ConfigChannel+0xd8>
 8007d80:	4604      	mov	r4, r0
 8007d82:	460d      	mov	r5, r1
 8007d84:	2301      	movs	r3, #1
 8007d86:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 8007d8a:	2a0c      	cmp	r2, #12
 8007d8c:	d85a      	bhi.n	8007e44 <HAL_TIM_PWM_ConfigChannel+0xce>
 8007d8e:	e8df f002 	tbb	[pc, r2]
 8007d92:	5907      	.short	0x5907
 8007d94:	591b5959 	.word	0x591b5959
 8007d98:	59305959 	.word	0x59305959
 8007d9c:	5959      	.short	0x5959
 8007d9e:	44          	.byte	0x44
 8007d9f:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007da0:	6800      	ldr	r0, [r0, #0]
 8007da2:	f7ff fddf 	bl	8007964 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007da6:	6822      	ldr	r2, [r4, #0]
 8007da8:	6993      	ldr	r3, [r2, #24]
 8007daa:	f043 0308 	orr.w	r3, r3, #8
 8007dae:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007db0:	6822      	ldr	r2, [r4, #0]
 8007db2:	6993      	ldr	r3, [r2, #24]
 8007db4:	f023 0304 	bic.w	r3, r3, #4
 8007db8:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007dba:	6822      	ldr	r2, [r4, #0]
 8007dbc:	6993      	ldr	r3, [r2, #24]
 8007dbe:	6929      	ldr	r1, [r5, #16]
 8007dc0:	430b      	orrs	r3, r1
 8007dc2:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8007dc4:	2000      	movs	r0, #0
      break;
 8007dc6:	e03e      	b.n	8007e46 <HAL_TIM_PWM_ConfigChannel+0xd0>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007dc8:	6800      	ldr	r0, [r0, #0]
 8007dca:	f7ff ff6b 	bl	8007ca4 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007dce:	6822      	ldr	r2, [r4, #0]
 8007dd0:	6993      	ldr	r3, [r2, #24]
 8007dd2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8007dd6:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007dd8:	6822      	ldr	r2, [r4, #0]
 8007dda:	6993      	ldr	r3, [r2, #24]
 8007ddc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007de0:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007de2:	6822      	ldr	r2, [r4, #0]
 8007de4:	6993      	ldr	r3, [r2, #24]
 8007de6:	6929      	ldr	r1, [r5, #16]
 8007de8:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8007dec:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8007dee:	2000      	movs	r0, #0
      break;
 8007df0:	e029      	b.n	8007e46 <HAL_TIM_PWM_ConfigChannel+0xd0>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007df2:	6800      	ldr	r0, [r0, #0]
 8007df4:	f7ff fdec 	bl	80079d0 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007df8:	6822      	ldr	r2, [r4, #0]
 8007dfa:	69d3      	ldr	r3, [r2, #28]
 8007dfc:	f043 0308 	orr.w	r3, r3, #8
 8007e00:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007e02:	6822      	ldr	r2, [r4, #0]
 8007e04:	69d3      	ldr	r3, [r2, #28]
 8007e06:	f023 0304 	bic.w	r3, r3, #4
 8007e0a:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007e0c:	6822      	ldr	r2, [r4, #0]
 8007e0e:	69d3      	ldr	r3, [r2, #28]
 8007e10:	6929      	ldr	r1, [r5, #16]
 8007e12:	430b      	orrs	r3, r1
 8007e14:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8007e16:	2000      	movs	r0, #0
      break;
 8007e18:	e015      	b.n	8007e46 <HAL_TIM_PWM_ConfigChannel+0xd0>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007e1a:	6800      	ldr	r0, [r0, #0]
 8007e1c:	f7ff fe10 	bl	8007a40 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007e20:	6822      	ldr	r2, [r4, #0]
 8007e22:	69d3      	ldr	r3, [r2, #28]
 8007e24:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8007e28:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007e2a:	6822      	ldr	r2, [r4, #0]
 8007e2c:	69d3      	ldr	r3, [r2, #28]
 8007e2e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007e32:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007e34:	6822      	ldr	r2, [r4, #0]
 8007e36:	69d3      	ldr	r3, [r2, #28]
 8007e38:	6929      	ldr	r1, [r5, #16]
 8007e3a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8007e3e:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8007e40:	2000      	movs	r0, #0
      break;
 8007e42:	e000      	b.n	8007e46 <HAL_TIM_PWM_ConfigChannel+0xd0>
  switch (Channel)
 8007e44:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 8007e46:	2300      	movs	r3, #0
 8007e48:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8007e4c:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(htim);
 8007e4e:	2002      	movs	r0, #2
 8007e50:	e7fc      	b.n	8007e4c <HAL_TIM_PWM_ConfigChannel+0xd6>

08007e52 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007e52:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007e54:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007e56:	f424 4c7f 	bic.w	ip, r4, #65280	; 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007e5a:	430a      	orrs	r2, r1
 8007e5c:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8007e60:	ea42 020c 	orr.w	r2, r2, ip

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007e64:	6082      	str	r2, [r0, #8]
}
 8007e66:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007e6a:	4770      	bx	lr

08007e6c <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8007e6c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8007e70:	2b01      	cmp	r3, #1
 8007e72:	f000 80ae 	beq.w	8007fd2 <HAL_TIM_ConfigClockSource+0x166>
{
 8007e76:	b570      	push	{r4, r5, r6, lr}
 8007e78:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8007e7a:	2301      	movs	r3, #1
 8007e7c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8007e80:	2302      	movs	r3, #2
 8007e82:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8007e86:	6802      	ldr	r2, [r0, #0]
 8007e88:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007e8a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007e8e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8007e92:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8007e94:	680b      	ldr	r3, [r1, #0]
 8007e96:	2b60      	cmp	r3, #96	; 0x60
 8007e98:	d060      	beq.n	8007f5c <HAL_TIM_ConfigClockSource+0xf0>
 8007e9a:	d83d      	bhi.n	8007f18 <HAL_TIM_ConfigClockSource+0xac>
 8007e9c:	2b40      	cmp	r3, #64	; 0x40
 8007e9e:	d079      	beq.n	8007f94 <HAL_TIM_ConfigClockSource+0x128>
 8007ea0:	d91c      	bls.n	8007edc <HAL_TIM_ConfigClockSource+0x70>
 8007ea2:	2b50      	cmp	r3, #80	; 0x50
 8007ea4:	d136      	bne.n	8007f14 <HAL_TIM_ConfigClockSource+0xa8>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007ea6:	6803      	ldr	r3, [r0, #0]
 8007ea8:	6848      	ldr	r0, [r1, #4]
 8007eaa:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 8007eac:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007eae:	6a1a      	ldr	r2, [r3, #32]
 8007eb0:	f022 0201 	bic.w	r2, r2, #1
 8007eb4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007eb6:	699a      	ldr	r2, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007eb8:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007ebc:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007ec0:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 8007ec4:	4301      	orrs	r1, r0
  TIMx->CCMR1 = tmpccmr1;
 8007ec6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007ec8:	6219      	str	r1, [r3, #32]
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007eca:	6822      	ldr	r2, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 8007ecc:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8007ece:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007ed2:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 8007ed6:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8007ed8:	2000      	movs	r0, #0
}
 8007eda:	e012      	b.n	8007f02 <HAL_TIM_ConfigClockSource+0x96>
  switch (sClockSourceConfig->ClockSource)
 8007edc:	2b20      	cmp	r3, #32
 8007ede:	d002      	beq.n	8007ee6 <HAL_TIM_ConfigClockSource+0x7a>
 8007ee0:	d90b      	bls.n	8007efa <HAL_TIM_ConfigClockSource+0x8e>
 8007ee2:	2b30      	cmp	r3, #48	; 0x30
 8007ee4:	d114      	bne.n	8007f10 <HAL_TIM_ConfigClockSource+0xa4>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007ee6:	6821      	ldr	r1, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 8007ee8:	688a      	ldr	r2, [r1, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8007eea:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007eee:	4313      	orrs	r3, r2
 8007ef0:	f043 0307 	orr.w	r3, r3, #7
  TIMx->SMCR = tmpsmcr;
 8007ef4:	608b      	str	r3, [r1, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8007ef6:	2000      	movs	r0, #0
}
 8007ef8:	e003      	b.n	8007f02 <HAL_TIM_ConfigClockSource+0x96>
  switch (sClockSourceConfig->ClockSource)
 8007efa:	f033 0210 	bics.w	r2, r3, #16
 8007efe:	d0f2      	beq.n	8007ee6 <HAL_TIM_ConfigClockSource+0x7a>
 8007f00:	2001      	movs	r0, #1
  htim->State = HAL_TIM_STATE_READY;
 8007f02:	2301      	movs	r3, #1
 8007f04:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8007f08:	2300      	movs	r3, #0
 8007f0a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8007f0e:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8007f10:	2001      	movs	r0, #1
 8007f12:	e7f6      	b.n	8007f02 <HAL_TIM_ConfigClockSource+0x96>
 8007f14:	2001      	movs	r0, #1
 8007f16:	e7f4      	b.n	8007f02 <HAL_TIM_ConfigClockSource+0x96>
 8007f18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f1c:	d055      	beq.n	8007fca <HAL_TIM_ConfigClockSource+0x15e>
 8007f1e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007f22:	d10c      	bne.n	8007f3e <HAL_TIM_ConfigClockSource+0xd2>
      TIM_ETR_SetConfig(htim->Instance,
 8007f24:	68cb      	ldr	r3, [r1, #12]
 8007f26:	684a      	ldr	r2, [r1, #4]
 8007f28:	6889      	ldr	r1, [r1, #8]
 8007f2a:	6800      	ldr	r0, [r0, #0]
 8007f2c:	f7ff ff91 	bl	8007e52 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007f30:	6822      	ldr	r2, [r4, #0]
 8007f32:	6893      	ldr	r3, [r2, #8]
 8007f34:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007f38:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8007f3a:	2000      	movs	r0, #0
      break;
 8007f3c:	e7e1      	b.n	8007f02 <HAL_TIM_ConfigClockSource+0x96>
  switch (sClockSourceConfig->ClockSource)
 8007f3e:	2b70      	cmp	r3, #112	; 0x70
 8007f40:	d145      	bne.n	8007fce <HAL_TIM_ConfigClockSource+0x162>
      TIM_ETR_SetConfig(htim->Instance,
 8007f42:	68cb      	ldr	r3, [r1, #12]
 8007f44:	684a      	ldr	r2, [r1, #4]
 8007f46:	6889      	ldr	r1, [r1, #8]
 8007f48:	6800      	ldr	r0, [r0, #0]
 8007f4a:	f7ff ff82 	bl	8007e52 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8007f4e:	6822      	ldr	r2, [r4, #0]
 8007f50:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007f52:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 8007f56:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8007f58:	2000      	movs	r0, #0
      break;
 8007f5a:	e7d2      	b.n	8007f02 <HAL_TIM_ConfigClockSource+0x96>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007f5c:	6803      	ldr	r3, [r0, #0]
 8007f5e:	684d      	ldr	r5, [r1, #4]
 8007f60:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007f62:	6a18      	ldr	r0, [r3, #32]
 8007f64:	f020 0010 	bic.w	r0, r0, #16
 8007f68:	6218      	str	r0, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007f6a:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 8007f6c:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007f6e:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007f72:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007f76:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8007f7a:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1 ;
 8007f7e:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 8007f80:	621a      	str	r2, [r3, #32]
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007f82:	6822      	ldr	r2, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 8007f84:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8007f86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007f8a:	f043 0367 	orr.w	r3, r3, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 8007f8e:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8007f90:	2000      	movs	r0, #0
}
 8007f92:	e7b6      	b.n	8007f02 <HAL_TIM_ConfigClockSource+0x96>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007f94:	6803      	ldr	r3, [r0, #0]
 8007f96:	6848      	ldr	r0, [r1, #4]
 8007f98:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 8007f9a:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007f9c:	6a1a      	ldr	r2, [r3, #32]
 8007f9e:	f022 0201 	bic.w	r2, r2, #1
 8007fa2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007fa4:	699a      	ldr	r2, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007fa6:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007faa:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007fae:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 8007fb2:	4301      	orrs	r1, r0
  TIMx->CCMR1 = tmpccmr1;
 8007fb4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007fb6:	6219      	str	r1, [r3, #32]
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007fb8:	6822      	ldr	r2, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 8007fba:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8007fbc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007fc0:	f043 0347 	orr.w	r3, r3, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 8007fc4:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8007fc6:	2000      	movs	r0, #0
}
 8007fc8:	e79b      	b.n	8007f02 <HAL_TIM_ConfigClockSource+0x96>
  HAL_StatusTypeDef status = HAL_OK;
 8007fca:	2000      	movs	r0, #0
 8007fcc:	e799      	b.n	8007f02 <HAL_TIM_ConfigClockSource+0x96>
  switch (sClockSourceConfig->ClockSource)
 8007fce:	2001      	movs	r0, #1
 8007fd0:	e797      	b.n	8007f02 <HAL_TIM_ConfigClockSource+0x96>
  __HAL_LOCK(htim);
 8007fd2:	2002      	movs	r0, #2
}
 8007fd4:	4770      	bx	lr

08007fd6 <TIM_CCxChannelCmd>:

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007fd6:	f001 011f 	and.w	r1, r1, #31

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007fda:	6a03      	ldr	r3, [r0, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007fdc:	f04f 0c01 	mov.w	ip, #1
 8007fe0:	fa0c fc01 	lsl.w	ip, ip, r1
  TIMx->CCER &= ~tmp;
 8007fe4:	ea23 030c 	bic.w	r3, r3, ip
 8007fe8:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007fea:	6a03      	ldr	r3, [r0, #32]
 8007fec:	408a      	lsls	r2, r1
 8007fee:	431a      	orrs	r2, r3
 8007ff0:	6202      	str	r2, [r0, #32]
}
 8007ff2:	4770      	bx	lr

08007ff4 <HAL_TIM_PWM_Start>:
{
 8007ff4:	b510      	push	{r4, lr}
 8007ff6:	4604      	mov	r4, r0
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007ff8:	4608      	mov	r0, r1
 8007ffa:	bba1      	cbnz	r1, 8008066 <HAL_TIM_PWM_Start+0x72>
 8007ffc:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 8008000:	b2db      	uxtb	r3, r3
 8008002:	2b01      	cmp	r3, #1
 8008004:	d167      	bne.n	80080d6 <HAL_TIM_PWM_Start+0xe2>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008006:	2302      	movs	r3, #2
 8008008:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800800c:	2201      	movs	r2, #1
 800800e:	4601      	mov	r1, r0
 8008010:	6820      	ldr	r0, [r4, #0]
 8008012:	f7ff ffe0 	bl	8007fd6 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008016:	6823      	ldr	r3, [r4, #0]
 8008018:	4a31      	ldr	r2, [pc, #196]	; (80080e0 <HAL_TIM_PWM_Start+0xec>)
 800801a:	4293      	cmp	r3, r2
 800801c:	d048      	beq.n	80080b0 <HAL_TIM_PWM_Start+0xbc>
 800801e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008022:	4293      	cmp	r3, r2
 8008024:	d044      	beq.n	80080b0 <HAL_TIM_PWM_Start+0xbc>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008026:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800802a:	d049      	beq.n	80080c0 <HAL_TIM_PWM_Start+0xcc>
 800802c:	4a2d      	ldr	r2, [pc, #180]	; (80080e4 <HAL_TIM_PWM_Start+0xf0>)
 800802e:	4293      	cmp	r3, r2
 8008030:	d046      	beq.n	80080c0 <HAL_TIM_PWM_Start+0xcc>
 8008032:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008036:	4293      	cmp	r3, r2
 8008038:	d042      	beq.n	80080c0 <HAL_TIM_PWM_Start+0xcc>
 800803a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800803e:	4293      	cmp	r3, r2
 8008040:	d03e      	beq.n	80080c0 <HAL_TIM_PWM_Start+0xcc>
 8008042:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8008046:	4293      	cmp	r3, r2
 8008048:	d03a      	beq.n	80080c0 <HAL_TIM_PWM_Start+0xcc>
 800804a:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 800804e:	4293      	cmp	r3, r2
 8008050:	d036      	beq.n	80080c0 <HAL_TIM_PWM_Start+0xcc>
 8008052:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8008056:	4293      	cmp	r3, r2
 8008058:	d032      	beq.n	80080c0 <HAL_TIM_PWM_Start+0xcc>
    __HAL_TIM_ENABLE(htim);
 800805a:	681a      	ldr	r2, [r3, #0]
 800805c:	f042 0201 	orr.w	r2, r2, #1
 8008060:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8008062:	2000      	movs	r0, #0
 8008064:	e036      	b.n	80080d4 <HAL_TIM_PWM_Start+0xe0>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008066:	2904      	cmp	r1, #4
 8008068:	d00c      	beq.n	8008084 <HAL_TIM_PWM_Start+0x90>
 800806a:	2908      	cmp	r1, #8
 800806c:	bf0c      	ite	eq
 800806e:	f894 3040 	ldrbeq.w	r3, [r4, #64]	; 0x40
 8008072:	f894 3041 	ldrbne.w	r3, [r4, #65]	; 0x41
 8008076:	b2db      	uxtb	r3, r3
 8008078:	3b01      	subs	r3, #1
 800807a:	bf18      	it	ne
 800807c:	2301      	movne	r3, #1
 800807e:	b143      	cbz	r3, 8008092 <HAL_TIM_PWM_Start+0x9e>
    return HAL_ERROR;
 8008080:	2001      	movs	r0, #1
 8008082:	e027      	b.n	80080d4 <HAL_TIM_PWM_Start+0xe0>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008084:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
 8008088:	b2db      	uxtb	r3, r3
 800808a:	3b01      	subs	r3, #1
 800808c:	bf18      	it	ne
 800808e:	2301      	movne	r3, #1
 8008090:	e7f5      	b.n	800807e <HAL_TIM_PWM_Start+0x8a>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008092:	2804      	cmp	r0, #4
 8008094:	d008      	beq.n	80080a8 <HAL_TIM_PWM_Start+0xb4>
 8008096:	2808      	cmp	r0, #8
 8008098:	f04f 0302 	mov.w	r3, #2
 800809c:	bf0c      	ite	eq
 800809e:	f884 3040 	strbeq.w	r3, [r4, #64]	; 0x40
 80080a2:	f884 3041 	strbne.w	r3, [r4, #65]	; 0x41
 80080a6:	e7b1      	b.n	800800c <HAL_TIM_PWM_Start+0x18>
 80080a8:	2302      	movs	r3, #2
 80080aa:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 80080ae:	e7ad      	b.n	800800c <HAL_TIM_PWM_Start+0x18>
    __HAL_TIM_MOE_ENABLE(htim);
 80080b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80080b2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80080b6:	645a      	str	r2, [r3, #68]	; 0x44
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80080b8:	6823      	ldr	r3, [r4, #0]
 80080ba:	4a09      	ldr	r2, [pc, #36]	; (80080e0 <HAL_TIM_PWM_Start+0xec>)
 80080bc:	4293      	cmp	r3, r2
 80080be:	d1b2      	bne.n	8008026 <HAL_TIM_PWM_Start+0x32>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80080c0:	689a      	ldr	r2, [r3, #8]
 80080c2:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80080c6:	2a06      	cmp	r2, #6
 80080c8:	d007      	beq.n	80080da <HAL_TIM_PWM_Start+0xe6>
      __HAL_TIM_ENABLE(htim);
 80080ca:	681a      	ldr	r2, [r3, #0]
 80080cc:	f042 0201 	orr.w	r2, r2, #1
 80080d0:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80080d2:	2000      	movs	r0, #0
}
 80080d4:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80080d6:	2001      	movs	r0, #1
 80080d8:	e7fc      	b.n	80080d4 <HAL_TIM_PWM_Start+0xe0>
  return HAL_OK;
 80080da:	2000      	movs	r0, #0
 80080dc:	e7fa      	b.n	80080d4 <HAL_TIM_PWM_Start+0xe0>
 80080de:	bf00      	nop
 80080e0:	40010000 	.word	0x40010000
 80080e4:	40000400 	.word	0x40000400

080080e8 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80080e8:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80080ec:	2b01      	cmp	r3, #1
 80080ee:	d03b      	beq.n	8008168 <HAL_TIMEx_MasterConfigSynchronization+0x80>
{
 80080f0:	b430      	push	{r4, r5}
  __HAL_LOCK(htim);
 80080f2:	2301      	movs	r3, #1
 80080f4:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80080f8:	2302      	movs	r3, #2
 80080fa:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80080fe:	6804      	ldr	r4, [r0, #0]
 8008100:	6863      	ldr	r3, [r4, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008102:	68a2      	ldr	r2, [r4, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008104:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008108:	680d      	ldr	r5, [r1, #0]
 800810a:	432b      	orrs	r3, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800810c:	6063      	str	r3, [r4, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800810e:	6803      	ldr	r3, [r0, #0]
 8008110:	4c16      	ldr	r4, [pc, #88]	; (800816c <HAL_TIMEx_MasterConfigSynchronization+0x84>)
 8008112:	42a3      	cmp	r3, r4
 8008114:	d01a      	beq.n	800814c <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8008116:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800811a:	d017      	beq.n	800814c <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800811c:	f5a4 447c 	sub.w	r4, r4, #64512	; 0xfc00
 8008120:	42a3      	cmp	r3, r4
 8008122:	d013      	beq.n	800814c <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8008124:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8008128:	42a3      	cmp	r3, r4
 800812a:	d00f      	beq.n	800814c <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800812c:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8008130:	42a3      	cmp	r3, r4
 8008132:	d00b      	beq.n	800814c <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8008134:	f504 4478 	add.w	r4, r4, #63488	; 0xf800
 8008138:	42a3      	cmp	r3, r4
 800813a:	d007      	beq.n	800814c <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800813c:	f504 5470 	add.w	r4, r4, #15360	; 0x3c00
 8008140:	42a3      	cmp	r3, r4
 8008142:	d003      	beq.n	800814c <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8008144:	f5a4 3494 	sub.w	r4, r4, #75776	; 0x12800
 8008148:	42a3      	cmp	r3, r4
 800814a:	d104      	bne.n	8008156 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800814c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008150:	6849      	ldr	r1, [r1, #4]
 8008152:	430a      	orrs	r2, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008154:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008156:	2301      	movs	r3, #1
 8008158:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800815c:	2300      	movs	r3, #0
 800815e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 8008162:	4618      	mov	r0, r3
}
 8008164:	bc30      	pop	{r4, r5}
 8008166:	4770      	bx	lr
  __HAL_LOCK(htim);
 8008168:	2002      	movs	r0, #2
}
 800816a:	4770      	bx	lr
 800816c:	40010000 	.word	0x40010000

08008170 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008170:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 8008172:	2300      	movs	r3, #0
 8008174:	9301      	str	r3, [sp, #4]
  /* Wait for AHB master IDLE state. */
  do
  {
    count++;

    if (count > 200000U)
 8008176:	4a11      	ldr	r2, [pc, #68]	; (80081bc <USB_CoreReset+0x4c>)
    count++;
 8008178:	9b01      	ldr	r3, [sp, #4]
 800817a:	3301      	adds	r3, #1
 800817c:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 800817e:	9b01      	ldr	r3, [sp, #4]
 8008180:	4293      	cmp	r3, r2
 8008182:	d815      	bhi.n	80081b0 <USB_CoreReset+0x40>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008184:	6903      	ldr	r3, [r0, #16]
 8008186:	2b00      	cmp	r3, #0
 8008188:	daf6      	bge.n	8008178 <USB_CoreReset+0x8>

  /* Core Soft Reset */
  count = 0U;
 800818a:	2300      	movs	r3, #0
 800818c:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800818e:	6903      	ldr	r3, [r0, #16]
 8008190:	f043 0301 	orr.w	r3, r3, #1
 8008194:	6103      	str	r3, [r0, #16]

  do
  {
    count++;

    if (count > 200000U)
 8008196:	4a09      	ldr	r2, [pc, #36]	; (80081bc <USB_CoreReset+0x4c>)
    count++;
 8008198:	9b01      	ldr	r3, [sp, #4]
 800819a:	3301      	adds	r3, #1
 800819c:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 800819e:	9b01      	ldr	r3, [sp, #4]
 80081a0:	4293      	cmp	r3, r2
 80081a2:	d808      	bhi.n	80081b6 <USB_CoreReset+0x46>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80081a4:	6903      	ldr	r3, [r0, #16]
 80081a6:	f013 0f01 	tst.w	r3, #1
 80081aa:	d1f5      	bne.n	8008198 <USB_CoreReset+0x28>

  return HAL_OK;
 80081ac:	2000      	movs	r0, #0
 80081ae:	e000      	b.n	80081b2 <USB_CoreReset+0x42>
      return HAL_TIMEOUT;
 80081b0:	2003      	movs	r0, #3
}
 80081b2:	b002      	add	sp, #8
 80081b4:	4770      	bx	lr
      return HAL_TIMEOUT;
 80081b6:	2003      	movs	r0, #3
 80081b8:	e7fb      	b.n	80081b2 <USB_CoreReset+0x42>
 80081ba:	bf00      	nop
 80081bc:	00030d40 	.word	0x00030d40

080081c0 <USB_CoreInit>:
{
 80081c0:	b084      	sub	sp, #16
 80081c2:	b510      	push	{r4, lr}
 80081c4:	4604      	mov	r4, r0
 80081c6:	a803      	add	r0, sp, #12
 80081c8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80081cc:	9b08      	ldr	r3, [sp, #32]
 80081ce:	2b01      	cmp	r3, #1
 80081d0:	d11f      	bne.n	8008212 <USB_CoreInit+0x52>
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80081d2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80081d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80081d8:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80081da:	68e3      	ldr	r3, [r4, #12]
 80081dc:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80081e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80081e4:	60e3      	str	r3, [r4, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80081e6:	68e3      	ldr	r3, [r4, #12]
 80081e8:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80081ec:	60e3      	str	r3, [r4, #12]
    if (cfg.use_external_vbus == 1U)
 80081ee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80081f0:	2b01      	cmp	r3, #1
 80081f2:	d009      	beq.n	8008208 <USB_CoreInit+0x48>
    ret = USB_CoreReset(USBx);
 80081f4:	4620      	mov	r0, r4
 80081f6:	f7ff ffbb 	bl	8008170 <USB_CoreReset>
  if (cfg.dma_enable == 1U)
 80081fa:	9b06      	ldr	r3, [sp, #24]
 80081fc:	2b01      	cmp	r3, #1
 80081fe:	d01b      	beq.n	8008238 <USB_CoreInit+0x78>
}
 8008200:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008204:	b004      	add	sp, #16
 8008206:	4770      	bx	lr
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008208:	68e3      	ldr	r3, [r4, #12]
 800820a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800820e:	60e3      	str	r3, [r4, #12]
 8008210:	e7f0      	b.n	80081f4 <USB_CoreInit+0x34>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008212:	68e3      	ldr	r3, [r4, #12]
 8008214:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008218:	60e3      	str	r3, [r4, #12]
    ret = USB_CoreReset(USBx);
 800821a:	4620      	mov	r0, r4
 800821c:	f7ff ffa8 	bl	8008170 <USB_CoreReset>
    if (cfg.battery_charging_enable == 0U)
 8008220:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008222:	b923      	cbnz	r3, 800822e <USB_CoreInit+0x6e>
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008224:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008226:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800822a:	63a3      	str	r3, [r4, #56]	; 0x38
 800822c:	e7e5      	b.n	80081fa <USB_CoreInit+0x3a>
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800822e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008230:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008234:	63a3      	str	r3, [r4, #56]	; 0x38
 8008236:	e7e0      	b.n	80081fa <USB_CoreInit+0x3a>
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008238:	68a3      	ldr	r3, [r4, #8]
 800823a:	f043 0306 	orr.w	r3, r3, #6
 800823e:	60a3      	str	r3, [r4, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008240:	68a3      	ldr	r3, [r4, #8]
 8008242:	f043 0320 	orr.w	r3, r3, #32
 8008246:	60a3      	str	r3, [r4, #8]
 8008248:	e7da      	b.n	8008200 <USB_CoreInit+0x40>

0800824a <USB_EnableGlobalInt>:
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800824a:	6883      	ldr	r3, [r0, #8]
 800824c:	f043 0301 	orr.w	r3, r3, #1
 8008250:	6083      	str	r3, [r0, #8]
}
 8008252:	2000      	movs	r0, #0
 8008254:	4770      	bx	lr

08008256 <USB_DisableGlobalInt>:
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008256:	6883      	ldr	r3, [r0, #8]
 8008258:	f023 0301 	bic.w	r3, r3, #1
 800825c:	6083      	str	r3, [r0, #8]
}
 800825e:	2000      	movs	r0, #0
 8008260:	4770      	bx	lr

08008262 <USB_SetCurrentMode>:
{
 8008262:	b570      	push	{r4, r5, r6, lr}
 8008264:	4605      	mov	r5, r0
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008266:	68c3      	ldr	r3, [r0, #12]
 8008268:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800826c:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 800826e:	2901      	cmp	r1, #1
 8008270:	d015      	beq.n	800829e <USB_SetCurrentMode+0x3c>
  else if (mode == USB_DEVICE_MODE)
 8008272:	bb29      	cbnz	r1, 80082c0 <USB_SetCurrentMode+0x5e>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008274:	68c3      	ldr	r3, [r0, #12]
 8008276:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800827a:	60c3      	str	r3, [r0, #12]
  uint32_t ms = 0U;
 800827c:	2400      	movs	r4, #0
      HAL_Delay(1U);
 800827e:	2601      	movs	r6, #1
 8008280:	4630      	mov	r0, r6
 8008282:	f7fd fa09 	bl	8005698 <HAL_Delay>
      ms++;
 8008286:	3401      	adds	r4, #1
  return ((USBx->GINTSTS) & 0x1U);
 8008288:	696b      	ldr	r3, [r5, #20]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800828a:	f013 0f01 	tst.w	r3, #1
 800828e:	d001      	beq.n	8008294 <USB_SetCurrentMode+0x32>
 8008290:	2c32      	cmp	r4, #50	; 0x32
 8008292:	d1f5      	bne.n	8008280 <USB_SetCurrentMode+0x1e>
    return HAL_ERROR;
 8008294:	2c32      	cmp	r4, #50	; 0x32
 8008296:	bf14      	ite	ne
 8008298:	2000      	movne	r0, #0
 800829a:	2001      	moveq	r0, #1
}
 800829c:	bd70      	pop	{r4, r5, r6, pc}
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800829e:	68c3      	ldr	r3, [r0, #12]
 80082a0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80082a4:	60c3      	str	r3, [r0, #12]
  uint32_t ms = 0U;
 80082a6:	2400      	movs	r4, #0
      HAL_Delay(1U);
 80082a8:	2601      	movs	r6, #1
 80082aa:	4630      	mov	r0, r6
 80082ac:	f7fd f9f4 	bl	8005698 <HAL_Delay>
      ms++;
 80082b0:	3401      	adds	r4, #1
  return ((USBx->GINTSTS) & 0x1U);
 80082b2:	696b      	ldr	r3, [r5, #20]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80082b4:	f013 0f01 	tst.w	r3, #1
 80082b8:	d1ec      	bne.n	8008294 <USB_SetCurrentMode+0x32>
 80082ba:	2c32      	cmp	r4, #50	; 0x32
 80082bc:	d1f5      	bne.n	80082aa <USB_SetCurrentMode+0x48>
 80082be:	e7e9      	b.n	8008294 <USB_SetCurrentMode+0x32>
    return HAL_ERROR;
 80082c0:	2001      	movs	r0, #1
 80082c2:	e7eb      	b.n	800829c <USB_SetCurrentMode+0x3a>

080082c4 <USB_FlushTxFifo>:
{
 80082c4:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 80082c6:	2300      	movs	r3, #0
 80082c8:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 80082ca:	4a11      	ldr	r2, [pc, #68]	; (8008310 <USB_FlushTxFifo+0x4c>)
    count++;
 80082cc:	9b01      	ldr	r3, [sp, #4]
 80082ce:	3301      	adds	r3, #1
 80082d0:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 80082d2:	9b01      	ldr	r3, [sp, #4]
 80082d4:	4293      	cmp	r3, r2
 80082d6:	d815      	bhi.n	8008304 <USB_FlushTxFifo+0x40>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80082d8:	6903      	ldr	r3, [r0, #16]
 80082da:	2b00      	cmp	r3, #0
 80082dc:	daf6      	bge.n	80082cc <USB_FlushTxFifo+0x8>
  count = 0U;
 80082de:	2300      	movs	r3, #0
 80082e0:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80082e2:	0189      	lsls	r1, r1, #6
 80082e4:	f041 0120 	orr.w	r1, r1, #32
 80082e8:	6101      	str	r1, [r0, #16]
    if (count > 200000U)
 80082ea:	4a09      	ldr	r2, [pc, #36]	; (8008310 <USB_FlushTxFifo+0x4c>)
    count++;
 80082ec:	9b01      	ldr	r3, [sp, #4]
 80082ee:	3301      	adds	r3, #1
 80082f0:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 80082f2:	9b01      	ldr	r3, [sp, #4]
 80082f4:	4293      	cmp	r3, r2
 80082f6:	d808      	bhi.n	800830a <USB_FlushTxFifo+0x46>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80082f8:	6903      	ldr	r3, [r0, #16]
 80082fa:	f013 0f20 	tst.w	r3, #32
 80082fe:	d1f5      	bne.n	80082ec <USB_FlushTxFifo+0x28>
  return HAL_OK;
 8008300:	2000      	movs	r0, #0
 8008302:	e000      	b.n	8008306 <USB_FlushTxFifo+0x42>
      return HAL_TIMEOUT;
 8008304:	2003      	movs	r0, #3
}
 8008306:	b002      	add	sp, #8
 8008308:	4770      	bx	lr
      return HAL_TIMEOUT;
 800830a:	2003      	movs	r0, #3
 800830c:	e7fb      	b.n	8008306 <USB_FlushTxFifo+0x42>
 800830e:	bf00      	nop
 8008310:	00030d40 	.word	0x00030d40

08008314 <USB_FlushRxFifo>:
{
 8008314:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 8008316:	2300      	movs	r3, #0
 8008318:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 800831a:	4a10      	ldr	r2, [pc, #64]	; (800835c <USB_FlushRxFifo+0x48>)
    count++;
 800831c:	9b01      	ldr	r3, [sp, #4]
 800831e:	3301      	adds	r3, #1
 8008320:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 8008322:	9b01      	ldr	r3, [sp, #4]
 8008324:	4293      	cmp	r3, r2
 8008326:	d813      	bhi.n	8008350 <USB_FlushRxFifo+0x3c>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008328:	6903      	ldr	r3, [r0, #16]
 800832a:	2b00      	cmp	r3, #0
 800832c:	daf6      	bge.n	800831c <USB_FlushRxFifo+0x8>
  count = 0U;
 800832e:	2300      	movs	r3, #0
 8008330:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008332:	2310      	movs	r3, #16
 8008334:	6103      	str	r3, [r0, #16]
    if (count > 200000U)
 8008336:	4a09      	ldr	r2, [pc, #36]	; (800835c <USB_FlushRxFifo+0x48>)
    count++;
 8008338:	9b01      	ldr	r3, [sp, #4]
 800833a:	3301      	adds	r3, #1
 800833c:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 800833e:	9b01      	ldr	r3, [sp, #4]
 8008340:	4293      	cmp	r3, r2
 8008342:	d808      	bhi.n	8008356 <USB_FlushRxFifo+0x42>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008344:	6903      	ldr	r3, [r0, #16]
 8008346:	f013 0f10 	tst.w	r3, #16
 800834a:	d1f5      	bne.n	8008338 <USB_FlushRxFifo+0x24>
  return HAL_OK;
 800834c:	2000      	movs	r0, #0
 800834e:	e000      	b.n	8008352 <USB_FlushRxFifo+0x3e>
      return HAL_TIMEOUT;
 8008350:	2003      	movs	r0, #3
}
 8008352:	b002      	add	sp, #8
 8008354:	4770      	bx	lr
      return HAL_TIMEOUT;
 8008356:	2003      	movs	r0, #3
 8008358:	e7fb      	b.n	8008352 <USB_FlushRxFifo+0x3e>
 800835a:	bf00      	nop
 800835c:	00030d40 	.word	0x00030d40

08008360 <USB_WritePacket>:
{
 8008360:	b410      	push	{r4}
 8008362:	f89d 4004 	ldrb.w	r4, [sp, #4]
  if (dma == 0U)
 8008366:	b974      	cbnz	r4, 8008386 <USB_WritePacket+0x26>
    count32b = ((uint32_t)len + 3U) / 4U;
 8008368:	3303      	adds	r3, #3
 800836a:	ea4f 0c93 	mov.w	ip, r3, lsr #2
    for (i = 0U; i < count32b; i++)
 800836e:	2b03      	cmp	r3, #3
 8008370:	d909      	bls.n	8008386 <USB_WritePacket+0x26>
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8008372:	3201      	adds	r2, #1
 8008374:	eb00 3002 	add.w	r0, r0, r2, lsl #12
    for (i = 0U; i < count32b; i++)
 8008378:	2300      	movs	r3, #0
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800837a:	f851 2b04 	ldr.w	r2, [r1], #4
 800837e:	6002      	str	r2, [r0, #0]
    for (i = 0U; i < count32b; i++)
 8008380:	3301      	adds	r3, #1
 8008382:	459c      	cmp	ip, r3
 8008384:	d8f9      	bhi.n	800837a <USB_WritePacket+0x1a>
}
 8008386:	2000      	movs	r0, #0
 8008388:	f85d 4b04 	ldr.w	r4, [sp], #4
 800838c:	4770      	bx	lr

0800838e <USB_ReadPacket>:
{
 800838e:	b570      	push	{r4, r5, r6, lr}
 8008390:	4606      	mov	r6, r0
  uint16_t remaining_bytes = len % 4U;
 8008392:	f002 0503 	and.w	r5, r2, #3
  for (i = 0U; i < count32b; i++)
 8008396:	ea5f 0c92 	movs.w	ip, r2, lsr #2
 800839a:	d01b      	beq.n	80083d4 <USB_ReadPacket+0x46>
  uint8_t *pDest = dest;
 800839c:	460a      	mov	r2, r1
  for (i = 0U; i < count32b; i++)
 800839e:	2300      	movs	r3, #0
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80083a0:	f500 5e80 	add.w	lr, r0, #4096	; 0x1000
 80083a4:	f8de 4000 	ldr.w	r4, [lr]
 80083a8:	f842 4b04 	str.w	r4, [r2], #4
  for (i = 0U; i < count32b; i++)
 80083ac:	3301      	adds	r3, #1
 80083ae:	459c      	cmp	ip, r3
 80083b0:	d1f8      	bne.n	80083a4 <USB_ReadPacket+0x16>
    pDest++;
 80083b2:	eb01 0083 	add.w	r0, r1, r3, lsl #2
  if (remaining_bytes != 0U)
 80083b6:	b165      	cbz	r5, 80083d2 <USB_ReadPacket+0x44>
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80083b8:	f506 5680 	add.w	r6, r6, #4096	; 0x1000
 80083bc:	6834      	ldr	r4, [r6, #0]
 80083be:	1941      	adds	r1, r0, r5
 80083c0:	2300      	movs	r3, #0
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80083c2:	fa24 f203 	lsr.w	r2, r4, r3
 80083c6:	f800 2b01 	strb.w	r2, [r0], #1
    } while (remaining_bytes != 0U);
 80083ca:	3308      	adds	r3, #8
 80083cc:	4288      	cmp	r0, r1
 80083ce:	d1f8      	bne.n	80083c2 <USB_ReadPacket+0x34>
      pDest++;
 80083d0:	4608      	mov	r0, r1
}
 80083d2:	bd70      	pop	{r4, r5, r6, pc}
  uint8_t *pDest = dest;
 80083d4:	4608      	mov	r0, r1
 80083d6:	e7ee      	b.n	80083b6 <USB_ReadPacket+0x28>

080083d8 <USB_ReadInterrupts>:
  tmpreg = USBx->GINTSTS;
 80083d8:	6942      	ldr	r2, [r0, #20]
  tmpreg &= USBx->GINTMSK;
 80083da:	6980      	ldr	r0, [r0, #24]
}
 80083dc:	4010      	ands	r0, r2
 80083de:	4770      	bx	lr

080083e0 <USB_GetMode>:
  return ((USBx->GINTSTS) & 0x1U);
 80083e0:	6940      	ldr	r0, [r0, #20]
}
 80083e2:	f000 0001 	and.w	r0, r0, #1
 80083e6:	4770      	bx	lr

080083e8 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80083e8:	b084      	sub	sp, #16
 80083ea:	b570      	push	{r4, r5, r6, lr}
 80083ec:	4604      	mov	r4, r0
 80083ee:	a805      	add	r0, sp, #20
 80083f0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 80083f4:	4615      	mov	r5, r2
  HAL_StatusTypeDef ret = HAL_OK;
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80083f6:	2300      	movs	r3, #0
 80083f8:	f8c4 3e00 	str.w	r3, [r4, #3584]	; 0xe00
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80083fc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80083fe:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008402:	63a3      	str	r3, [r4, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8008404:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008406:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800840a:	63a3      	str	r3, [r4, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800840c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800840e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008412:	63a3      	str	r3, [r4, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8008414:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8008416:	f413 7f80 	tst.w	r3, #256	; 0x100
 800841a:	d045      	beq.n	80084a8 <USB_HostInit+0xc0>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800841c:	9b07      	ldr	r3, [sp, #28]
 800841e:	2b01      	cmp	r3, #1
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8008420:	f8d4 3400 	ldr.w	r3, [r4, #1024]	; 0x400
 8008424:	bf0c      	ite	eq
 8008426:	f043 0304 	orreq.w	r3, r3, #4
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800842a:	f023 0304 	bicne.w	r3, r3, #4
 800842e:	f8c4 3400 	str.w	r3, [r4, #1024]	; 0x400
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008432:	2110      	movs	r1, #16
 8008434:	4620      	mov	r0, r4
 8008436:	f7ff ff45 	bl	80082c4 <USB_FlushTxFifo>
 800843a:	4606      	mov	r6, r0
  {
    ret = HAL_ERROR;
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800843c:	4620      	mov	r0, r4
 800843e:	f7ff ff69 	bl	8008314 <USB_FlushRxFifo>
 8008442:	4306      	orrs	r6, r0
 8008444:	f016 0fff 	tst.w	r6, #255	; 0xff
  {
    ret = HAL_ERROR;
 8008448:	bf14      	ite	ne
 800844a:	2001      	movne	r0, #1
 800844c:	2000      	moveq	r0, #0
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800844e:	b15d      	cbz	r5, 8008468 <USB_HostInit+0x80>
 8008450:	f504 63a0 	add.w	r3, r4, #1280	; 0x500
 8008454:	2200      	movs	r2, #0
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8008456:	f04f 36ff 	mov.w	r6, #4294967295
    USBx_HC(i)->HCINTMSK = 0U;
 800845a:	4611      	mov	r1, r2
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 800845c:	609e      	str	r6, [r3, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800845e:	60d9      	str	r1, [r3, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8008460:	3201      	adds	r2, #1
 8008462:	3320      	adds	r3, #32
 8008464:	4295      	cmp	r5, r2
 8008466:	d1f9      	bne.n	800845c <USB_HostInit+0x74>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008468:	2300      	movs	r3, #0
 800846a:	61a3      	str	r3, [r4, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800846c:	f04f 33ff 	mov.w	r3, #4294967295
 8008470:	6163      	str	r3, [r4, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8008472:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8008474:	f413 7f80 	tst.w	r3, #256	; 0x100
 8008478:	d01d      	beq.n	80084b6 <USB_HostInit+0xce>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800847a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800847e:	6263      	str	r3, [r4, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8008480:	f103 7380 	add.w	r3, r3, #16777216	; 0x1000000
 8008484:	62a3      	str	r3, [r4, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8008486:	4b10      	ldr	r3, [pc, #64]	; (80084c8 <USB_HostInit+0xe0>)
 8008488:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800848c:	9b08      	ldr	r3, [sp, #32]
 800848e:	b91b      	cbnz	r3, 8008498 <USB_HostInit+0xb0>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008490:	69a3      	ldr	r3, [r4, #24]
 8008492:	f043 0310 	orr.w	r3, r3, #16
 8008496:	61a3      	str	r3, [r4, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8008498:	69a2      	ldr	r2, [r4, #24]
 800849a:	4b0c      	ldr	r3, [pc, #48]	; (80084cc <USB_HostInit+0xe4>)
 800849c:	4313      	orrs	r3, r2
 800849e:	61a3      	str	r3, [r4, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
}
 80084a0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80084a4:	b004      	add	sp, #16
 80084a6:	4770      	bx	lr
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80084a8:	f8d4 3400 	ldr.w	r3, [r4, #1024]	; 0x400
 80084ac:	f023 0304 	bic.w	r3, r3, #4
 80084b0:	f8c4 3400 	str.w	r3, [r4, #1024]	; 0x400
 80084b4:	e7bd      	b.n	8008432 <USB_HostInit+0x4a>
    USBx->GRXFSIZ  = 0x80U;
 80084b6:	2380      	movs	r3, #128	; 0x80
 80084b8:	6263      	str	r3, [r4, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80084ba:	f503 03c0 	add.w	r3, r3, #6291456	; 0x600000
 80084be:	62a3      	str	r3, [r4, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80084c0:	4b03      	ldr	r3, [pc, #12]	; (80084d0 <USB_HostInit+0xe8>)
 80084c2:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 80084c6:	e7e1      	b.n	800848c <USB_HostInit+0xa4>
 80084c8:	00e00300 	.word	0x00e00300
 80084cc:	a3200008 	.word	0xa3200008
 80084d0:	004000e0 	.word	0x004000e0

080084d4 <USB_InitFSLSPClkSel>:
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
  uint32_t USBx_BASE = (uint32_t)USBx;

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80084d4:	f500 6c80 	add.w	ip, r0, #1024	; 0x400
 80084d8:	f8d0 3400 	ldr.w	r3, [r0, #1024]	; 0x400
 80084dc:	f023 0303 	bic.w	r3, r3, #3
 80084e0:	f8c0 3400 	str.w	r3, [r0, #1024]	; 0x400
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80084e4:	f8d0 2400 	ldr.w	r2, [r0, #1024]	; 0x400
 80084e8:	f001 0303 	and.w	r3, r1, #3
 80084ec:	4313      	orrs	r3, r2
 80084ee:	f8c0 3400 	str.w	r3, [r0, #1024]	; 0x400

  if (freq == HCFG_48_MHZ)
 80084f2:	2901      	cmp	r1, #1
 80084f4:	d007      	beq.n	8008506 <USB_InitFSLSPClkSel+0x32>
  {
    USBx_HOST->HFIR = 48000U;
  }
  else if (freq == HCFG_6_MHZ)
 80084f6:	2902      	cmp	r1, #2
  {
    USBx_HOST->HFIR = 6000U;
 80084f8:	bf04      	itt	eq
 80084fa:	f241 7370 	movweq	r3, #6000	; 0x1770
 80084fe:	f8cc 3004 	streq.w	r3, [ip, #4]
  {
    /* ... */
  }

  return HAL_OK;
}
 8008502:	2000      	movs	r0, #0
 8008504:	4770      	bx	lr
    USBx_HOST->HFIR = 48000U;
 8008506:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800850a:	f8cc 3004 	str.w	r3, [ip, #4]
 800850e:	e7f8      	b.n	8008502 <USB_InitFSLSPClkSel+0x2e>

08008510 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8008510:	b530      	push	{r4, r5, lr}
 8008512:	b083      	sub	sp, #12
 8008514:	4604      	mov	r4, r0
  uint32_t USBx_BASE = (uint32_t)USBx;

  __IO uint32_t hprt0 = 0U;
 8008516:	2500      	movs	r5, #0
 8008518:	9501      	str	r5, [sp, #4]

  hprt0 = USBx_HPRT0;
 800851a:	f8d0 3440 	ldr.w	r3, [r0, #1088]	; 0x440
 800851e:	9301      	str	r3, [sp, #4]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8008520:	9b01      	ldr	r3, [sp, #4]
 8008522:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8008526:	9301      	str	r3, [sp, #4]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8008528:	9b01      	ldr	r3, [sp, #4]
 800852a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800852e:	f8c0 3440 	str.w	r3, [r0, #1088]	; 0x440
  HAL_Delay(100U);                                 /* See Note #1 */
 8008532:	2064      	movs	r0, #100	; 0x64
 8008534:	f7fd f8b0 	bl	8005698 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8008538:	9b01      	ldr	r3, [sp, #4]
 800853a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800853e:	f8c4 3440 	str.w	r3, [r4, #1088]	; 0x440
  HAL_Delay(10U);
 8008542:	200a      	movs	r0, #10
 8008544:	f7fd f8a8 	bl	8005698 <HAL_Delay>

  return HAL_OK;
}
 8008548:	4628      	mov	r0, r5
 800854a:	b003      	add	sp, #12
 800854c:	bd30      	pop	{r4, r5, pc}

0800854e <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800854e:	b082      	sub	sp, #8
  uint32_t USBx_BASE = (uint32_t)USBx;
  __IO uint32_t hprt0 = 0U;
 8008550:	2300      	movs	r3, #0
 8008552:	9301      	str	r3, [sp, #4]

  hprt0 = USBx_HPRT0;
 8008554:	f8d0 3440 	ldr.w	r3, [r0, #1088]	; 0x440
 8008558:	9301      	str	r3, [sp, #4]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800855a:	9b01      	ldr	r3, [sp, #4]
 800855c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8008560:	9301      	str	r3, [sp, #4]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8008562:	9b01      	ldr	r3, [sp, #4]
 8008564:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8008568:	d101      	bne.n	800856e <USB_DriveVbus+0x20>
 800856a:	2901      	cmp	r1, #1
 800856c:	d00c      	beq.n	8008588 <USB_DriveVbus+0x3a>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800856e:	9b01      	ldr	r3, [sp, #4]
 8008570:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8008574:	d005      	beq.n	8008582 <USB_DriveVbus+0x34>
 8008576:	b921      	cbnz	r1, 8008582 <USB_DriveVbus+0x34>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8008578:	9b01      	ldr	r3, [sp, #4]
 800857a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800857e:	f8c0 3440 	str.w	r3, [r0, #1088]	; 0x440
  }
  return HAL_OK;
}
 8008582:	2000      	movs	r0, #0
 8008584:	b002      	add	sp, #8
 8008586:	4770      	bx	lr
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8008588:	9b01      	ldr	r3, [sp, #4]
 800858a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800858e:	f8c0 3440 	str.w	r3, [r0, #1088]	; 0x440
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8008592:	9b01      	ldr	r3, [sp, #4]
 8008594:	e7f5      	b.n	8008582 <USB_DriveVbus+0x34>

08008596 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8008596:	b082      	sub	sp, #8
  uint32_t USBx_BASE = (uint32_t)USBx;
  __IO uint32_t hprt0 = 0U;
 8008598:	2300      	movs	r3, #0
 800859a:	9301      	str	r3, [sp, #4]

  hprt0 = USBx_HPRT0;
 800859c:	f8d0 3440 	ldr.w	r3, [r0, #1088]	; 0x440
 80085a0:	9301      	str	r3, [sp, #4]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80085a2:	9801      	ldr	r0, [sp, #4]
}
 80085a4:	f3c0 4041 	ubfx	r0, r0, #17, #2
 80085a8:	b002      	add	sp, #8
 80085aa:	4770      	bx	lr

080085ac <USB_GetCurrentFrame>:
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t USBx_BASE = (uint32_t)USBx;

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80085ac:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 80085b0:	6880      	ldr	r0, [r0, #8]
}
 80085b2:	b280      	uxth	r0, r0
 80085b4:	4770      	bx	lr

080085b6 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 80085b6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80085ba:	4691      	mov	r9, r2
 80085bc:	461c      	mov	r4, r3
 80085be:	f89d 5024 	ldrb.w	r5, [sp, #36]	; 0x24
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 80085c2:	eb00 1641 	add.w	r6, r0, r1, lsl #5
 80085c6:	f506 63a0 	add.w	r3, r6, #1280	; 0x500
 80085ca:	f04f 32ff 	mov.w	r2, #4294967295
 80085ce:	609a      	str	r2, [r3, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 80085d0:	2d03      	cmp	r5, #3
 80085d2:	d87a      	bhi.n	80086ca <USB_HC_Init+0x114>
 80085d4:	e8df f005 	tbb	[pc, r5]
 80085d8:	2a026e02 	.word	0x2a026e02
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80085dc:	f240 429d 	movw	r2, #1181	; 0x49d
 80085e0:	60da      	str	r2, [r3, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 80085e2:	f019 0f80 	tst.w	r9, #128	; 0x80
 80085e6:	d108      	bne.n	80085fa <USB_HC_Init+0x44>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
      }
      else
      {
        if ((USBx->CID & (0x1U << 8)) != 0U)
 80085e8:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80085ea:	f412 7f80 	tst.w	r2, #256	; 0x100
 80085ee:	d023      	beq.n	8008638 <USB_HC_Init+0x82>
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 80085f0:	68da      	ldr	r2, [r3, #12]
 80085f2:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 80085f6:	60da      	str	r2, [r3, #12]
 80085f8:	e01e      	b.n	8008638 <USB_HC_Init+0x82>
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80085fa:	68da      	ldr	r2, [r3, #12]
 80085fc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008600:	60da      	str	r2, [r3, #12]
      ret = HAL_ERROR;
      break;
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8008602:	68da      	ldr	r2, [r3, #12]
 8008604:	f042 0202 	orr.w	r2, r2, #2
 8008608:	60da      	str	r2, [r3, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800860a:	f8d0 2418 	ldr.w	r2, [r0, #1048]	; 0x418
 800860e:	f001 070f 	and.w	r7, r1, #15
 8008612:	2101      	movs	r1, #1
 8008614:	40b9      	lsls	r1, r7
 8008616:	4311      	orrs	r1, r2
 8008618:	f8c0 1418 	str.w	r1, [r0, #1048]	; 0x418

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800861c:	6983      	ldr	r3, [r0, #24]
 800861e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8008622:	6183      	str	r3, [r0, #24]
 8008624:	2700      	movs	r7, #0

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8008626:	f44f 4800 	mov.w	r8, #32768	; 0x8000
 800862a:	e019      	b.n	8008660 <USB_HC_Init+0xaa>
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800862c:	f240 629d 	movw	r2, #1693	; 0x69d
 8008630:	60da      	str	r2, [r3, #12]
      if ((epnum & 0x80U) == 0x80U)
 8008632:	f019 0f80 	tst.w	r9, #128	; 0x80
 8008636:	d138      	bne.n	80086aa <USB_HC_Init+0xf4>
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8008638:	68da      	ldr	r2, [r3, #12]
 800863a:	f042 0202 	orr.w	r2, r2, #2
 800863e:	60da      	str	r2, [r3, #12]
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8008640:	f8d0 7418 	ldr.w	r7, [r0, #1048]	; 0x418
 8008644:	f001 010f 	and.w	r1, r1, #15
 8008648:	2301      	movs	r3, #1
 800864a:	fa03 f101 	lsl.w	r1, r3, r1
 800864e:	4339      	orrs	r1, r7
 8008650:	f8c0 1418 	str.w	r1, [r0, #1048]	; 0x418
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8008654:	6983      	ldr	r3, [r0, #24]
 8008656:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800865a:	6183      	str	r3, [r0, #24]
 800865c:	2700      	movs	r7, #0
  }
  else
  {
    HCcharEpDir = 0U;
 800865e:	46b8      	mov	r8, r7
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8008660:	f7ff ff99 	bl	8008596 <USB_GetHostSpeed>

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8008664:	f89d 3020 	ldrb.w	r3, [sp, #32]
 8008668:	2b02      	cmp	r3, #2
 800866a:	d048      	beq.n	80086fe <USB_HC_Init+0x148>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
  }
  else
  {
    HCcharLowSpeed = 0U;
 800866c:	2100      	movs	r1, #0
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800866e:	05a3      	lsls	r3, r4, #22
 8008670:	f003 53fe 	and.w	r3, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8008674:	f8bd 4028 	ldrh.w	r4, [sp, #40]	; 0x28
 8008678:	f3c4 040a 	ubfx	r4, r4, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800867c:	4323      	orrs	r3, r4
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800867e:	ea4f 29c9 	mov.w	r9, r9, lsl #11
 8008682:	f409 49f0 	and.w	r9, r9, #30720	; 0x7800
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8008686:	ea43 0309 	orr.w	r3, r3, r9
 800868a:	04aa      	lsls	r2, r5, #18
 800868c:	f402 2240 	and.w	r2, r2, #786432	; 0xc0000
 8008690:	4313      	orrs	r3, r2
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8008692:	ea43 0308 	orr.w	r3, r3, r8
 8008696:	430b      	orrs	r3, r1
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008698:	f8c6 3500 	str.w	r3, [r6, #1280]	; 0x500

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 800869c:	f005 05fd 	and.w	r5, r5, #253	; 0xfd
 80086a0:	2d01      	cmp	r5, #1
 80086a2:	d032      	beq.n	800870a <USB_HC_Init+0x154>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
  }

  return ret;
}
 80086a4:	4638      	mov	r0, r7
 80086a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80086aa:	68da      	ldr	r2, [r3, #12]
 80086ac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80086b0:	60da      	str	r2, [r3, #12]
 80086b2:	e7a6      	b.n	8008602 <USB_HC_Init+0x4c>
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80086b4:	f240 2225 	movw	r2, #549	; 0x225
 80086b8:	60da      	str	r2, [r3, #12]
      if ((epnum & 0x80U) == 0x80U)
 80086ba:	f019 0f80 	tst.w	r9, #128	; 0x80
 80086be:	d0bb      	beq.n	8008638 <USB_HC_Init+0x82>
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80086c0:	68da      	ldr	r2, [r3, #12]
 80086c2:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80086c6:	60da      	str	r2, [r3, #12]
 80086c8:	e79b      	b.n	8008602 <USB_HC_Init+0x4c>
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 80086ca:	68da      	ldr	r2, [r3, #12]
 80086cc:	f042 0202 	orr.w	r2, r2, #2
 80086d0:	60da      	str	r2, [r3, #12]
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80086d2:	f8d0 7418 	ldr.w	r7, [r0, #1048]	; 0x418
 80086d6:	f001 010f 	and.w	r1, r1, #15
 80086da:	2301      	movs	r3, #1
 80086dc:	408b      	lsls	r3, r1
 80086de:	433b      	orrs	r3, r7
 80086e0:	f8c0 3418 	str.w	r3, [r0, #1048]	; 0x418
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80086e4:	6983      	ldr	r3, [r0, #24]
 80086e6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80086ea:	6183      	str	r3, [r0, #24]
      ret = HAL_ERROR;
 80086ec:	2701      	movs	r7, #1
 80086ee:	f019 0f80 	tst.w	r9, #128	; 0x80
 80086f2:	bf14      	ite	ne
 80086f4:	f44f 4800 	movne.w	r8, #32768	; 0x8000
 80086f8:	f04f 0800 	moveq.w	r8, #0
 80086fc:	e7b0      	b.n	8008660 <USB_HC_Init+0xaa>
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80086fe:	2802      	cmp	r0, #2
 8008700:	bf0c      	ite	eq
 8008702:	2100      	moveq	r1, #0
 8008704:	f44f 3100 	movne.w	r1, #131072	; 0x20000
 8008708:	e7b1      	b.n	800866e <USB_HC_Init+0xb8>
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800870a:	f8d6 3500 	ldr.w	r3, [r6, #1280]	; 0x500
 800870e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008712:	f8c6 3500 	str.w	r3, [r6, #1280]	; 0x500
  return ret;
 8008716:	e7c5      	b.n	80086a4 <USB_HC_Init+0xee>

08008718 <USB_HC_ReadInterrupt>:
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t USBx_BASE = (uint32_t)USBx;

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8008718:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 800871c:	6940      	ldr	r0, [r0, #20]
}
 800871e:	b280      	uxth	r0, r0
 8008720:	4770      	bx	lr

08008722 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8008722:	b430      	push	{r4, r5}
 8008724:	b082      	sub	sp, #8
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t hcnum = (uint32_t)hc_num;
  __IO uint32_t count = 0U;
 8008726:	2300      	movs	r3, #0
 8008728:	9301      	str	r3, [sp, #4]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800872a:	eb00 1141 	add.w	r1, r0, r1, lsl #5
 800872e:	f501 62a0 	add.w	r2, r1, #1280	; 0x500
 8008732:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 8008736:	0c9b      	lsrs	r3, r3, #18
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8008738:	f8d1 5500 	ldr.w	r5, [r1, #1280]	; 0x500

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 800873c:	6884      	ldr	r4, [r0, #8]
 800873e:	f014 0f20 	tst.w	r4, #32
 8008742:	d001      	beq.n	8008748 <USB_HC_Halt+0x26>
 8008744:	2d00      	cmp	r5, #0
 8008746:	da2d      	bge.n	80087a4 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8008748:	f013 0f01 	tst.w	r3, #1
 800874c:	d12e      	bne.n	80087ac <USB_HC_Halt+0x8a>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800874e:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 8008752:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008756:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800875a:	6883      	ldr	r3, [r0, #8]
 800875c:	f013 0f20 	tst.w	r3, #32
 8008760:	d120      	bne.n	80087a4 <USB_HC_Halt+0x82>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8008762:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8008764:	f413 0f7f 	tst.w	r3, #16711680	; 0xff0000
 8008768:	d116      	bne.n	8008798 <USB_HC_Halt+0x76>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800876a:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 800876e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008772:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008776:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 800877a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800877e:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
        do
        {
          count++;
 8008782:	9b01      	ldr	r3, [sp, #4]
 8008784:	3301      	adds	r3, #1
 8008786:	9301      	str	r3, [sp, #4]

          if (count > 1000U)
 8008788:	9b01      	ldr	r3, [sp, #4]
 800878a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800878e:	d809      	bhi.n	80087a4 <USB_HC_Halt+0x82>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008790:	6813      	ldr	r3, [r2, #0]
 8008792:	2b00      	cmp	r3, #0
 8008794:	dbf5      	blt.n	8008782 <USB_HC_Halt+0x60>
 8008796:	e005      	b.n	80087a4 <USB_HC_Halt+0x82>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008798:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 800879c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80087a0:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
    }
  }

  return HAL_OK;
}
 80087a4:	2000      	movs	r0, #0
 80087a6:	b002      	add	sp, #8
 80087a8:	bc30      	pop	{r4, r5}
 80087aa:	4770      	bx	lr
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80087ac:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 80087b0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80087b4:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80087b8:	f8d0 3410 	ldr.w	r3, [r0, #1040]	; 0x410
 80087bc:	f413 0f7f 	tst.w	r3, #16711680	; 0xff0000
 80087c0:	d116      	bne.n	80087f0 <USB_HC_Halt+0xce>
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80087c2:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 80087c6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80087ca:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80087ce:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 80087d2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80087d6:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
        count++;
 80087da:	9b01      	ldr	r3, [sp, #4]
 80087dc:	3301      	adds	r3, #1
 80087de:	9301      	str	r3, [sp, #4]
        if (count > 1000U)
 80087e0:	9b01      	ldr	r3, [sp, #4]
 80087e2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80087e6:	d8dd      	bhi.n	80087a4 <USB_HC_Halt+0x82>
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80087e8:	6813      	ldr	r3, [r2, #0]
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	dbf5      	blt.n	80087da <USB_HC_Halt+0xb8>
 80087ee:	e7d9      	b.n	80087a4 <USB_HC_Halt+0x82>
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80087f0:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 80087f4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80087f8:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
 80087fc:	e7d2      	b.n	80087a4 <USB_HC_Halt+0x82>
	...

08008800 <USB_DoPing>:
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t chnum = (uint32_t)ch_num;
  uint32_t num_packets = 1U;
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008800:	eb00 1141 	add.w	r1, r0, r1, lsl #5
 8008804:	4a06      	ldr	r2, [pc, #24]	; (8008820 <USB_DoPing+0x20>)
 8008806:	f8c1 2510 	str.w	r2, [r1, #1296]	; 0x510
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800880a:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800880e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008812:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8008816:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500

  return HAL_OK;
}
 800881a:	2000      	movs	r0, #0
 800881c:	4770      	bx	lr
 800881e:	bf00      	nop
 8008820:	80080000 	.word	0x80080000

08008824 <USB_HC_StartXfer>:
{
 8008824:	b530      	push	{r4, r5, lr}
 8008826:	b085      	sub	sp, #20
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8008828:	784b      	ldrb	r3, [r1, #1]
  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800882a:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 800882c:	f414 7f80 	tst.w	r4, #256	; 0x100
 8008830:	d007      	beq.n	8008842 <USB_HC_StartXfer+0x1e>
 8008832:	790c      	ldrb	r4, [r1, #4]
 8008834:	b92c      	cbnz	r4, 8008842 <USB_HC_StartXfer+0x1e>
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8008836:	2a01      	cmp	r2, #1
 8008838:	d064      	beq.n	8008904 <USB_HC_StartXfer+0xe0>
    if ((dma == 0U) && (hc->do_ping == 1U))
 800883a:	b912      	cbnz	r2, 8008842 <USB_HC_StartXfer+0x1e>
 800883c:	794c      	ldrb	r4, [r1, #5]
 800883e:	2c01      	cmp	r4, #1
 8008840:	d06d      	beq.n	800891e <USB_HC_StartXfer+0xfa>
  if (hc->xfer_len > 0U)
 8008842:	694d      	ldr	r5, [r1, #20]
 8008844:	2d00      	cmp	r5, #0
 8008846:	d06e      	beq.n	8008926 <USB_HC_StartXfer+0x102>
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8008848:	f8b1 c008 	ldrh.w	ip, [r1, #8]
 800884c:	1e6c      	subs	r4, r5, #1
 800884e:	4464      	add	r4, ip
 8008850:	fbb4 f4fc 	udiv	r4, r4, ip
 8008854:	b2a4      	uxth	r4, r4
 8008856:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
 800885a:	bf28      	it	cs
 800885c:	f44f 7480 	movcs.w	r4, #256	; 0x100
 8008860:	46a4      	mov	ip, r4
  if (hc->ep_is_in != 0U)
 8008862:	78cc      	ldrb	r4, [r1, #3]
 8008864:	b114      	cbz	r4, 800886c <USB_HC_StartXfer+0x48>
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8008866:	890d      	ldrh	r5, [r1, #8]
 8008868:	fb0c f505 	mul.w	r5, ip, r5
 800886c:	610d      	str	r5, [r1, #16]
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800886e:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 8008872:	f503 6ea0 	add.w	lr, r3, #1280	; 0x500
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8008876:	7a8c      	ldrb	r4, [r1, #10]
 8008878:	0764      	lsls	r4, r4, #29
 800887a:	f004 44c0 	and.w	r4, r4, #1610612736	; 0x60000000
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800887e:	ea44 44cc 	orr.w	r4, r4, ip, lsl #19
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008882:	f3c5 0512 	ubfx	r5, r5, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008886:	432c      	orrs	r4, r5
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008888:	f8c3 4510 	str.w	r4, [r3, #1296]	; 0x510
  if (dma != 0U)
 800888c:	b112      	cbz	r2, 8008894 <USB_HC_StartXfer+0x70>
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800888e:	68cc      	ldr	r4, [r1, #12]
 8008890:	f8c3 4514 	str.w	r4, [r3, #1300]	; 0x514
  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8008894:	f500 6c80 	add.w	ip, r0, #1024	; 0x400
 8008898:	f8dc 4008 	ldr.w	r4, [ip, #8]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800889c:	f8d3 5500 	ldr.w	r5, [r3, #1280]	; 0x500
 80088a0:	f025 5500 	bic.w	r5, r5, #536870912	; 0x20000000
 80088a4:	f8c3 5500 	str.w	r5, [r3, #1280]	; 0x500
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80088a8:	f8d3 5500 	ldr.w	r5, [r3, #1280]	; 0x500
  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 80088ac:	f084 0401 	eor.w	r4, r4, #1
 80088b0:	f004 0401 	and.w	r4, r4, #1
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80088b4:	ea45 7444 	orr.w	r4, r5, r4, lsl #29
 80088b8:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80088bc:	f8d3 4500 	ldr.w	r4, [r3, #1280]	; 0x500
 80088c0:	9403      	str	r4, [sp, #12]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80088c2:	9c03      	ldr	r4, [sp, #12]
 80088c4:	f024 4480 	bic.w	r4, r4, #1073741824	; 0x40000000
 80088c8:	9403      	str	r4, [sp, #12]
  if (hc->ep_is_in != 0U)
 80088ca:	78cc      	ldrb	r4, [r1, #3]
 80088cc:	2c00      	cmp	r4, #0
 80088ce:	d02d      	beq.n	800892c <USB_HC_StartXfer+0x108>
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80088d0:	9c03      	ldr	r4, [sp, #12]
 80088d2:	f444 4400 	orr.w	r4, r4, #32768	; 0x8000
 80088d6:	9403      	str	r4, [sp, #12]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80088d8:	9c03      	ldr	r4, [sp, #12]
 80088da:	f044 4400 	orr.w	r4, r4, #2147483648	; 0x80000000
 80088de:	9403      	str	r4, [sp, #12]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80088e0:	9c03      	ldr	r4, [sp, #12]
 80088e2:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500
  if (dma != 0U) /* dma mode */
 80088e6:	2a00      	cmp	r2, #0
 80088e8:	d137      	bne.n	800895a <USB_HC_StartXfer+0x136>
  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 80088ea:	78cb      	ldrb	r3, [r1, #3]
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d134      	bne.n	800895a <USB_HC_StartXfer+0x136>
 80088f0:	694b      	ldr	r3, [r1, #20]
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d031      	beq.n	800895a <USB_HC_StartXfer+0x136>
    switch (hc->ep_type)
 80088f6:	79ca      	ldrb	r2, [r1, #7]
 80088f8:	2a03      	cmp	r2, #3
 80088fa:	d827      	bhi.n	800894c <USB_HC_StartXfer+0x128>
 80088fc:	e8df f002 	tbb	[pc, r2]
 8008900:	301b301b 	.word	0x301b301b
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8008904:	79cc      	ldrb	r4, [r1, #7]
 8008906:	f014 0ffd 	tst.w	r4, #253	; 0xfd
 800890a:	d19a      	bne.n	8008842 <USB_HC_StartXfer+0x1e>
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 800890c:	eb00 1443 	add.w	r4, r0, r3, lsl #5
 8008910:	f8d4 550c 	ldr.w	r5, [r4, #1292]	; 0x50c
 8008914:	f025 0570 	bic.w	r5, r5, #112	; 0x70
 8008918:	f8c4 550c 	str.w	r5, [r4, #1292]	; 0x50c
 800891c:	e791      	b.n	8008842 <USB_HC_StartXfer+0x1e>
      (void)USB_DoPing(USBx, hc->ch_num);
 800891e:	4619      	mov	r1, r3
 8008920:	f7ff ff6e 	bl	8008800 <USB_DoPing>
      return HAL_OK;
 8008924:	e019      	b.n	800895a <USB_HC_StartXfer+0x136>
    num_packets = 1U;
 8008926:	f04f 0c01 	mov.w	ip, #1
 800892a:	e79a      	b.n	8008862 <USB_HC_StartXfer+0x3e>
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800892c:	9c03      	ldr	r4, [sp, #12]
 800892e:	f424 4400 	bic.w	r4, r4, #32768	; 0x8000
 8008932:	9403      	str	r4, [sp, #12]
 8008934:	e7d0      	b.n	80088d8 <USB_HC_StartXfer+0xb4>
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8008936:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8008938:	b292      	uxth	r2, r2
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800893a:	3303      	adds	r3, #3
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800893c:	f3c3 038f 	ubfx	r3, r3, #2, #16
 8008940:	429a      	cmp	r2, r3
 8008942:	d203      	bcs.n	800894c <USB_HC_StartXfer+0x128>
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8008944:	6983      	ldr	r3, [r0, #24]
 8008946:	f043 0320 	orr.w	r3, r3, #32
 800894a:	6183      	str	r3, [r0, #24]
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800894c:	2300      	movs	r3, #0
 800894e:	9300      	str	r3, [sp, #0]
 8008950:	8a8b      	ldrh	r3, [r1, #20]
 8008952:	784a      	ldrb	r2, [r1, #1]
 8008954:	68c9      	ldr	r1, [r1, #12]
 8008956:	f7ff fd03 	bl	8008360 <USB_WritePacket>
}
 800895a:	2000      	movs	r0, #0
 800895c:	b005      	add	sp, #20
 800895e:	bd30      	pop	{r4, r5, pc}
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8008960:	f8dc 2010 	ldr.w	r2, [ip, #16]
 8008964:	b292      	uxth	r2, r2
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8008966:	3303      	adds	r3, #3
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8008968:	f3c3 038f 	ubfx	r3, r3, #2, #16
 800896c:	429a      	cmp	r2, r3
 800896e:	d2ed      	bcs.n	800894c <USB_HC_StartXfer+0x128>
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8008970:	6983      	ldr	r3, [r0, #24]
 8008972:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008976:	6183      	str	r3, [r0, #24]
 8008978:	e7e8      	b.n	800894c <USB_HC_StartXfer+0x128>

0800897a <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800897a:	b530      	push	{r4, r5, lr}
 800897c:	b083      	sub	sp, #12
 800897e:	4604      	mov	r4, r0
  HAL_StatusTypeDef ret = HAL_OK;
  uint32_t USBx_BASE = (uint32_t)USBx;
  __IO uint32_t count = 0U;
 8008980:	2300      	movs	r3, #0
 8008982:	9301      	str	r3, [sp, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008984:	6883      	ldr	r3, [r0, #8]
 8008986:	f023 0301 	bic.w	r3, r3, #1
 800898a:	6083      	str	r3, [r0, #8]
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800898c:	2110      	movs	r1, #16
 800898e:	f7ff fc99 	bl	80082c4 <USB_FlushTxFifo>
 8008992:	4605      	mov	r5, r0
  {
    ret = HAL_ERROR;
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008994:	4620      	mov	r0, r4
 8008996:	f7ff fcbd 	bl	8008314 <USB_FlushRxFifo>
 800899a:	4305      	orrs	r5, r0
 800899c:	f015 0fff 	tst.w	r5, #255	; 0xff
  {
    ret = HAL_ERROR;
 80089a0:	bf14      	ite	ne
 80089a2:	2001      	movne	r0, #1
 80089a4:	2000      	moveq	r0, #0
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80089a6:	f504 61a0 	add.w	r1, r4, #1280	; 0x500
 80089aa:	f504 6ce0 	add.w	ip, r4, #1792	; 0x700
    ret = HAL_ERROR;
 80089ae:	460a      	mov	r2, r1
  {
    value = USBx_HC(i)->HCCHAR;
 80089b0:	6813      	ldr	r3, [r2, #0]
    value |=  USB_OTG_HCCHAR_CHDIS;
    value &= ~USB_OTG_HCCHAR_CHENA;
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80089b2:	f023 2380 	bic.w	r3, r3, #2147516416	; 0x80008000
 80089b6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    USBx_HC(i)->HCCHAR = value;
 80089ba:	f842 3b20 	str.w	r3, [r2], #32
  for (i = 0U; i <= 15U; i++)
 80089be:	4562      	cmp	r2, ip
 80089c0:	d1f6      	bne.n	80089b0 <USB_StopHost+0x36>
 80089c2:	e002      	b.n	80089ca <USB_StopHost+0x50>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80089c4:	3120      	adds	r1, #32
 80089c6:	4561      	cmp	r1, ip
 80089c8:	d011      	beq.n	80089ee <USB_StopHost+0x74>
  {
    value = USBx_HC(i)->HCCHAR;
 80089ca:	460a      	mov	r2, r1
 80089cc:	680b      	ldr	r3, [r1, #0]
    value |= USB_OTG_HCCHAR_CHDIS;
    value |= USB_OTG_HCCHAR_CHENA;
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80089ce:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80089d2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
    USBx_HC(i)->HCCHAR = value;
 80089d6:	600b      	str	r3, [r1, #0]

    do
    {
      count++;
 80089d8:	9b01      	ldr	r3, [sp, #4]
 80089da:	3301      	adds	r3, #1
 80089dc:	9301      	str	r3, [sp, #4]

      if (count > 1000U)
 80089de:	9b01      	ldr	r3, [sp, #4]
 80089e0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80089e4:	d8ee      	bhi.n	80089c4 <USB_StopHost+0x4a>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80089e6:	6813      	ldr	r3, [r2, #0]
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	dbf5      	blt.n	80089d8 <USB_StopHost+0x5e>
 80089ec:	e7ea      	b.n	80089c4 <USB_StopHost+0x4a>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 80089ee:	f04f 33ff 	mov.w	r3, #4294967295
 80089f2:	f8c4 3414 	str.w	r3, [r4, #1044]	; 0x414
  USBx->GINTSTS = 0xFFFFFFFFU;
 80089f6:	6163      	str	r3, [r4, #20]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80089f8:	68a3      	ldr	r3, [r4, #8]
 80089fa:	f043 0301 	orr.w	r3, r3, #1
 80089fe:	60a3      	str	r3, [r4, #8]

  (void)USB_EnableGlobalInt(USBx);

  return ret;
}
 8008a00:	b003      	add	sp, #12
 8008a02:	bd30      	pop	{r4, r5, pc}

08008a04 <USBH_CDC_SOFProcess>:
{
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
}
 8008a04:	2000      	movs	r0, #0
 8008a06:	4770      	bx	lr

08008a08 <USBH_CDC_ClassRequest>:
{
 8008a08:	b538      	push	{r3, r4, r5, lr}
 8008a0a:	4604      	mov	r4, r0
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008a0c:	f8d0 337c 	ldr.w	r3, [r0, #892]	; 0x37c
 8008a10:	69d9      	ldr	r1, [r3, #28]
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8008a12:	23a1      	movs	r3, #161	; 0xa1
 8008a14:	7403      	strb	r3, [r0, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8008a16:	2321      	movs	r3, #33	; 0x21
 8008a18:	7443      	strb	r3, [r0, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8008a1a:	2300      	movs	r3, #0
 8008a1c:	8243      	strh	r3, [r0, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8008a1e:	8283      	strh	r3, [r0, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8008a20:	2207      	movs	r2, #7
 8008a22:	82c2      	strh	r2, [r0, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8008a24:	3140      	adds	r1, #64	; 0x40
 8008a26:	f000 fd14 	bl	8009452 <USBH_CtlReq>
  if (status == USBH_OK)
 8008a2a:	4605      	mov	r5, r0
 8008a2c:	b920      	cbnz	r0, 8008a38 <USBH_CDC_ClassRequest+0x30>
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8008a2e:	f8d4 33d4 	ldr.w	r3, [r4, #980]	; 0x3d4
 8008a32:	2102      	movs	r1, #2
 8008a34:	4620      	mov	r0, r4
 8008a36:	4798      	blx	r3
}
 8008a38:	4628      	mov	r0, r5
 8008a3a:	bd38      	pop	{r3, r4, r5, pc}

08008a3c <USBH_CDC_InterfaceDeInit>:
{
 8008a3c:	b538      	push	{r3, r4, r5, lr}
 8008a3e:	4604      	mov	r4, r0
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008a40:	f8d0 337c 	ldr.w	r3, [r0, #892]	; 0x37c
 8008a44:	69dd      	ldr	r5, [r3, #28]
  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8008a46:	7829      	ldrb	r1, [r5, #0]
 8008a48:	b979      	cbnz	r1, 8008a6a <USBH_CDC_InterfaceDeInit+0x2e>
  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8008a4a:	7b29      	ldrb	r1, [r5, #12]
 8008a4c:	b9b1      	cbnz	r1, 8008a7c <USBH_CDC_InterfaceDeInit+0x40>
  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8008a4e:	7b69      	ldrb	r1, [r5, #13]
 8008a50:	b9f1      	cbnz	r1, 8008a90 <USBH_CDC_InterfaceDeInit+0x54>
  if ((phost->pActiveClass->pData) != NULL)
 8008a52:	f8d4 337c 	ldr.w	r3, [r4, #892]	; 0x37c
 8008a56:	69d8      	ldr	r0, [r3, #28]
 8008a58:	b128      	cbz	r0, 8008a66 <USBH_CDC_InterfaceDeInit+0x2a>
    USBH_free(phost->pActiveClass->pData);
 8008a5a:	f001 fa41 	bl	8009ee0 <free>
    phost->pActiveClass->pData = 0U;
 8008a5e:	f8d4 337c 	ldr.w	r3, [r4, #892]	; 0x37c
 8008a62:	2200      	movs	r2, #0
 8008a64:	61da      	str	r2, [r3, #28]
}
 8008a66:	2000      	movs	r0, #0
 8008a68:	bd38      	pop	{r3, r4, r5, pc}
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8008a6a:	f001 f855 	bl	8009b18 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8008a6e:	7829      	ldrb	r1, [r5, #0]
 8008a70:	4620      	mov	r0, r4
 8008a72:	f001 f875 	bl	8009b60 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8008a76:	2300      	movs	r3, #0
 8008a78:	702b      	strb	r3, [r5, #0]
 8008a7a:	e7e6      	b.n	8008a4a <USBH_CDC_InterfaceDeInit+0xe>
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8008a7c:	4620      	mov	r0, r4
 8008a7e:	f001 f84b 	bl	8009b18 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8008a82:	7b29      	ldrb	r1, [r5, #12]
 8008a84:	4620      	mov	r0, r4
 8008a86:	f001 f86b 	bl	8009b60 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8008a8a:	2300      	movs	r3, #0
 8008a8c:	732b      	strb	r3, [r5, #12]
 8008a8e:	e7de      	b.n	8008a4e <USBH_CDC_InterfaceDeInit+0x12>
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8008a90:	4620      	mov	r0, r4
 8008a92:	f001 f841 	bl	8009b18 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8008a96:	7b69      	ldrb	r1, [r5, #13]
 8008a98:	4620      	mov	r0, r4
 8008a9a:	f001 f861 	bl	8009b60 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8008a9e:	2300      	movs	r3, #0
 8008aa0:	736b      	strb	r3, [r5, #13]
 8008aa2:	e7d6      	b.n	8008a52 <USBH_CDC_InterfaceDeInit+0x16>

08008aa4 <USBH_CDC_InterfaceInit>:
{
 8008aa4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008aa6:	b085      	sub	sp, #20
 8008aa8:	4604      	mov	r4, r0
  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8008aaa:	2301      	movs	r3, #1
 8008aac:	2202      	movs	r2, #2
 8008aae:	4611      	mov	r1, r2
 8008ab0:	f000 fa03 	bl	8008eba <USBH_FindInterface>
  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8008ab4:	2801      	cmp	r0, #1
 8008ab6:	f200 80ae 	bhi.w	8008c16 <USBH_CDC_InterfaceInit+0x172>
 8008aba:	4606      	mov	r6, r0
  status = USBH_SelectInterface(phost, interface);
 8008abc:	4601      	mov	r1, r0
 8008abe:	4620      	mov	r0, r4
 8008ac0:	f000 f9f2 	bl	8008ea8 <USBH_SelectInterface>
  if (status != USBH_OK)
 8008ac4:	4607      	mov	r7, r0
 8008ac6:	2800      	cmp	r0, #0
 8008ac8:	f040 80a9 	bne.w	8008c1e <USBH_CDC_InterfaceInit+0x17a>
  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8008acc:	f8d4 537c 	ldr.w	r5, [r4, #892]	; 0x37c
 8008ad0:	2050      	movs	r0, #80	; 0x50
 8008ad2:	f001 f9fd 	bl	8009ed0 <malloc>
 8008ad6:	61e8      	str	r0, [r5, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008ad8:	f8d4 337c 	ldr.w	r3, [r4, #892]	; 0x37c
 8008adc:	69dd      	ldr	r5, [r3, #28]
  if (CDC_Handle == NULL)
 8008ade:	2d00      	cmp	r5, #0
 8008ae0:	f000 809f 	beq.w	8008c22 <USBH_CDC_InterfaceInit+0x17e>
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8008ae4:	2250      	movs	r2, #80	; 0x50
 8008ae6:	2100      	movs	r1, #0
 8008ae8:	4628      	mov	r0, r5
 8008aea:	f001 fa0f 	bl	8009f0c <memset>
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8008aee:	231a      	movs	r3, #26
 8008af0:	fb03 4306 	mla	r3, r3, r6, r4
 8008af4:	f893 234e 	ldrb.w	r2, [r3, #846]	; 0x34e
 8008af8:	f993 334e 	ldrsb.w	r3, [r3, #846]	; 0x34e
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	db72      	blt.n	8008be6 <USBH_CDC_InterfaceInit+0x142>
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8008b00:	7869      	ldrb	r1, [r5, #1]
 8008b02:	4620      	mov	r0, r4
 8008b04:	f001 f80d 	bl	8009b22 <USBH_AllocPipe>
 8008b08:	4601      	mov	r1, r0
 8008b0a:	7028      	strb	r0, [r5, #0]
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8008b0c:	786a      	ldrb	r2, [r5, #1]
 8008b0e:	896b      	ldrh	r3, [r5, #10]
 8008b10:	9302      	str	r3, [sp, #8]
 8008b12:	2303      	movs	r3, #3
 8008b14:	9301      	str	r3, [sp, #4]
 8008b16:	f894 331d 	ldrb.w	r3, [r4, #797]	; 0x31d
 8008b1a:	9300      	str	r3, [sp, #0]
 8008b1c:	f894 331c 	ldrb.w	r3, [r4, #796]	; 0x31c
 8008b20:	4620      	mov	r0, r4
 8008b22:	f000 ffe9 	bl	8009af8 <USBH_OpenPipe>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8008b26:	2200      	movs	r2, #0
 8008b28:	7829      	ldrb	r1, [r5, #0]
 8008b2a:	4620      	mov	r0, r4
 8008b2c:	f001 f91d 	bl	8009d6a <USBH_LL_SetToggle>
  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8008b30:	2300      	movs	r3, #0
 8008b32:	461a      	mov	r2, r3
 8008b34:	210a      	movs	r1, #10
 8008b36:	4620      	mov	r0, r4
 8008b38:	f000 f9bf 	bl	8008eba <USBH_FindInterface>
  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8008b3c:	2801      	cmp	r0, #1
 8008b3e:	d872      	bhi.n	8008c26 <USBH_CDC_InterfaceInit+0x182>
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8008b40:	231a      	movs	r3, #26
 8008b42:	fb03 4300 	mla	r3, r3, r0, r4
 8008b46:	f893 234e 	ldrb.w	r2, [r3, #846]	; 0x34e
 8008b4a:	f993 334e 	ldrsb.w	r3, [r3, #846]	; 0x34e
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	db51      	blt.n	8008bf6 <USBH_CDC_InterfaceInit+0x152>
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8008b52:	73aa      	strb	r2, [r5, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008b54:	231a      	movs	r3, #26
 8008b56:	fb03 4300 	mla	r3, r3, r0, r4
 8008b5a:	f8b3 3350 	ldrh.w	r3, [r3, #848]	; 0x350
 8008b5e:	832b      	strh	r3, [r5, #24]
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8008b60:	231a      	movs	r3, #26
 8008b62:	fb03 4300 	mla	r3, r3, r0, r4
 8008b66:	f893 2356 	ldrb.w	r2, [r3, #854]	; 0x356
 8008b6a:	f993 3356 	ldrsb.w	r3, [r3, #854]	; 0x356
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	db49      	blt.n	8008c06 <USBH_CDC_InterfaceInit+0x162>
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8008b72:	73aa      	strb	r2, [r5, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8008b74:	231a      	movs	r3, #26
 8008b76:	fb03 4000 	mla	r0, r3, r0, r4
 8008b7a:	f8b0 3358 	ldrh.w	r3, [r0, #856]	; 0x358
 8008b7e:	832b      	strh	r3, [r5, #24]
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8008b80:	7ba9      	ldrb	r1, [r5, #14]
 8008b82:	4620      	mov	r0, r4
 8008b84:	f000 ffcd 	bl	8009b22 <USBH_AllocPipe>
 8008b88:	7368      	strb	r0, [r5, #13]
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8008b8a:	7be9      	ldrb	r1, [r5, #15]
 8008b8c:	4620      	mov	r0, r4
 8008b8e:	f000 ffc8 	bl	8009b22 <USBH_AllocPipe>
 8008b92:	7328      	strb	r0, [r5, #12]
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8008b94:	7baa      	ldrb	r2, [r5, #14]
 8008b96:	7b69      	ldrb	r1, [r5, #13]
 8008b98:	8b2b      	ldrh	r3, [r5, #24]
 8008b9a:	9302      	str	r3, [sp, #8]
 8008b9c:	2602      	movs	r6, #2
 8008b9e:	9601      	str	r6, [sp, #4]
 8008ba0:	f894 331d 	ldrb.w	r3, [r4, #797]	; 0x31d
 8008ba4:	9300      	str	r3, [sp, #0]
 8008ba6:	f894 331c 	ldrb.w	r3, [r4, #796]	; 0x31c
 8008baa:	4620      	mov	r0, r4
 8008bac:	f000 ffa4 	bl	8009af8 <USBH_OpenPipe>
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8008bb0:	7bea      	ldrb	r2, [r5, #15]
 8008bb2:	7b29      	ldrb	r1, [r5, #12]
 8008bb4:	8b6b      	ldrh	r3, [r5, #26]
 8008bb6:	9302      	str	r3, [sp, #8]
 8008bb8:	9601      	str	r6, [sp, #4]
 8008bba:	f894 331d 	ldrb.w	r3, [r4, #797]	; 0x31d
 8008bbe:	9300      	str	r3, [sp, #0]
 8008bc0:	f894 331c 	ldrb.w	r3, [r4, #796]	; 0x31c
 8008bc4:	4620      	mov	r0, r4
 8008bc6:	f000 ff97 	bl	8009af8 <USBH_OpenPipe>
  CDC_Handle->state = CDC_IDLE_STATE;
 8008bca:	2600      	movs	r6, #0
 8008bcc:	f885 604c 	strb.w	r6, [r5, #76]	; 0x4c
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8008bd0:	4632      	mov	r2, r6
 8008bd2:	7b69      	ldrb	r1, [r5, #13]
 8008bd4:	4620      	mov	r0, r4
 8008bd6:	f001 f8c8 	bl	8009d6a <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8008bda:	4632      	mov	r2, r6
 8008bdc:	7b29      	ldrb	r1, [r5, #12]
 8008bde:	4620      	mov	r0, r4
 8008be0:	f001 f8c3 	bl	8009d6a <USBH_LL_SetToggle>
  return USBH_OK;
 8008be4:	e018      	b.n	8008c18 <USBH_CDC_InterfaceInit+0x174>
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8008be6:	706a      	strb	r2, [r5, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008be8:	201a      	movs	r0, #26
 8008bea:	fb00 4606 	mla	r6, r0, r6, r4
 8008bee:	f8b6 3350 	ldrh.w	r3, [r6, #848]	; 0x350
 8008bf2:	816b      	strh	r3, [r5, #10]
 8008bf4:	e784      	b.n	8008b00 <USBH_CDC_InterfaceInit+0x5c>
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8008bf6:	73ea      	strb	r2, [r5, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008bf8:	231a      	movs	r3, #26
 8008bfa:	fb03 4300 	mla	r3, r3, r0, r4
 8008bfe:	f8b3 3350 	ldrh.w	r3, [r3, #848]	; 0x350
 8008c02:	836b      	strh	r3, [r5, #26]
 8008c04:	e7ac      	b.n	8008b60 <USBH_CDC_InterfaceInit+0xbc>
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8008c06:	73ea      	strb	r2, [r5, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8008c08:	231a      	movs	r3, #26
 8008c0a:	fb03 4000 	mla	r0, r3, r0, r4
 8008c0e:	f8b0 3358 	ldrh.w	r3, [r0, #856]	; 0x358
 8008c12:	836b      	strh	r3, [r5, #26]
 8008c14:	e7b4      	b.n	8008b80 <USBH_CDC_InterfaceInit+0xdc>
    return USBH_FAIL;
 8008c16:	2702      	movs	r7, #2
}
 8008c18:	4638      	mov	r0, r7
 8008c1a:	b005      	add	sp, #20
 8008c1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return USBH_FAIL;
 8008c1e:	2702      	movs	r7, #2
 8008c20:	e7fa      	b.n	8008c18 <USBH_CDC_InterfaceInit+0x174>
    return USBH_FAIL;
 8008c22:	2702      	movs	r7, #2
 8008c24:	e7f8      	b.n	8008c18 <USBH_CDC_InterfaceInit+0x174>
    return USBH_FAIL;
 8008c26:	2702      	movs	r7, #2
 8008c28:	e7f6      	b.n	8008c18 <USBH_CDC_InterfaceInit+0x174>

08008c2a <USBH_CDC_TransmitCallback>:
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8008c2a:	4770      	bx	lr

08008c2c <USBH_CDC_ReceiveCallback>:
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8008c2c:	4770      	bx	lr

08008c2e <USBH_CDC_LineCodingChanged>:
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8008c2e:	4770      	bx	lr

08008c30 <USBH_CDC_Process>:
{
 8008c30:	b570      	push	{r4, r5, r6, lr}
 8008c32:	b082      	sub	sp, #8
 8008c34:	4604      	mov	r4, r0
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008c36:	f8d0 337c 	ldr.w	r3, [r0, #892]	; 0x37c
 8008c3a:	69de      	ldr	r6, [r3, #28]
  switch (CDC_Handle->state)
 8008c3c:	f896 504c 	ldrb.w	r5, [r6, #76]	; 0x4c
 8008c40:	2d04      	cmp	r5, #4
 8008c42:	f200 80d0 	bhi.w	8008de6 <USBH_CDC_Process+0x1b6>
 8008c46:	e8df f005 	tbb	[pc, r5]
 8008c4a:	035a      	.short	0x035a
 8008c4c:	4a1b      	.short	0x4a1b
 8008c4e:	c5          	.byte	0xc5
 8008c4f:	00          	.byte	0x00
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8008c50:	6cb1      	ldr	r1, [r6, #72]	; 0x48
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8008c52:	2321      	movs	r3, #33	; 0x21
 8008c54:	7403      	strb	r3, [r0, #16]
  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8008c56:	2320      	movs	r3, #32
 8008c58:	7443      	strb	r3, [r0, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8008c5a:	2300      	movs	r3, #0
 8008c5c:	8243      	strh	r3, [r0, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8008c5e:	8283      	strh	r3, [r0, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8008c60:	2207      	movs	r2, #7
 8008c62:	82c2      	strh	r2, [r0, #22]
  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8008c64:	f000 fbf5 	bl	8009452 <USBH_CtlReq>
      if (req_status == USBH_OK)
 8008c68:	b918      	cbnz	r0, 8008c72 <USBH_CDC_Process+0x42>
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8008c6a:	2302      	movs	r3, #2
 8008c6c:	f886 304c 	strb.w	r3, [r6, #76]	; 0x4c
 8008c70:	e045      	b.n	8008cfe <USBH_CDC_Process+0xce>
        if (req_status != USBH_BUSY)
 8008c72:	2801      	cmp	r0, #1
 8008c74:	f000 80b9 	beq.w	8008dea <USBH_CDC_Process+0x1ba>
          CDC_Handle->state = CDC_ERROR_STATE;
 8008c78:	2304      	movs	r3, #4
 8008c7a:	f886 304c 	strb.w	r3, [r6, #76]	; 0x4c
 8008c7e:	e03e      	b.n	8008cfe <USBH_CDC_Process+0xce>
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8008c80:	23a1      	movs	r3, #161	; 0xa1
 8008c82:	7403      	strb	r3, [r0, #16]
  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8008c84:	2321      	movs	r3, #33	; 0x21
 8008c86:	7443      	strb	r3, [r0, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8008c88:	2300      	movs	r3, #0
 8008c8a:	8243      	strh	r3, [r0, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8008c8c:	8283      	strh	r3, [r0, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8008c8e:	2207      	movs	r2, #7
 8008c90:	82c2      	strh	r2, [r0, #22]
  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8008c92:	f106 0140 	add.w	r1, r6, #64	; 0x40
 8008c96:	f000 fbdc 	bl	8009452 <USBH_CtlReq>
      if (req_status == USBH_OK)
 8008c9a:	4605      	mov	r5, r0
 8008c9c:	b9c0      	cbnz	r0, 8008cd0 <USBH_CDC_Process+0xa0>
        CDC_Handle->state = CDC_IDLE_STATE;
 8008c9e:	2300      	movs	r3, #0
 8008ca0:	f886 304c 	strb.w	r3, [r6, #76]	; 0x4c
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8008ca4:	6cb1      	ldr	r1, [r6, #72]	; 0x48
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8008ca6:	6c73      	ldr	r3, [r6, #68]	; 0x44
 8008ca8:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8008cac:	684b      	ldr	r3, [r1, #4]
 8008cae:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8008cb2:	429a      	cmp	r2, r3
 8008cb4:	d001      	beq.n	8008cba <USBH_CDC_Process+0x8a>
  USBH_StatusTypeDef status = USBH_BUSY;
 8008cb6:	2501      	movs	r5, #1
 8008cb8:	e021      	b.n	8008cfe <USBH_CDC_Process+0xce>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8008cba:	6c32      	ldr	r2, [r6, #64]	; 0x40
 8008cbc:	680b      	ldr	r3, [r1, #0]
 8008cbe:	429a      	cmp	r2, r3
 8008cc0:	d001      	beq.n	8008cc6 <USBH_CDC_Process+0x96>
  USBH_StatusTypeDef status = USBH_BUSY;
 8008cc2:	2501      	movs	r5, #1
 8008cc4:	e01b      	b.n	8008cfe <USBH_CDC_Process+0xce>
          USBH_CDC_LineCodingChanged(phost);
 8008cc6:	4620      	mov	r0, r4
 8008cc8:	f7ff ffb1 	bl	8008c2e <USBH_CDC_LineCodingChanged>
  USBH_StatusTypeDef status = USBH_BUSY;
 8008ccc:	2501      	movs	r5, #1
 8008cce:	e016      	b.n	8008cfe <USBH_CDC_Process+0xce>
        if (req_status != USBH_BUSY)
 8008cd0:	2801      	cmp	r0, #1
 8008cd2:	d014      	beq.n	8008cfe <USBH_CDC_Process+0xce>
          CDC_Handle->state = CDC_ERROR_STATE;
 8008cd4:	2304      	movs	r3, #4
 8008cd6:	f886 304c 	strb.w	r3, [r6, #76]	; 0x4c
  USBH_StatusTypeDef status = USBH_BUSY;
 8008cda:	2501      	movs	r5, #1
 8008cdc:	e00f      	b.n	8008cfe <USBH_CDC_Process+0xce>
  switch (CDC_Handle->data_tx_state)
 8008cde:	f896 304d 	ldrb.w	r3, [r6, #77]	; 0x4d
 8008ce2:	2b01      	cmp	r3, #1
 8008ce4:	d00e      	beq.n	8008d04 <USBH_CDC_Process+0xd4>
 8008ce6:	2b02      	cmp	r3, #2
 8008ce8:	d024      	beq.n	8008d34 <USBH_CDC_Process+0x104>
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008cea:	f8d4 337c 	ldr.w	r3, [r4, #892]	; 0x37c
 8008cee:	69de      	ldr	r6, [r3, #28]
  switch (CDC_Handle->data_rx_state)
 8008cf0:	f896 304e 	ldrb.w	r3, [r6, #78]	; 0x4e
 8008cf4:	2b03      	cmp	r3, #3
 8008cf6:	d03f      	beq.n	8008d78 <USBH_CDC_Process+0x148>
 8008cf8:	2b04      	cmp	r3, #4
 8008cfa:	d048      	beq.n	8008d8e <USBH_CDC_Process+0x15e>
 8008cfc:	2501      	movs	r5, #1
}
 8008cfe:	4628      	mov	r0, r5
 8008d00:	b002      	add	sp, #8
 8008d02:	bd70      	pop	{r4, r5, r6, pc}
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8008d04:	6a70      	ldr	r0, [r6, #36]	; 0x24
 8008d06:	8b32      	ldrh	r2, [r6, #24]
 8008d08:	4290      	cmp	r0, r2
 8008d0a:	d90a      	bls.n	8008d22 <USBH_CDC_Process+0xf2>
        (void)USBH_BulkSendData(phost,
 8008d0c:	7b73      	ldrb	r3, [r6, #13]
 8008d0e:	69f1      	ldr	r1, [r6, #28]
 8008d10:	2001      	movs	r0, #1
 8008d12:	9000      	str	r0, [sp, #0]
 8008d14:	4620      	mov	r0, r4
 8008d16:	f000 fec7 	bl	8009aa8 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8008d1a:	2302      	movs	r3, #2
 8008d1c:	f886 304d 	strb.w	r3, [r6, #77]	; 0x4d
      break;
 8008d20:	e7e3      	b.n	8008cea <USBH_CDC_Process+0xba>
        (void)USBH_BulkSendData(phost,
 8008d22:	7b73      	ldrb	r3, [r6, #13]
 8008d24:	69f1      	ldr	r1, [r6, #28]
 8008d26:	2201      	movs	r2, #1
 8008d28:	9200      	str	r2, [sp, #0]
 8008d2a:	b282      	uxth	r2, r0
 8008d2c:	4620      	mov	r0, r4
 8008d2e:	f000 febb 	bl	8009aa8 <USBH_BulkSendData>
 8008d32:	e7f2      	b.n	8008d1a <USBH_CDC_Process+0xea>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8008d34:	7b71      	ldrb	r1, [r6, #13]
 8008d36:	f001 f804 	bl	8009d42 <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
 8008d3a:	2801      	cmp	r0, #1
 8008d3c:	d005      	beq.n	8008d4a <USBH_CDC_Process+0x11a>
        if (URB_Status == USBH_URB_NOTREADY)
 8008d3e:	2802      	cmp	r0, #2
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8008d40:	bf04      	itt	eq
 8008d42:	2301      	moveq	r3, #1
 8008d44:	f886 304d 	strbeq.w	r3, [r6, #77]	; 0x4d
 8008d48:	e7cf      	b.n	8008cea <USBH_CDC_Process+0xba>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8008d4a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8008d4c:	8b32      	ldrh	r2, [r6, #24]
 8008d4e:	4293      	cmp	r3, r2
 8008d50:	d909      	bls.n	8008d66 <USBH_CDC_Process+0x136>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8008d52:	1a9b      	subs	r3, r3, r2
 8008d54:	6273      	str	r3, [r6, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8008d56:	69f1      	ldr	r1, [r6, #28]
 8008d58:	440a      	add	r2, r1
 8008d5a:	61f2      	str	r2, [r6, #28]
        if (CDC_Handle->TxDataLength > 0U)
 8008d5c:	b12b      	cbz	r3, 8008d6a <USBH_CDC_Process+0x13a>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8008d5e:	2301      	movs	r3, #1
 8008d60:	f886 304d 	strb.w	r3, [r6, #77]	; 0x4d
 8008d64:	e7c1      	b.n	8008cea <USBH_CDC_Process+0xba>
          CDC_Handle->TxDataLength = 0U;
 8008d66:	2300      	movs	r3, #0
 8008d68:	6273      	str	r3, [r6, #36]	; 0x24
          CDC_Handle->data_tx_state = CDC_IDLE;
 8008d6a:	2300      	movs	r3, #0
 8008d6c:	f886 304d 	strb.w	r3, [r6, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8008d70:	4620      	mov	r0, r4
 8008d72:	f7ff ff5a 	bl	8008c2a <USBH_CDC_TransmitCallback>
 8008d76:	e7b8      	b.n	8008cea <USBH_CDC_Process+0xba>
      (void)USBH_BulkReceiveData(phost,
 8008d78:	7b33      	ldrb	r3, [r6, #12]
 8008d7a:	8b72      	ldrh	r2, [r6, #26]
 8008d7c:	6a31      	ldr	r1, [r6, #32]
 8008d7e:	4620      	mov	r0, r4
 8008d80:	f000 feaa 	bl	8009ad8 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8008d84:	2304      	movs	r3, #4
 8008d86:	f886 304e 	strb.w	r3, [r6, #78]	; 0x4e
  USBH_StatusTypeDef status = USBH_BUSY;
 8008d8a:	2501      	movs	r5, #1
      break;
 8008d8c:	e7b7      	b.n	8008cfe <USBH_CDC_Process+0xce>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8008d8e:	7b31      	ldrb	r1, [r6, #12]
 8008d90:	4620      	mov	r0, r4
 8008d92:	f000 ffd6 	bl	8009d42 <USBH_LL_GetURBState>
 8008d96:	4605      	mov	r5, r0
      if (URB_Status == USBH_URB_DONE)
 8008d98:	2801      	cmp	r0, #1
 8008d9a:	d001      	beq.n	8008da0 <USBH_CDC_Process+0x170>
  USBH_StatusTypeDef status = USBH_BUSY;
 8008d9c:	2501      	movs	r5, #1
 8008d9e:	e7ae      	b.n	8008cfe <USBH_CDC_Process+0xce>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8008da0:	7b31      	ldrb	r1, [r6, #12]
 8008da2:	4620      	mov	r0, r4
 8008da4:	f000 ffc7 	bl	8009d36 <USBH_LL_GetLastXferSize>
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8008da8:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 8008daa:	4298      	cmp	r0, r3
 8008dac:	d00b      	beq.n	8008dc6 <USBH_CDC_Process+0x196>
 8008dae:	8b72      	ldrh	r2, [r6, #26]
 8008db0:	4290      	cmp	r0, r2
 8008db2:	d908      	bls.n	8008dc6 <USBH_CDC_Process+0x196>
          CDC_Handle->RxDataLength -= length ;
 8008db4:	1a1b      	subs	r3, r3, r0
 8008db6:	62b3      	str	r3, [r6, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8008db8:	6a33      	ldr	r3, [r6, #32]
 8008dba:	4403      	add	r3, r0
 8008dbc:	6233      	str	r3, [r6, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8008dbe:	2303      	movs	r3, #3
 8008dc0:	f886 304e 	strb.w	r3, [r6, #78]	; 0x4e
 8008dc4:	e79b      	b.n	8008cfe <USBH_CDC_Process+0xce>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8008dc6:	2300      	movs	r3, #0
 8008dc8:	f886 304e 	strb.w	r3, [r6, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8008dcc:	4620      	mov	r0, r4
 8008dce:	f7ff ff2d 	bl	8008c2c <USBH_CDC_ReceiveCallback>
 8008dd2:	e794      	b.n	8008cfe <USBH_CDC_Process+0xce>
      req_status = USBH_ClrFeature(phost, 0x00U);
 8008dd4:	2100      	movs	r1, #0
 8008dd6:	f000 fe1c 	bl	8009a12 <USBH_ClrFeature>
      if (req_status == USBH_OK)
 8008dda:	b940      	cbnz	r0, 8008dee <USBH_CDC_Process+0x1be>
        CDC_Handle->state = CDC_IDLE_STATE;
 8008ddc:	2300      	movs	r3, #0
 8008dde:	f886 304c 	strb.w	r3, [r6, #76]	; 0x4c
  USBH_StatusTypeDef status = USBH_BUSY;
 8008de2:	2501      	movs	r5, #1
 8008de4:	e78b      	b.n	8008cfe <USBH_CDC_Process+0xce>
 8008de6:	2501      	movs	r5, #1
 8008de8:	e789      	b.n	8008cfe <USBH_CDC_Process+0xce>
 8008dea:	4605      	mov	r5, r0
 8008dec:	e787      	b.n	8008cfe <USBH_CDC_Process+0xce>
 8008dee:	2501      	movs	r5, #1
 8008df0:	e785      	b.n	8008cfe <USBH_CDC_Process+0xce>

08008df2 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8008df2:	4684      	mov	ip, r0
  uint32_t i = 0U;

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8008df4:	f500 7360 	add.w	r3, r0, #896	; 0x380
 8008df8:	f500 7170 	add.w	r1, r0, #960	; 0x3c0
  {
    phost->Pipes[i] = 0U;
 8008dfc:	2200      	movs	r2, #0
 8008dfe:	f843 2f04 	str.w	r2, [r3, #4]!
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8008e02:	428b      	cmp	r3, r1
 8008e04:	d1fb      	bne.n	8008dfe <DeInitStateMachine+0xc>
 8008e06:	f20c 131b 	addw	r3, ip, #283	; 0x11b
 8008e0a:	f20c 311b 	addw	r1, ip, #795	; 0x31b
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
  {
    phost->device.Data[i] = 0U;
 8008e0e:	2200      	movs	r2, #0
 8008e10:	f803 2f01 	strb.w	r2, [r3, #1]!
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8008e14:	428b      	cmp	r3, r1
 8008e16:	d1fb      	bne.n	8008e10 <DeInitStateMachine+0x1e>
  }

  phost->gState = HOST_IDLE;
 8008e18:	2000      	movs	r0, #0
 8008e1a:	f88c 0000 	strb.w	r0, [ip]
  phost->EnumState = ENUM_IDLE;
 8008e1e:	f88c 0001 	strb.w	r0, [ip, #1]
  phost->RequestState = CMD_SEND;
 8008e22:	2301      	movs	r3, #1
 8008e24:	f88c 3002 	strb.w	r3, [ip, #2]
  phost->Timer = 0U;
 8008e28:	f8cc 03c4 	str.w	r0, [ip, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8008e2c:	f88c 3018 	strb.w	r3, [ip, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8008e30:	2240      	movs	r2, #64	; 0x40
 8008e32:	f88c 2006 	strb.w	r2, [ip, #6]
  phost->Control.errorcount = 0U;
 8008e36:	f88c 0019 	strb.w	r0, [ip, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8008e3a:	f88c 031c 	strb.w	r0, [ip, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8008e3e:	f88c 331d 	strb.w	r3, [ip, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8008e42:	f88c 031f 	strb.w	r0, [ip, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8008e46:	f88c 031e 	strb.w	r0, [ip, #798]	; 0x31e

  return USBH_OK;
}
 8008e4a:	4770      	bx	lr

08008e4c <USBH_Init>:
  if (phost == NULL)
 8008e4c:	b1d8      	cbz	r0, 8008e86 <USBH_Init+0x3a>
{
 8008e4e:	b570      	push	{r4, r5, r6, lr}
 8008e50:	460e      	mov	r6, r1
 8008e52:	4604      	mov	r4, r0
  phost->id = id;
 8008e54:	f880 23cc 	strb.w	r2, [r0, #972]	; 0x3cc
  phost->pActiveClass = NULL;
 8008e58:	2500      	movs	r5, #0
 8008e5a:	f8c0 537c 	str.w	r5, [r0, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8008e5e:	f8c0 5380 	str.w	r5, [r0, #896]	; 0x380
  (void)DeInitStateMachine(phost);
 8008e62:	f7ff ffc6 	bl	8008df2 <DeInitStateMachine>
  phost->device.PortEnabled = 0U;
 8008e66:	f884 5323 	strb.w	r5, [r4, #803]	; 0x323
  phost->device.is_connected = 0U;
 8008e6a:	f884 5320 	strb.w	r5, [r4, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8008e6e:	f884 5321 	strb.w	r5, [r4, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8008e72:	f884 5322 	strb.w	r5, [r4, #802]	; 0x322
  if (pUsrFunc != NULL)
 8008e76:	b10e      	cbz	r6, 8008e7c <USBH_Init+0x30>
    phost->pUser = pUsrFunc;
 8008e78:	f8c4 63d4 	str.w	r6, [r4, #980]	; 0x3d4
  (void)USBH_LL_Init(phost);
 8008e7c:	4620      	mov	r0, r4
 8008e7e:	f000 ff23 	bl	8009cc8 <USBH_LL_Init>
  return USBH_OK;
 8008e82:	2000      	movs	r0, #0
}
 8008e84:	bd70      	pop	{r4, r5, r6, pc}
    return USBH_FAIL;
 8008e86:	2002      	movs	r0, #2
}
 8008e88:	4770      	bx	lr

08008e8a <USBH_RegisterClass>:
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
  USBH_StatusTypeDef status = USBH_OK;

  if (pclass != NULL)
 8008e8a:	b149      	cbz	r1, 8008ea0 <USBH_RegisterClass+0x16>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8008e8c:	f8d0 3380 	ldr.w	r3, [r0, #896]	; 0x380
 8008e90:	b943      	cbnz	r3, 8008ea4 <USBH_RegisterClass+0x1a>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8008e92:	2301      	movs	r3, #1
 8008e94:	f8c0 3380 	str.w	r3, [r0, #896]	; 0x380
 8008e98:	f8c0 1378 	str.w	r1, [r0, #888]	; 0x378
      status = USBH_OK;
 8008e9c:	2000      	movs	r0, #0
 8008e9e:	4770      	bx	lr
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8008ea0:	2002      	movs	r0, #2
 8008ea2:	4770      	bx	lr
      status = USBH_FAIL;
 8008ea4:	2002      	movs	r0, #2
  }

  return status;
}
 8008ea6:	4770      	bx	lr

08008ea8 <USBH_SelectInterface>:
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
  USBH_StatusTypeDef status = USBH_OK;

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8008ea8:	f890 333c 	ldrb.w	r3, [r0, #828]	; 0x33c
 8008eac:	428b      	cmp	r3, r1
  {
    phost->device.current_interface = interface;
 8008eae:	bf86      	itte	hi
 8008eb0:	f880 1324 	strbhi.w	r1, [r0, #804]	; 0x324
  USBH_StatusTypeDef status = USBH_OK;
 8008eb4:	2000      	movhi	r0, #0
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8008eb6:	2002      	movls	r0, #2
  }

  return status;
}
 8008eb8:	4770      	bx	lr

08008eba <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8008eba:	b530      	push	{r4, r5, lr}
  uint8_t if_ix = 0U;

  pif = (USBH_InterfaceDescTypeDef *)NULL;
  pcfg = &phost->device.CfgDesc;

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8008ebc:	4684      	mov	ip, r0
{
 8008ebe:	f04f 0e00 	mov.w	lr, #0
 8008ec2:	e00c      	b.n	8008ede <USBH_FindInterface+0x24>
  {
    pif = &pcfg->Itf_Desc[if_ix];
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008ec4:	f895 4349 	ldrb.w	r4, [r5, #841]	; 0x349
 8008ec8:	429c      	cmp	r4, r3
 8008eca:	d019      	beq.n	8008f00 <USBH_FindInterface+0x46>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8008ecc:	2bff      	cmp	r3, #255	; 0xff
 8008ece:	d017      	beq.n	8008f00 <USBH_FindInterface+0x46>
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8008ed0:	f10e 0e01 	add.w	lr, lr, #1
 8008ed4:	f10c 0c1a 	add.w	ip, ip, #26
 8008ed8:	f1be 0f02 	cmp.w	lr, #2
 8008edc:	d00f      	beq.n	8008efe <USBH_FindInterface+0x44>
 8008ede:	fa5f f08e 	uxtb.w	r0, lr
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8008ee2:	4665      	mov	r5, ip
 8008ee4:	f89c 4347 	ldrb.w	r4, [ip, #839]	; 0x347
 8008ee8:	428c      	cmp	r4, r1
 8008eea:	d001      	beq.n	8008ef0 <USBH_FindInterface+0x36>
 8008eec:	29ff      	cmp	r1, #255	; 0xff
 8008eee:	d1ef      	bne.n	8008ed0 <USBH_FindInterface+0x16>
 8008ef0:	f895 4348 	ldrb.w	r4, [r5, #840]	; 0x348
 8008ef4:	4294      	cmp	r4, r2
 8008ef6:	d0e5      	beq.n	8008ec4 <USBH_FindInterface+0xa>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008ef8:	2aff      	cmp	r2, #255	; 0xff
 8008efa:	d1e9      	bne.n	8008ed0 <USBH_FindInterface+0x16>
 8008efc:	e7e2      	b.n	8008ec4 <USBH_FindInterface+0xa>
    {
      return  if_ix;
    }
    if_ix++;
  }
  return 0xFFU;
 8008efe:	20ff      	movs	r0, #255	; 0xff
}
 8008f00:	bd30      	pop	{r4, r5, pc}

08008f02 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8008f02:	b510      	push	{r4, lr}
 8008f04:	4604      	mov	r4, r0
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8008f06:	f000 ff50 	bl	8009daa <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8008f0a:	2101      	movs	r1, #1
 8008f0c:	4620      	mov	r0, r4
 8008f0e:	f000 ff1e 	bl	8009d4e <USBH_LL_DriverVBUS>

  return USBH_OK;
}
 8008f12:	2000      	movs	r0, #0
 8008f14:	bd10      	pop	{r4, pc}

08008f16 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8008f16:	b570      	push	{r4, r5, r6, lr}
 8008f18:	b086      	sub	sp, #24
 8008f1a:	4604      	mov	r4, r0
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8008f1c:	2302      	movs	r3, #2
 8008f1e:	f88d 3017 	strb.w	r3, [sp, #23]
  uint8_t idx = 0U;

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8008f22:	f890 3321 	ldrb.w	r3, [r0, #801]	; 0x321
 8008f26:	b2db      	uxtb	r3, r3
 8008f28:	2b01      	cmp	r3, #1
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8008f2a:	bf04      	itt	eq
 8008f2c:	2303      	moveq	r3, #3
 8008f2e:	7003      	strbeq	r3, [r0, #0]
  }

  switch (phost->gState)
 8008f30:	7803      	ldrb	r3, [r0, #0]
 8008f32:	b2db      	uxtb	r3, r3
 8008f34:	2b0b      	cmp	r3, #11
 8008f36:	d875      	bhi.n	8009024 <USBH_Process+0x10e>
 8008f38:	e8df f013 	tbh	[pc, r3, lsl #1]
 8008f3c:	001e000c 	.word	0x001e000c
 8008f40:	022a0040 	.word	0x022a0040
 8008f44:	00770074 	.word	0x00770074
 8008f48:	01b70209 	.word	0x01b70209
 8008f4c:	01cb01c1 	.word	0x01cb01c1
 8008f50:	022201e7 	.word	0x022201e7
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8008f54:	f890 3320 	ldrb.w	r3, [r0, #800]	; 0x320
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d063      	beq.n	8009024 <USBH_Process+0x10e>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8008f5c:	2301      	movs	r3, #1
 8008f5e:	7003      	strb	r3, [r0, #0]
        USBH_Delay(200U);
 8008f60:	20c8      	movs	r0, #200	; 0xc8
 8008f62:	f000 ff17 	bl	8009d94 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8008f66:	4620      	mov	r0, r4
 8008f68:	f000 ff2f 	bl	8009dca <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8008f6c:	2300      	movs	r3, #0
 8008f6e:	f884 331c 	strb.w	r3, [r4, #796]	; 0x31c
        phost->Timeout = 0U;
 8008f72:	f8c4 33c8 	str.w	r3, [r4, #968]	; 0x3c8
 8008f76:	e055      	b.n	8009024 <USBH_Process+0x10e>
      }
      break;

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8008f78:	f890 3323 	ldrb.w	r3, [r0, #803]	; 0x323
 8008f7c:	2b01      	cmp	r3, #1
 8008f7e:	d010      	beq.n	8008fa2 <USBH_Process+0x8c>
        phost->device.RstCnt = 0U;
        phost->gState = HOST_DEV_ATTACHED;
      }
      else
      {
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8008f80:	f8d0 33c8 	ldr.w	r3, [r0, #968]	; 0x3c8
 8008f84:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008f88:	d911      	bls.n	8008fae <USBH_Process+0x98>
        {
          phost->device.RstCnt++;
 8008f8a:	f890 331f 	ldrb.w	r3, [r0, #799]	; 0x31f
 8008f8e:	3301      	adds	r3, #1
 8008f90:	b2db      	uxtb	r3, r3
 8008f92:	f880 331f 	strb.w	r3, [r0, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8008f96:	2b03      	cmp	r3, #3
          {
            /* Buggy Device can't complete reset */
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
            phost->gState = HOST_ABORT_STATE;
 8008f98:	bf8c      	ite	hi
 8008f9a:	230d      	movhi	r3, #13
          }
          else
          {
            phost->gState = HOST_IDLE;
 8008f9c:	2300      	movls	r3, #0
 8008f9e:	7003      	strb	r3, [r0, #0]
 8008fa0:	e040      	b.n	8009024 <USBH_Process+0x10e>
        phost->device.RstCnt = 0U;
 8008fa2:	2300      	movs	r3, #0
 8008fa4:	f880 331f 	strb.w	r3, [r0, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8008fa8:	2302      	movs	r3, #2
 8008faa:	7003      	strb	r3, [r0, #0]
 8008fac:	e03a      	b.n	8009024 <USBH_Process+0x10e>
          }
        }
        else
        {
          phost->Timeout += 10U;
 8008fae:	330a      	adds	r3, #10
 8008fb0:	f8c0 33c8 	str.w	r3, [r0, #968]	; 0x3c8
          USBH_Delay(10U);
 8008fb4:	200a      	movs	r0, #10
 8008fb6:	f000 feed 	bl	8009d94 <USBH_Delay>
 8008fba:	e033      	b.n	8009024 <USBH_Process+0x10e>
#endif
      break;

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8008fbc:	f8d0 33d4 	ldr.w	r3, [r0, #980]	; 0x3d4
 8008fc0:	b10b      	cbz	r3, 8008fc6 <USBH_Process+0xb0>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8008fc2:	2104      	movs	r1, #4
 8008fc4:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8008fc6:	2064      	movs	r0, #100	; 0x64
 8008fc8:	f000 fee4 	bl	8009d94 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8008fcc:	4620      	mov	r0, r4
 8008fce:	f000 fea5 	bl	8009d1c <USBH_LL_GetSpeed>
 8008fd2:	f884 031d 	strb.w	r0, [r4, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8008fd6:	2305      	movs	r3, #5
 8008fd8:	7023      	strb	r3, [r4, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8008fda:	2100      	movs	r1, #0
 8008fdc:	4620      	mov	r0, r4
 8008fde:	f000 fda0 	bl	8009b22 <USBH_AllocPipe>
 8008fe2:	7160      	strb	r0, [r4, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8008fe4:	2180      	movs	r1, #128	; 0x80
 8008fe6:	4620      	mov	r0, r4
 8008fe8:	f000 fd9b 	bl	8009b22 <USBH_AllocPipe>
 8008fec:	4601      	mov	r1, r0
 8008fee:	7120      	strb	r0, [r4, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8008ff0:	79a3      	ldrb	r3, [r4, #6]
 8008ff2:	9302      	str	r3, [sp, #8]
 8008ff4:	2500      	movs	r5, #0
 8008ff6:	9501      	str	r5, [sp, #4]
 8008ff8:	f894 331d 	ldrb.w	r3, [r4, #797]	; 0x31d
 8008ffc:	9300      	str	r3, [sp, #0]
 8008ffe:	f894 331c 	ldrb.w	r3, [r4, #796]	; 0x31c
 8009002:	2280      	movs	r2, #128	; 0x80
 8009004:	4620      	mov	r0, r4
 8009006:	f000 fd77 	bl	8009af8 <USBH_OpenPipe>
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800900a:	79a3      	ldrb	r3, [r4, #6]
 800900c:	9302      	str	r3, [sp, #8]
 800900e:	9501      	str	r5, [sp, #4]
 8009010:	f894 331d 	ldrb.w	r3, [r4, #797]	; 0x31d
 8009014:	9300      	str	r3, [sp, #0]
 8009016:	f894 331c 	ldrb.w	r3, [r4, #796]	; 0x31c
 800901a:	462a      	mov	r2, r5
 800901c:	7961      	ldrb	r1, [r4, #5]
 800901e:	4620      	mov	r0, r4
 8009020:	f000 fd6a 	bl	8009af8 <USBH_OpenPipe>
    case HOST_ABORT_STATE:
    default :
      break;
  }
  return USBH_OK;
}
 8009024:	2000      	movs	r0, #0
 8009026:	b006      	add	sp, #24
 8009028:	bd70      	pop	{r4, r5, r6, pc}
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
  USBH_StatusTypeDef Status = USBH_BUSY;
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;

  switch (phost->EnumState)
 800902a:	7845      	ldrb	r5, [r0, #1]
 800902c:	2d07      	cmp	r5, #7
 800902e:	f200 813a 	bhi.w	80092a6 <USBH_Process+0x390>
 8009032:	e8df f015 	tbh	[pc, r5, lsl #1]
 8009036:	0008      	.short	0x0008
 8009038:	00690048 	.word	0x00690048
 800903c:	00bf009a 	.word	0x00bf009a
 8009040:	010e00e5 	.word	0x010e00e5
 8009044:	0127      	.short	0x0127
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8009046:	2108      	movs	r1, #8
 8009048:	f000 fafd 	bl	8009646 <USBH_Get_DevDesc>
      if (ReqStatus == USBH_OK)
 800904c:	b118      	cbz	r0, 8009056 <USBH_Process+0x140>
        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
      }
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800904e:	2803      	cmp	r0, #3
 8009050:	d021      	beq.n	8009096 <USBH_Process+0x180>
  USBH_StatusTypeDef Status = USBH_BUSY;
 8009052:	2501      	movs	r5, #1
 8009054:	e0da      	b.n	800920c <USBH_Process+0x2f6>
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8009056:	f894 332d 	ldrb.w	r3, [r4, #813]	; 0x32d
 800905a:	71a3      	strb	r3, [r4, #6]
        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800905c:	2501      	movs	r5, #1
 800905e:	7065      	strb	r5, [r4, #1]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8009060:	9302      	str	r3, [sp, #8]
 8009062:	2600      	movs	r6, #0
 8009064:	9601      	str	r6, [sp, #4]
 8009066:	f894 331d 	ldrb.w	r3, [r4, #797]	; 0x31d
 800906a:	9300      	str	r3, [sp, #0]
 800906c:	f894 331c 	ldrb.w	r3, [r4, #796]	; 0x31c
 8009070:	2280      	movs	r2, #128	; 0x80
 8009072:	7921      	ldrb	r1, [r4, #4]
 8009074:	4620      	mov	r0, r4
 8009076:	f000 fd3f 	bl	8009af8 <USBH_OpenPipe>
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800907a:	79a3      	ldrb	r3, [r4, #6]
 800907c:	9302      	str	r3, [sp, #8]
 800907e:	9601      	str	r6, [sp, #4]
 8009080:	f894 331d 	ldrb.w	r3, [r4, #797]	; 0x31d
 8009084:	9300      	str	r3, [sp, #0]
 8009086:	f894 331c 	ldrb.w	r3, [r4, #796]	; 0x31c
 800908a:	4632      	mov	r2, r6
 800908c:	7961      	ldrb	r1, [r4, #5]
 800908e:	4620      	mov	r0, r4
 8009090:	f000 fd32 	bl	8009af8 <USBH_OpenPipe>
 8009094:	e0ba      	b.n	800920c <USBH_Process+0x2f6>
      {
        USBH_ErrLog("Control error: Get Device Descriptor request failed");
        phost->device.EnumCnt++;
 8009096:	f894 331e 	ldrb.w	r3, [r4, #798]	; 0x31e
 800909a:	3301      	adds	r3, #1
 800909c:	b2db      	uxtb	r3, r3
 800909e:	f884 331e 	strb.w	r3, [r4, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80090a2:	2b03      	cmp	r3, #3
 80090a4:	d903      	bls.n	80090ae <USBH_Process+0x198>
        {
          /* Buggy Device can't complete get device desc request */
          USBH_UsrLog("Control error, Device not Responding Please unplug the Device.");
          phost->gState = HOST_ABORT_STATE;
 80090a6:	230d      	movs	r3, #13
 80090a8:	7023      	strb	r3, [r4, #0]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80090aa:	2501      	movs	r5, #1
 80090ac:	e0ae      	b.n	800920c <USBH_Process+0x2f6>
        }
        else
        {
          /* free control pipes */
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80090ae:	7961      	ldrb	r1, [r4, #5]
 80090b0:	4620      	mov	r0, r4
 80090b2:	f000 fd55 	bl	8009b60 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80090b6:	7921      	ldrb	r1, [r4, #4]
 80090b8:	4620      	mov	r0, r4
 80090ba:	f000 fd51 	bl	8009b60 <USBH_FreePipe>

          /* Reset the USB Device */
          phost->gState = HOST_IDLE;
 80090be:	2300      	movs	r3, #0
 80090c0:	7023      	strb	r3, [r4, #0]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80090c2:	2501      	movs	r5, #1
 80090c4:	e0a2      	b.n	800920c <USBH_Process+0x2f6>
      }
      break;

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 80090c6:	2112      	movs	r1, #18
 80090c8:	f000 fabd 	bl	8009646 <USBH_Get_DevDesc>
      if (ReqStatus == USBH_OK)
 80090cc:	b910      	cbnz	r0, 80090d4 <USBH_Process+0x1be>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 80090ce:	2302      	movs	r3, #2
 80090d0:	7063      	strb	r3, [r4, #1]
 80090d2:	e09b      	b.n	800920c <USBH_Process+0x2f6>
      }
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80090d4:	2803      	cmp	r0, #3
 80090d6:	f040 8099 	bne.w	800920c <USBH_Process+0x2f6>
      {
        USBH_ErrLog("Control error: Get Full Device Descriptor request failed");
        phost->device.EnumCnt++;
 80090da:	f894 331e 	ldrb.w	r3, [r4, #798]	; 0x31e
 80090de:	3301      	adds	r3, #1
 80090e0:	b2db      	uxtb	r3, r3
 80090e2:	f884 331e 	strb.w	r3, [r4, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80090e6:	2b03      	cmp	r3, #3
 80090e8:	d902      	bls.n	80090f0 <USBH_Process+0x1da>
        {
          /* Buggy Device can't complete get device desc request */
          USBH_UsrLog("Control error, Device not Responding Please unplug the Device.");
          phost->gState = HOST_ABORT_STATE;
 80090ea:	230d      	movs	r3, #13
 80090ec:	7023      	strb	r3, [r4, #0]
 80090ee:	e08d      	b.n	800920c <USBH_Process+0x2f6>
        }
        else
        {
          /* Free control pipes */
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80090f0:	7961      	ldrb	r1, [r4, #5]
 80090f2:	4620      	mov	r0, r4
 80090f4:	f000 fd34 	bl	8009b60 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80090f8:	7921      	ldrb	r1, [r4, #4]
 80090fa:	4620      	mov	r0, r4
 80090fc:	f000 fd30 	bl	8009b60 <USBH_FreePipe>

          /* Reset the USB Device */
          phost->EnumState = ENUM_IDLE;
 8009100:	2300      	movs	r3, #0
 8009102:	7063      	strb	r3, [r4, #1]
          phost->gState = HOST_IDLE;
 8009104:	7023      	strb	r3, [r4, #0]
 8009106:	e081      	b.n	800920c <USBH_Process+0x2f6>
      }
      break;

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8009108:	2101      	movs	r1, #1
 800910a:	f000 fc4f 	bl	80099ac <USBH_SetAddress>
      if (ReqStatus == USBH_OK)
 800910e:	b118      	cbz	r0, 8009118 <USBH_Process+0x202>
        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
      }
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009110:	2803      	cmp	r0, #3
 8009112:	d024      	beq.n	800915e <USBH_Process+0x248>
  USBH_StatusTypeDef Status = USBH_BUSY;
 8009114:	2501      	movs	r5, #1
 8009116:	e079      	b.n	800920c <USBH_Process+0x2f6>
        USBH_Delay(2U);
 8009118:	2002      	movs	r0, #2
 800911a:	f000 fe3b 	bl	8009d94 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800911e:	2501      	movs	r5, #1
 8009120:	f884 531c 	strb.w	r5, [r4, #796]	; 0x31c
        phost->EnumState = ENUM_GET_CFG_DESC;
 8009124:	2303      	movs	r3, #3
 8009126:	7063      	strb	r3, [r4, #1]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8009128:	79a3      	ldrb	r3, [r4, #6]
 800912a:	9302      	str	r3, [sp, #8]
 800912c:	2600      	movs	r6, #0
 800912e:	9601      	str	r6, [sp, #4]
 8009130:	f894 331d 	ldrb.w	r3, [r4, #797]	; 0x31d
 8009134:	9300      	str	r3, [sp, #0]
 8009136:	462b      	mov	r3, r5
 8009138:	2280      	movs	r2, #128	; 0x80
 800913a:	7921      	ldrb	r1, [r4, #4]
 800913c:	4620      	mov	r0, r4
 800913e:	f000 fcdb 	bl	8009af8 <USBH_OpenPipe>
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009142:	79a3      	ldrb	r3, [r4, #6]
 8009144:	9302      	str	r3, [sp, #8]
 8009146:	9601      	str	r6, [sp, #4]
 8009148:	f894 331d 	ldrb.w	r3, [r4, #797]	; 0x31d
 800914c:	9300      	str	r3, [sp, #0]
 800914e:	f894 331c 	ldrb.w	r3, [r4, #796]	; 0x31c
 8009152:	4632      	mov	r2, r6
 8009154:	7961      	ldrb	r1, [r4, #5]
 8009156:	4620      	mov	r0, r4
 8009158:	f000 fcce 	bl	8009af8 <USBH_OpenPipe>
 800915c:	e056      	b.n	800920c <USBH_Process+0x2f6>
      {
        USBH_ErrLog("Control error: Device Set Address request failed");

        /* Buggy Device can't complete get device desc request */
        USBH_UsrLog("Control error, Device not Responding Please unplug the Device.");
        phost->gState = HOST_ABORT_STATE;
 800915e:	230d      	movs	r3, #13
 8009160:	7023      	strb	r3, [r4, #0]
        phost->EnumState = ENUM_IDLE;
 8009162:	2300      	movs	r3, #0
 8009164:	7063      	strb	r3, [r4, #1]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8009166:	2501      	movs	r5, #1
 8009168:	e050      	b.n	800920c <USBH_Process+0x2f6>
      }
      break;

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800916a:	2109      	movs	r1, #9
 800916c:	f000 fad9 	bl	8009722 <USBH_Get_CfgDesc>
      if (ReqStatus == USBH_OK)
 8009170:	b918      	cbnz	r0, 800917a <USBH_Process+0x264>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8009172:	2304      	movs	r3, #4
 8009174:	7063      	strb	r3, [r4, #1]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8009176:	2501      	movs	r5, #1
 8009178:	e048      	b.n	800920c <USBH_Process+0x2f6>
      }
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800917a:	2803      	cmp	r0, #3
 800917c:	d001      	beq.n	8009182 <USBH_Process+0x26c>
  USBH_StatusTypeDef Status = USBH_BUSY;
 800917e:	2501      	movs	r5, #1
 8009180:	e044      	b.n	800920c <USBH_Process+0x2f6>
      {
        USBH_ErrLog("Control error: Get Device configuration descriptor request failed");
        phost->device.EnumCnt++;
 8009182:	f894 331e 	ldrb.w	r3, [r4, #798]	; 0x31e
 8009186:	3301      	adds	r3, #1
 8009188:	b2db      	uxtb	r3, r3
 800918a:	f884 331e 	strb.w	r3, [r4, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800918e:	2b03      	cmp	r3, #3
 8009190:	d903      	bls.n	800919a <USBH_Process+0x284>
        {
          /* Buggy Device can't complete get device desc request */
          USBH_UsrLog("Control error, Device not Responding Please unplug the Device.");
          phost->gState = HOST_ABORT_STATE;
 8009192:	230d      	movs	r3, #13
 8009194:	7023      	strb	r3, [r4, #0]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8009196:	2501      	movs	r5, #1
 8009198:	e038      	b.n	800920c <USBH_Process+0x2f6>
        }
        else
        {
          /* Free control pipes */
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800919a:	7961      	ldrb	r1, [r4, #5]
 800919c:	4620      	mov	r0, r4
 800919e:	f000 fcdf 	bl	8009b60 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80091a2:	7921      	ldrb	r1, [r4, #4]
 80091a4:	4620      	mov	r0, r4
 80091a6:	f000 fcdb 	bl	8009b60 <USBH_FreePipe>

          /* Reset the USB Device */
          phost->EnumState = ENUM_IDLE;
 80091aa:	2300      	movs	r3, #0
 80091ac:	7063      	strb	r3, [r4, #1]
          phost->gState = HOST_IDLE;
 80091ae:	7023      	strb	r3, [r4, #0]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80091b0:	2501      	movs	r5, #1
 80091b2:	e02b      	b.n	800920c <USBH_Process+0x2f6>
      }
      break;

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 80091b4:	f8b0 133a 	ldrh.w	r1, [r0, #826]	; 0x33a
 80091b8:	f000 fab3 	bl	8009722 <USBH_Get_CfgDesc>
      if (ReqStatus == USBH_OK)
 80091bc:	b918      	cbnz	r0, 80091c6 <USBH_Process+0x2b0>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 80091be:	2305      	movs	r3, #5
 80091c0:	7063      	strb	r3, [r4, #1]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80091c2:	2501      	movs	r5, #1
 80091c4:	e022      	b.n	800920c <USBH_Process+0x2f6>
      }
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80091c6:	2803      	cmp	r0, #3
 80091c8:	d001      	beq.n	80091ce <USBH_Process+0x2b8>
  USBH_StatusTypeDef Status = USBH_BUSY;
 80091ca:	2501      	movs	r5, #1
 80091cc:	e01e      	b.n	800920c <USBH_Process+0x2f6>
      {
        USBH_ErrLog("Control error: Get Device configuration descriptor request failed");
        phost->device.EnumCnt++;
 80091ce:	f894 331e 	ldrb.w	r3, [r4, #798]	; 0x31e
 80091d2:	3301      	adds	r3, #1
 80091d4:	b2db      	uxtb	r3, r3
 80091d6:	f884 331e 	strb.w	r3, [r4, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80091da:	2b03      	cmp	r3, #3
 80091dc:	d903      	bls.n	80091e6 <USBH_Process+0x2d0>
        {
          /* Buggy Device can't complete get device desc request */
          USBH_UsrLog("Control error, Device not Responding Please unplug the Device.");
          phost->gState = HOST_ABORT_STATE;
 80091de:	230d      	movs	r3, #13
 80091e0:	7023      	strb	r3, [r4, #0]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80091e2:	2501      	movs	r5, #1
 80091e4:	e012      	b.n	800920c <USBH_Process+0x2f6>
        }
        else
        {
          /* Free control pipes */
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80091e6:	7961      	ldrb	r1, [r4, #5]
 80091e8:	4620      	mov	r0, r4
 80091ea:	f000 fcb9 	bl	8009b60 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80091ee:	7921      	ldrb	r1, [r4, #4]
 80091f0:	4620      	mov	r0, r4
 80091f2:	f000 fcb5 	bl	8009b60 <USBH_FreePipe>

          /* Reset the USB Device */
          phost->EnumState = ENUM_IDLE;
 80091f6:	2300      	movs	r3, #0
 80091f8:	7063      	strb	r3, [r4, #1]
          phost->gState = HOST_IDLE;
 80091fa:	7023      	strb	r3, [r4, #0]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80091fc:	2501      	movs	r5, #1
 80091fe:	e005      	b.n	800920c <USBH_Process+0x2f6>
        /* .. */
      }
      break;

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8009200:	f890 1334 	ldrb.w	r1, [r0, #820]	; 0x334
 8009204:	b999      	cbnz	r1, 800922e <USBH_Process+0x318>
        }
      }
      else
      {
        USBH_UsrLog("Manufacturer : N/A");
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009206:	2306      	movs	r3, #6
 8009208:	7043      	strb	r3, [r0, #1]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800920a:	2501      	movs	r5, #1
      status = USBH_HandleEnum(phost);
 800920c:	f88d 5017 	strb.w	r5, [sp, #23]
      if (status == USBH_OK)
 8009210:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8009214:	2b00      	cmp	r3, #0
 8009216:	f47f af05 	bne.w	8009024 <USBH_Process+0x10e>
        phost->device.current_interface = 0U;
 800921a:	f884 3324 	strb.w	r3, [r4, #804]	; 0x324
        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800921e:	f894 3337 	ldrb.w	r3, [r4, #823]	; 0x337
 8009222:	2b01      	cmp	r3, #1
          phost->gState = HOST_SET_CONFIGURATION;
 8009224:	bf0c      	ite	eq
 8009226:	2308      	moveq	r3, #8
          phost->gState = HOST_INPUT;
 8009228:	2307      	movne	r3, #7
 800922a:	7023      	strb	r3, [r4, #0]
 800922c:	e6fa      	b.n	8009024 <USBH_Process+0x10e>
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800922e:	23ff      	movs	r3, #255	; 0xff
 8009230:	f500 728e 	add.w	r2, r0, #284	; 0x11c
 8009234:	f000 fb91 	bl	800995a <USBH_Get_StringDesc>
        if (ReqStatus == USBH_OK)
 8009238:	b918      	cbnz	r0, 8009242 <USBH_Process+0x32c>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800923a:	2306      	movs	r3, #6
 800923c:	7063      	strb	r3, [r4, #1]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800923e:	2501      	movs	r5, #1
 8009240:	e7e4      	b.n	800920c <USBH_Process+0x2f6>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009242:	2803      	cmp	r0, #3
 8009244:	d001      	beq.n	800924a <USBH_Process+0x334>
  USBH_StatusTypeDef Status = USBH_BUSY;
 8009246:	2501      	movs	r5, #1
 8009248:	e7e0      	b.n	800920c <USBH_Process+0x2f6>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800924a:	2306      	movs	r3, #6
 800924c:	7063      	strb	r3, [r4, #1]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800924e:	2501      	movs	r5, #1
 8009250:	e7dc      	b.n	800920c <USBH_Process+0x2f6>
#endif
      }
      break;

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8009252:	f890 1335 	ldrb.w	r1, [r0, #821]	; 0x335
 8009256:	b919      	cbnz	r1, 8009260 <USBH_Process+0x34a>
        }
      }
      else
      {
        USBH_UsrLog("Product : N/A");
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009258:	2307      	movs	r3, #7
 800925a:	7043      	strb	r3, [r0, #1]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800925c:	2501      	movs	r5, #1
 800925e:	e7d5      	b.n	800920c <USBH_Process+0x2f6>
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8009260:	23ff      	movs	r3, #255	; 0xff
 8009262:	f500 728e 	add.w	r2, r0, #284	; 0x11c
 8009266:	f000 fb78 	bl	800995a <USBH_Get_StringDesc>
        if (ReqStatus == USBH_OK)
 800926a:	b918      	cbnz	r0, 8009274 <USBH_Process+0x35e>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800926c:	2307      	movs	r3, #7
 800926e:	7063      	strb	r3, [r4, #1]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8009270:	2501      	movs	r5, #1
 8009272:	e7cb      	b.n	800920c <USBH_Process+0x2f6>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009274:	2803      	cmp	r0, #3
 8009276:	d001      	beq.n	800927c <USBH_Process+0x366>
  USBH_StatusTypeDef Status = USBH_BUSY;
 8009278:	2501      	movs	r5, #1
 800927a:	e7c7      	b.n	800920c <USBH_Process+0x2f6>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800927c:	2307      	movs	r3, #7
 800927e:	7063      	strb	r3, [r4, #1]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8009280:	2501      	movs	r5, #1
 8009282:	e7c3      	b.n	800920c <USBH_Process+0x2f6>
#endif
      }
      break;

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8009284:	f890 5336 	ldrb.w	r5, [r0, #822]	; 0x336
 8009288:	2d00      	cmp	r5, #0
 800928a:	d0bf      	beq.n	800920c <USBH_Process+0x2f6>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800928c:	23ff      	movs	r3, #255	; 0xff
 800928e:	f500 728e 	add.w	r2, r0, #284	; 0x11c
 8009292:	4629      	mov	r1, r5
 8009294:	f000 fb61 	bl	800995a <USBH_Get_StringDesc>
                                        phost->device.Data, 0xFFU);
        if (ReqStatus == USBH_OK)
 8009298:	4605      	mov	r5, r0
 800929a:	2800      	cmp	r0, #0
 800929c:	d0b6      	beq.n	800920c <USBH_Process+0x2f6>
  USBH_StatusTypeDef Status = USBH_BUSY;
 800929e:	1ec5      	subs	r5, r0, #3
 80092a0:	bf18      	it	ne
 80092a2:	2501      	movne	r5, #1
 80092a4:	e7b2      	b.n	800920c <USBH_Process+0x2f6>
  switch (phost->EnumState)
 80092a6:	2501      	movs	r5, #1
 80092a8:	e7b0      	b.n	800920c <USBH_Process+0x2f6>
      if (phost->pUser != NULL)
 80092aa:	f8d0 33d4 	ldr.w	r3, [r0, #980]	; 0x3d4
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	f43f aeb8 	beq.w	8009024 <USBH_Process+0x10e>
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 80092b4:	2101      	movs	r1, #1
 80092b6:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 80092b8:	2308      	movs	r3, #8
 80092ba:	7023      	strb	r3, [r4, #0]
 80092bc:	e6b2      	b.n	8009024 <USBH_Process+0x10e>
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 80092be:	f890 133d 	ldrb.w	r1, [r0, #829]	; 0x33d
 80092c2:	f000 fb84 	bl	80099ce <USBH_SetCfg>
 80092c6:	2800      	cmp	r0, #0
 80092c8:	f47f aeac 	bne.w	8009024 <USBH_Process+0x10e>
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 80092cc:	2309      	movs	r3, #9
 80092ce:	7023      	strb	r3, [r4, #0]
 80092d0:	e6a8      	b.n	8009024 <USBH_Process+0x10e>
      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 80092d2:	f890 333f 	ldrb.w	r3, [r0, #831]	; 0x33f
 80092d6:	f013 0f20 	tst.w	r3, #32
 80092da:	d102      	bne.n	80092e2 <USBH_Process+0x3cc>
        phost->gState = HOST_CHECK_CLASS;
 80092dc:	230a      	movs	r3, #10
 80092de:	7003      	strb	r3, [r0, #0]
 80092e0:	e6a0      	b.n	8009024 <USBH_Process+0x10e>
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 80092e2:	2101      	movs	r1, #1
 80092e4:	f000 fb84 	bl	80099f0 <USBH_SetFeature>
 80092e8:	f88d 0017 	strb.w	r0, [sp, #23]
        if (status == USBH_OK)
 80092ec:	f89d 3017 	ldrb.w	r3, [sp, #23]
 80092f0:	b913      	cbnz	r3, 80092f8 <USBH_Process+0x3e2>
          phost->gState = HOST_CHECK_CLASS;
 80092f2:	230a      	movs	r3, #10
 80092f4:	7023      	strb	r3, [r4, #0]
 80092f6:	e695      	b.n	8009024 <USBH_Process+0x10e>
        else if (status == USBH_NOT_SUPPORTED)
 80092f8:	f89d 3017 	ldrb.w	r3, [sp, #23]
 80092fc:	b2db      	uxtb	r3, r3
 80092fe:	2b03      	cmp	r3, #3
 8009300:	f47f ae90 	bne.w	8009024 <USBH_Process+0x10e>
          phost->gState = HOST_CHECK_CLASS;
 8009304:	230a      	movs	r3, #10
 8009306:	7023      	strb	r3, [r4, #0]
 8009308:	e68c      	b.n	8009024 <USBH_Process+0x10e>
      if (phost->ClassNumber == 0U)
 800930a:	f8d0 3380 	ldr.w	r3, [r0, #896]	; 0x380
 800930e:	2b00      	cmp	r3, #0
 8009310:	f43f ae88 	beq.w	8009024 <USBH_Process+0x10e>
        phost->pActiveClass = NULL;
 8009314:	2300      	movs	r3, #0
 8009316:	f8c0 337c 	str.w	r3, [r0, #892]	; 0x37c
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800931a:	f8d0 3378 	ldr.w	r3, [r0, #888]	; 0x378
 800931e:	7919      	ldrb	r1, [r3, #4]
 8009320:	f890 2347 	ldrb.w	r2, [r0, #839]	; 0x347
 8009324:	4291      	cmp	r1, r2
 8009326:	d002      	beq.n	800932e <USBH_Process+0x418>
          phost->gState = HOST_ABORT_STATE;
 8009328:	230d      	movs	r3, #13
 800932a:	7003      	strb	r3, [r0, #0]
 800932c:	e67a      	b.n	8009024 <USBH_Process+0x10e>
            phost->pActiveClass = phost->pClass[idx];
 800932e:	f8c0 337c 	str.w	r3, [r0, #892]	; 0x37c
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8009332:	689b      	ldr	r3, [r3, #8]
 8009334:	4798      	blx	r3
 8009336:	b938      	cbnz	r0, 8009348 <USBH_Process+0x432>
            phost->gState = HOST_CLASS_REQUEST;
 8009338:	2306      	movs	r3, #6
 800933a:	7023      	strb	r3, [r4, #0]
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800933c:	f8d4 33d4 	ldr.w	r3, [r4, #980]	; 0x3d4
 8009340:	2103      	movs	r1, #3
 8009342:	4620      	mov	r0, r4
 8009344:	4798      	blx	r3
 8009346:	e66d      	b.n	8009024 <USBH_Process+0x10e>
            phost->gState = HOST_ABORT_STATE;
 8009348:	230d      	movs	r3, #13
 800934a:	7023      	strb	r3, [r4, #0]
 800934c:	e66a      	b.n	8009024 <USBH_Process+0x10e>
      if (phost->pActiveClass != NULL)
 800934e:	f8d0 337c 	ldr.w	r3, [r0, #892]	; 0x37c
 8009352:	b193      	cbz	r3, 800937a <USBH_Process+0x464>
        status = phost->pActiveClass->Requests(phost);
 8009354:	691b      	ldr	r3, [r3, #16]
 8009356:	4798      	blx	r3
 8009358:	f88d 0017 	strb.w	r0, [sp, #23]
        if (status == USBH_OK)
 800935c:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8009360:	b913      	cbnz	r3, 8009368 <USBH_Process+0x452>
          phost->gState = HOST_CLASS;
 8009362:	230b      	movs	r3, #11
 8009364:	7023      	strb	r3, [r4, #0]
 8009366:	e65d      	b.n	8009024 <USBH_Process+0x10e>
        else if (status == USBH_FAIL)
 8009368:	f89d 3017 	ldrb.w	r3, [sp, #23]
 800936c:	b2db      	uxtb	r3, r3
 800936e:	2b02      	cmp	r3, #2
 8009370:	f47f ae58 	bne.w	8009024 <USBH_Process+0x10e>
          phost->gState = HOST_ABORT_STATE;
 8009374:	230d      	movs	r3, #13
 8009376:	7023      	strb	r3, [r4, #0]
          USBH_ErrLog("Device not responding Please Unplug.");
 8009378:	e654      	b.n	8009024 <USBH_Process+0x10e>
        phost->gState = HOST_ABORT_STATE;
 800937a:	230d      	movs	r3, #13
 800937c:	7003      	strb	r3, [r0, #0]
 800937e:	e651      	b.n	8009024 <USBH_Process+0x10e>
      if (phost->pActiveClass != NULL)
 8009380:	f8d0 337c 	ldr.w	r3, [r0, #892]	; 0x37c
 8009384:	2b00      	cmp	r3, #0
 8009386:	f43f ae4d 	beq.w	8009024 <USBH_Process+0x10e>
        phost->pActiveClass->BgndProcess(phost);
 800938a:	695b      	ldr	r3, [r3, #20]
 800938c:	4798      	blx	r3
 800938e:	e649      	b.n	8009024 <USBH_Process+0x10e>
      phost->device.is_disconnected = 0U;
 8009390:	2300      	movs	r3, #0
 8009392:	f880 3321 	strb.w	r3, [r0, #801]	; 0x321
      (void)DeInitStateMachine(phost);
 8009396:	f7ff fd2c 	bl	8008df2 <DeInitStateMachine>
      if (phost->pActiveClass != NULL)
 800939a:	f8d4 337c 	ldr.w	r3, [r4, #892]	; 0x37c
 800939e:	b12b      	cbz	r3, 80093ac <USBH_Process+0x496>
        phost->pActiveClass->DeInit(phost);
 80093a0:	68db      	ldr	r3, [r3, #12]
 80093a2:	4620      	mov	r0, r4
 80093a4:	4798      	blx	r3
        phost->pActiveClass = NULL;
 80093a6:	2300      	movs	r3, #0
 80093a8:	f8c4 337c 	str.w	r3, [r4, #892]	; 0x37c
      if (phost->pUser != NULL)
 80093ac:	f8d4 33d4 	ldr.w	r3, [r4, #980]	; 0x3d4
 80093b0:	b113      	cbz	r3, 80093b8 <USBH_Process+0x4a2>
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 80093b2:	2105      	movs	r1, #5
 80093b4:	4620      	mov	r0, r4
 80093b6:	4798      	blx	r3
      if (phost->device.is_ReEnumerated == 1U)
 80093b8:	f894 3322 	ldrb.w	r3, [r4, #802]	; 0x322
 80093bc:	b2db      	uxtb	r3, r3
 80093be:	2b01      	cmp	r3, #1
 80093c0:	d003      	beq.n	80093ca <USBH_Process+0x4b4>
        (void)USBH_LL_Start(phost);
 80093c2:	4620      	mov	r0, r4
 80093c4:	f000 fcf1 	bl	8009daa <USBH_LL_Start>
  return USBH_OK;
 80093c8:	e62c      	b.n	8009024 <USBH_Process+0x10e>
        phost->device.is_ReEnumerated = 0U;
 80093ca:	2300      	movs	r3, #0
 80093cc:	f884 3322 	strb.w	r3, [r4, #802]	; 0x322
        (void)USBH_Start(phost);
 80093d0:	4620      	mov	r0, r4
 80093d2:	f7ff fd96 	bl	8008f02 <USBH_Start>
 80093d6:	e625      	b.n	8009024 <USBH_Process+0x10e>

080093d8 <USBH_LL_SetTimer>:
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
  phost->Timer = time;
 80093d8:	f8c0 13c4 	str.w	r1, [r0, #964]	; 0x3c4
}
 80093dc:	4770      	bx	lr

080093de <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 80093de:	b508      	push	{r3, lr}
  phost->Timer++;
 80093e0:	f8d0 33c4 	ldr.w	r3, [r0, #964]	; 0x3c4
 80093e4:	3301      	adds	r3, #1
 80093e6:	f8c0 33c4 	str.w	r3, [r0, #964]	; 0x3c4
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 80093ea:	7803      	ldrb	r3, [r0, #0]
 80093ec:	b2db      	uxtb	r3, r3
 80093ee:	2b0b      	cmp	r3, #11
 80093f0:	d000      	beq.n	80093f4 <USBH_LL_IncTimer+0x16>
}
 80093f2:	bd08      	pop	{r3, pc}
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 80093f4:	f8d0 337c 	ldr.w	r3, [r0, #892]	; 0x37c
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d0fa      	beq.n	80093f2 <USBH_LL_IncTimer+0x14>
  {
    phost->pActiveClass->SOFProcess(phost);
 80093fc:	699b      	ldr	r3, [r3, #24]
 80093fe:	4798      	blx	r3
}
 8009400:	e7f7      	b.n	80093f2 <USBH_LL_IncTimer+0x14>

08009402 <USBH_LL_PortEnabled>:
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
  phost->device.PortEnabled = 1U;
 8009402:	2301      	movs	r3, #1
 8009404:	f880 3323 	strb.w	r3, [r0, #803]	; 0x323
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
}
 8009408:	4770      	bx	lr

0800940a <USBH_LL_PortDisabled>:
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
  phost->device.PortEnabled = 0U;
 800940a:	2300      	movs	r3, #0
 800940c:	f880 3323 	strb.w	r3, [r0, #803]	; 0x323

  return;
}
 8009410:	4770      	bx	lr

08009412 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8009412:	4603      	mov	r3, r0
  phost->device.is_connected = 1U;
 8009414:	2201      	movs	r2, #1
 8009416:	f880 2320 	strb.w	r2, [r0, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800941a:	2000      	movs	r0, #0
 800941c:	f883 0321 	strb.w	r0, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8009420:	f883 0322 	strb.w	r0, [r3, #802]	; 0x322
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
}
 8009424:	4770      	bx	lr

08009426 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8009426:	b538      	push	{r3, r4, r5, lr}
 8009428:	4604      	mov	r4, r0
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800942a:	2301      	movs	r3, #1
 800942c:	f880 3321 	strb.w	r3, [r0, #801]	; 0x321
  phost->device.is_connected = 0U;
 8009430:	2500      	movs	r5, #0
 8009432:	f880 5320 	strb.w	r5, [r0, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8009436:	f880 5323 	strb.w	r5, [r0, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800943a:	f000 fcbe 	bl	8009dba <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800943e:	7921      	ldrb	r1, [r4, #4]
 8009440:	4620      	mov	r0, r4
 8009442:	f000 fb8d 	bl	8009b60 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009446:	7961      	ldrb	r1, [r4, #5]
 8009448:	4620      	mov	r0, r4
 800944a:	f000 fb89 	bl	8009b60 <USBH_FreePipe>
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
}
 800944e:	4628      	mov	r0, r5
 8009450:	bd38      	pop	{r3, r4, r5, pc}

08009452 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8009452:	b570      	push	{r4, r5, r6, lr}
 8009454:	b082      	sub	sp, #8
 8009456:	4604      	mov	r4, r0
  USBH_StatusTypeDef status;
  status = USBH_BUSY;

  switch (phost->RequestState)
 8009458:	7885      	ldrb	r5, [r0, #2]
 800945a:	2d01      	cmp	r5, #1
 800945c:	d005      	beq.n	800946a <USBH_CtlReq+0x18>
 800945e:	2d02      	cmp	r5, #2
 8009460:	d00a      	beq.n	8009478 <USBH_CtlReq+0x26>
 8009462:	2501      	movs	r5, #1

    default:
      break;
  }
  return status;
}
 8009464:	4628      	mov	r0, r5
 8009466:	b002      	add	sp, #8
 8009468:	bd70      	pop	{r4, r5, r6, pc}
      phost->Control.buff = buff;
 800946a:	6081      	str	r1, [r0, #8]
      phost->Control.length = length;
 800946c:	8182      	strh	r2, [r0, #12]
      phost->Control.state = CTRL_SETUP;
 800946e:	2301      	movs	r3, #1
 8009470:	7603      	strb	r3, [r0, #24]
      phost->RequestState = CMD_WAIT;
 8009472:	2302      	movs	r3, #2
 8009474:	7083      	strb	r3, [r0, #2]
      break;
 8009476:	e7f5      	b.n	8009464 <USBH_CtlReq+0x12>
{
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;

  switch (phost->Control.state)
 8009478:	7e03      	ldrb	r3, [r0, #24]
 800947a:	3b01      	subs	r3, #1
 800947c:	2b0a      	cmp	r3, #10
 800947e:	f200 80bb 	bhi.w	80095f8 <USBH_CtlReq+0x1a6>
 8009482:	e8df f003 	tbb	[pc, r3]
 8009486:	0f06      	.short	0x0f06
 8009488:	5346372c 	.word	0x5346372c
 800948c:	8d807267 	.word	0x8d807267
 8009490:	9d          	.byte	0x9d
 8009491:	00          	.byte	0x00
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8009492:	7942      	ldrb	r2, [r0, #5]
 8009494:	f100 0110 	add.w	r1, r0, #16
 8009498:	f000 facd 	bl	8009a36 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800949c:	2302      	movs	r3, #2
 800949e:	7623      	strb	r3, [r4, #24]
  switch (phost->RequestState)
 80094a0:	2501      	movs	r5, #1
  return status;
 80094a2:	e7df      	b.n	8009464 <USBH_CtlReq+0x12>
      break;

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80094a4:	7941      	ldrb	r1, [r0, #5]
 80094a6:	f000 fc4c 	bl	8009d42 <USBH_LL_GetURBState>
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 80094aa:	2801      	cmp	r0, #1
 80094ac:	d006      	beq.n	80094bc <USBH_CtlReq+0x6a>
#endif
#endif
      }
      else
      {
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 80094ae:	2804      	cmp	r0, #4
 80094b0:	d001      	beq.n	80094b6 <USBH_CtlReq+0x64>
 80094b2:	2802      	cmp	r0, #2
 80094b4:	d1f4      	bne.n	80094a0 <USBH_CtlReq+0x4e>
        {
          phost->Control.state = CTRL_ERROR;
 80094b6:	230b      	movs	r3, #11
 80094b8:	7623      	strb	r3, [r4, #24]
 80094ba:	e7f1      	b.n	80094a0 <USBH_CtlReq+0x4e>
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 80094bc:	7c22      	ldrb	r2, [r4, #16]
        if (phost->Control.setup.b.wLength.w != 0U)
 80094be:	8ae3      	ldrh	r3, [r4, #22]
 80094c0:	b133      	cbz	r3, 80094d0 <USBH_CtlReq+0x7e>
          if (direction == USB_D2H)
 80094c2:	f012 0f80 	tst.w	r2, #128	; 0x80
            phost->Control.state = CTRL_DATA_IN;
 80094c6:	bf14      	ite	ne
 80094c8:	2303      	movne	r3, #3
            phost->Control.state = CTRL_DATA_OUT;
 80094ca:	2305      	moveq	r3, #5
 80094cc:	7623      	strb	r3, [r4, #24]
 80094ce:	e7e7      	b.n	80094a0 <USBH_CtlReq+0x4e>
          if (direction == USB_D2H)
 80094d0:	f012 0f80 	tst.w	r2, #128	; 0x80
            phost->Control.state = CTRL_STATUS_OUT;
 80094d4:	bf14      	ite	ne
 80094d6:	2309      	movne	r3, #9
            phost->Control.state = CTRL_STATUS_IN;
 80094d8:	2307      	moveq	r3, #7
 80094da:	7623      	strb	r3, [r4, #24]
 80094dc:	e7e0      	b.n	80094a0 <USBH_CtlReq+0x4e>
      }
      break;

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 80094de:	f8d0 33c4 	ldr.w	r3, [r0, #964]	; 0x3c4
 80094e2:	81c3      	strh	r3, [r0, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 80094e4:	7903      	ldrb	r3, [r0, #4]
 80094e6:	8982      	ldrh	r2, [r0, #12]
 80094e8:	6881      	ldr	r1, [r0, #8]
 80094ea:	f000 facd 	bl	8009a88 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 80094ee:	2304      	movs	r3, #4
 80094f0:	7623      	strb	r3, [r4, #24]
      break;
 80094f2:	e7d5      	b.n	80094a0 <USBH_CtlReq+0x4e>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80094f4:	7901      	ldrb	r1, [r0, #4]
 80094f6:	f000 fc24 	bl	8009d42 <USBH_LL_GetURBState>

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 80094fa:	2801      	cmp	r0, #1
 80094fc:	d006      	beq.n	800950c <USBH_CtlReq+0xba>
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 80094fe:	2805      	cmp	r0, #5
 8009500:	d03c      	beq.n	800957c <USBH_CtlReq+0x12a>
#endif
#endif
      }
      else
      {
        if (URB_Status == USBH_URB_ERROR)
 8009502:	2804      	cmp	r0, #4
 8009504:	d1cc      	bne.n	80094a0 <USBH_CtlReq+0x4e>
        {
          /* Device error */
          phost->Control.state = CTRL_ERROR;
 8009506:	230b      	movs	r3, #11
 8009508:	7623      	strb	r3, [r4, #24]
 800950a:	e7c9      	b.n	80094a0 <USBH_CtlReq+0x4e>
        phost->Control.state = CTRL_STATUS_OUT;
 800950c:	2309      	movs	r3, #9
 800950e:	7623      	strb	r3, [r4, #24]
      if (URB_Status == USBH_URB_STALL)
 8009510:	e7c6      	b.n	80094a0 <USBH_CtlReq+0x4e>
      }
      break;

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8009512:	2301      	movs	r3, #1
 8009514:	9300      	str	r3, [sp, #0]
 8009516:	7943      	ldrb	r3, [r0, #5]
 8009518:	8982      	ldrh	r2, [r0, #12]
 800951a:	6881      	ldr	r1, [r0, #8]
 800951c:	f000 fa9c 	bl	8009a58 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8009520:	f8d4 33c4 	ldr.w	r3, [r4, #964]	; 0x3c4
 8009524:	81e3      	strh	r3, [r4, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8009526:	2306      	movs	r3, #6
 8009528:	7623      	strb	r3, [r4, #24]
      break;
 800952a:	e7b9      	b.n	80094a0 <USBH_CtlReq+0x4e>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800952c:	7941      	ldrb	r1, [r0, #5]
 800952e:	f000 fc08 	bl	8009d42 <USBH_LL_GetURBState>

      if (URB_Status == USBH_URB_DONE)
 8009532:	2801      	cmp	r0, #1
 8009534:	d008      	beq.n	8009548 <USBH_CtlReq+0xf6>
#endif
#endif
      }

      /* handle error cases */
      else if (URB_Status == USBH_URB_STALL)
 8009536:	2805      	cmp	r0, #5
 8009538:	d020      	beq.n	800957c <USBH_CtlReq+0x12a>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      else if (URB_Status == USBH_URB_NOTREADY)
 800953a:	2802      	cmp	r0, #2
 800953c:	d007      	beq.n	800954e <USBH_CtlReq+0xfc>
#endif
#endif
      }
      else
      {
        if (URB_Status == USBH_URB_ERROR)
 800953e:	2804      	cmp	r0, #4
 8009540:	d1ae      	bne.n	80094a0 <USBH_CtlReq+0x4e>
        {
          /* device error */
          phost->Control.state = CTRL_ERROR;
 8009542:	230b      	movs	r3, #11
 8009544:	7623      	strb	r3, [r4, #24]
          status = USBH_FAIL;
 8009546:	e054      	b.n	80095f2 <USBH_CtlReq+0x1a0>
        phost->Control.state = CTRL_STATUS_IN;
 8009548:	2307      	movs	r3, #7
 800954a:	7623      	strb	r3, [r4, #24]
 800954c:	e7a8      	b.n	80094a0 <USBH_CtlReq+0x4e>
        phost->Control.state = CTRL_DATA_OUT;
 800954e:	2305      	movs	r3, #5
 8009550:	7623      	strb	r3, [r4, #24]
 8009552:	e7a5      	b.n	80094a0 <USBH_CtlReq+0x4e>
      }
      break;

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8009554:	7903      	ldrb	r3, [r0, #4]
 8009556:	2200      	movs	r2, #0
 8009558:	4611      	mov	r1, r2
 800955a:	f000 fa95 	bl	8009a88 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800955e:	f8d4 33c4 	ldr.w	r3, [r4, #964]	; 0x3c4
 8009562:	81e3      	strh	r3, [r4, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8009564:	2308      	movs	r3, #8
 8009566:	7623      	strb	r3, [r4, #24]

      break;
 8009568:	e79a      	b.n	80094a0 <USBH_CtlReq+0x4e>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800956a:	7901      	ldrb	r1, [r0, #4]
 800956c:	f000 fbe9 	bl	8009d42 <USBH_LL_GetURBState>

      if (URB_Status == USBH_URB_DONE)
 8009570:	2801      	cmp	r0, #1
 8009572:	d043      	beq.n	80095fc <USBH_CtlReq+0x1aa>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      else if (URB_Status == USBH_URB_ERROR)
 8009574:	2804      	cmp	r0, #4
 8009576:	d003      	beq.n	8009580 <USBH_CtlReq+0x12e>
#endif
#endif
      }
      else
      {
        if (URB_Status == USBH_URB_STALL)
 8009578:	2805      	cmp	r0, #5
 800957a:	d191      	bne.n	80094a0 <USBH_CtlReq+0x4e>
{
 800957c:	2503      	movs	r5, #3
 800957e:	e03e      	b.n	80095fe <USBH_CtlReq+0x1ac>
        phost->Control.state = CTRL_ERROR;
 8009580:	230b      	movs	r3, #11
 8009582:	7623      	strb	r3, [r4, #24]
 8009584:	e78c      	b.n	80094a0 <USBH_CtlReq+0x4e>
        }
      }
      break;

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8009586:	2301      	movs	r3, #1
 8009588:	9300      	str	r3, [sp, #0]
 800958a:	7943      	ldrb	r3, [r0, #5]
 800958c:	2200      	movs	r2, #0
 800958e:	4611      	mov	r1, r2
 8009590:	f000 fa62 	bl	8009a58 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8009594:	f8d4 33c4 	ldr.w	r3, [r4, #964]	; 0x3c4
 8009598:	81e3      	strh	r3, [r4, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800959a:	230a      	movs	r3, #10
 800959c:	7623      	strb	r3, [r4, #24]
      break;
 800959e:	e77f      	b.n	80094a0 <USBH_CtlReq+0x4e>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80095a0:	7941      	ldrb	r1, [r0, #5]
 80095a2:	f000 fbce 	bl	8009d42 <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
 80095a6:	2801      	cmp	r0, #1
 80095a8:	d028      	beq.n	80095fc <USBH_CtlReq+0x1aa>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      else if (URB_Status == USBH_URB_NOTREADY)
 80095aa:	2802      	cmp	r0, #2
 80095ac:	d005      	beq.n	80095ba <USBH_CtlReq+0x168>
#endif
#endif
      }
      else
      {
        if (URB_Status == USBH_URB_ERROR)
 80095ae:	2804      	cmp	r0, #4
 80095b0:	f47f af76 	bne.w	80094a0 <USBH_CtlReq+0x4e>
        {
          phost->Control.state = CTRL_ERROR;
 80095b4:	230b      	movs	r3, #11
 80095b6:	7623      	strb	r3, [r4, #24]
 80095b8:	e772      	b.n	80094a0 <USBH_CtlReq+0x4e>
        phost->Control.state = CTRL_STATUS_OUT;
 80095ba:	2309      	movs	r3, #9
 80095bc:	7623      	strb	r3, [r4, #24]
 80095be:	e76f      	b.n	80094a0 <USBH_CtlReq+0x4e>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 80095c0:	7e43      	ldrb	r3, [r0, #25]
 80095c2:	3301      	adds	r3, #1
 80095c4:	b2db      	uxtb	r3, r3
 80095c6:	7643      	strb	r3, [r0, #25]
 80095c8:	2b02      	cmp	r3, #2
 80095ca:	d803      	bhi.n	80095d4 <USBH_CtlReq+0x182>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 80095cc:	2301      	movs	r3, #1
 80095ce:	7603      	strb	r3, [r0, #24]
        phost->RequestState = CMD_SEND;
 80095d0:	7083      	strb	r3, [r0, #2]
 80095d2:	e765      	b.n	80094a0 <USBH_CtlReq+0x4e>
      }
      else
      {
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 80095d4:	f8d0 33d4 	ldr.w	r3, [r0, #980]	; 0x3d4
 80095d8:	2106      	movs	r1, #6
 80095da:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 80095dc:	2600      	movs	r6, #0
 80095de:	7666      	strb	r6, [r4, #25]
        USBH_ErrLog("Control error: Device not responding");

        /* Free control pipes */
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80095e0:	7961      	ldrb	r1, [r4, #5]
 80095e2:	4620      	mov	r0, r4
 80095e4:	f000 fabc 	bl	8009b60 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80095e8:	7921      	ldrb	r1, [r4, #4]
 80095ea:	4620      	mov	r0, r4
 80095ec:	f000 fab8 	bl	8009b60 <USBH_FreePipe>

        phost->gState = HOST_IDLE;
 80095f0:	7026      	strb	r6, [r4, #0]
        phost->RequestState = CMD_SEND;
 80095f2:	2301      	movs	r3, #1
 80095f4:	70a3      	strb	r3, [r4, #2]
 80095f6:	e735      	b.n	8009464 <USBH_CtlReq+0x12>
  switch (phost->Control.state)
 80095f8:	2501      	movs	r5, #1
 80095fa:	e733      	b.n	8009464 <USBH_CtlReq+0x12>
{
 80095fc:	2500      	movs	r5, #0
        phost->RequestState = CMD_SEND;
 80095fe:	2301      	movs	r3, #1
 8009600:	70a3      	strb	r3, [r4, #2]
        phost->Control.state = CTRL_IDLE;
 8009602:	2300      	movs	r3, #0
 8009604:	7623      	strb	r3, [r4, #24]
 8009606:	e72d      	b.n	8009464 <USBH_CtlReq+0x12>

08009608 <USBH_GetDescriptor>:
{
 8009608:	b508      	push	{r3, lr}
 800960a:	468e      	mov	lr, r1
 800960c:	4694      	mov	ip, r2
 800960e:	4619      	mov	r1, r3
 8009610:	f8bd 2008 	ldrh.w	r2, [sp, #8]
  if (phost->RequestState == CMD_SEND)
 8009614:	7883      	ldrb	r3, [r0, #2]
 8009616:	2b01      	cmp	r3, #1
 8009618:	d002      	beq.n	8009620 <USBH_GetDescriptor+0x18>
  return USBH_CtlReq(phost, buff, length);
 800961a:	f7ff ff1a 	bl	8009452 <USBH_CtlReq>
}
 800961e:	bd08      	pop	{r3, pc}
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8009620:	f06e 0e7f 	orn	lr, lr, #127	; 0x7f
 8009624:	f880 e010 	strb.w	lr, [r0, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8009628:	2306      	movs	r3, #6
 800962a:	7443      	strb	r3, [r0, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800962c:	f8a0 c012 	strh.w	ip, [r0, #18]
    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8009630:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
      phost->Control.setup.b.wIndex.w = 0U;
 8009634:	f5bc 7f40 	cmp.w	ip, #768	; 0x300
 8009638:	f240 4309 	movw	r3, #1033	; 0x409
 800963c:	bf18      	it	ne
 800963e:	2300      	movne	r3, #0
 8009640:	8283      	strh	r3, [r0, #20]
    phost->Control.setup.b.wLength.w = length;
 8009642:	82c2      	strh	r2, [r0, #22]
 8009644:	e7e9      	b.n	800961a <USBH_GetDescriptor+0x12>

08009646 <USBH_Get_DevDesc>:
{
 8009646:	b530      	push	{r4, r5, lr}
 8009648:	b083      	sub	sp, #12
 800964a:	4604      	mov	r4, r0
  status = USBH_GetDescriptor(phost,
 800964c:	460d      	mov	r5, r1
 800964e:	9100      	str	r1, [sp, #0]
 8009650:	f500 738e 	add.w	r3, r0, #284	; 0x11c
 8009654:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009658:	2100      	movs	r1, #0
 800965a:	f7ff ffd5 	bl	8009608 <USBH_GetDescriptor>
  if (status == USBH_OK)
 800965e:	b108      	cbz	r0, 8009664 <USBH_Get_DevDesc+0x1e>
}
 8009660:	b003      	add	sp, #12
 8009662:	bd30      	pop	{r4, r5, pc}
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8009664:	f894 311c 	ldrb.w	r3, [r4, #284]	; 0x11c
 8009668:	f884 3326 	strb.w	r3, [r4, #806]	; 0x326
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800966c:	f894 311d 	ldrb.w	r3, [r4, #285]	; 0x11d
 8009670:	f884 3327 	strb.w	r3, [r4, #807]	; 0x327
  dev_desc->bcdUSB             = LE16(buf +  2);
 8009674:	f894 211f 	ldrb.w	r2, [r4, #287]	; 0x11f
 8009678:	f894 311e 	ldrb.w	r3, [r4, #286]	; 0x11e
 800967c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8009680:	f8a4 3328 	strh.w	r3, [r4, #808]	; 0x328
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8009684:	f894 3120 	ldrb.w	r3, [r4, #288]	; 0x120
 8009688:	f884 332a 	strb.w	r3, [r4, #810]	; 0x32a
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800968c:	f894 3121 	ldrb.w	r3, [r4, #289]	; 0x121
 8009690:	f884 332b 	strb.w	r3, [r4, #811]	; 0x32b
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8009694:	f894 3122 	ldrb.w	r3, [r4, #290]	; 0x122
 8009698:	f884 332c 	strb.w	r3, [r4, #812]	; 0x32c
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800969c:	f894 2123 	ldrb.w	r2, [r4, #291]	; 0x123
  switch (dev_desc->bMaxPacketSize)
 80096a0:	2a20      	cmp	r2, #32
 80096a2:	d80f      	bhi.n	80096c4 <USBH_Get_DevDesc+0x7e>
 80096a4:	2a07      	cmp	r2, #7
 80096a6:	d909      	bls.n	80096bc <USBH_Get_DevDesc+0x76>
 80096a8:	f1a2 0308 	sub.w	r3, r2, #8
 80096ac:	b2d9      	uxtb	r1, r3
 80096ae:	2301      	movs	r3, #1
 80096b0:	408b      	lsls	r3, r1
 80096b2:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 80096b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80096ba:	b92b      	cbnz	r3, 80096c8 <USBH_Get_DevDesc+0x82>
      dev_desc->bMaxPacketSize = 64U;
 80096bc:	2340      	movs	r3, #64	; 0x40
 80096be:	f884 332d 	strb.w	r3, [r4, #813]	; 0x32d
      break;
 80096c2:	e003      	b.n	80096cc <USBH_Get_DevDesc+0x86>
  switch (dev_desc->bMaxPacketSize)
 80096c4:	2a40      	cmp	r2, #64	; 0x40
 80096c6:	d1f9      	bne.n	80096bc <USBH_Get_DevDesc+0x76>
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 80096c8:	f884 232d 	strb.w	r2, [r4, #813]	; 0x32d
  if (length > 8U)
 80096cc:	2d08      	cmp	r5, #8
 80096ce:	d9c7      	bls.n	8009660 <USBH_Get_DevDesc+0x1a>
    dev_desc->idVendor           = LE16(buf +  8);
 80096d0:	f894 2125 	ldrb.w	r2, [r4, #293]	; 0x125
 80096d4:	f894 3124 	ldrb.w	r3, [r4, #292]	; 0x124
 80096d8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80096dc:	f8a4 332e 	strh.w	r3, [r4, #814]	; 0x32e
    dev_desc->idProduct          = LE16(buf + 10);
 80096e0:	f894 2127 	ldrb.w	r2, [r4, #295]	; 0x127
 80096e4:	f894 3126 	ldrb.w	r3, [r4, #294]	; 0x126
 80096e8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80096ec:	f8a4 3330 	strh.w	r3, [r4, #816]	; 0x330
    dev_desc->bcdDevice          = LE16(buf + 12);
 80096f0:	f894 2129 	ldrb.w	r2, [r4, #297]	; 0x129
 80096f4:	f894 3128 	ldrb.w	r3, [r4, #296]	; 0x128
 80096f8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80096fc:	f8a4 3332 	strh.w	r3, [r4, #818]	; 0x332
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8009700:	f894 312a 	ldrb.w	r3, [r4, #298]	; 0x12a
 8009704:	f884 3334 	strb.w	r3, [r4, #820]	; 0x334
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8009708:	f894 312b 	ldrb.w	r3, [r4, #299]	; 0x12b
 800970c:	f884 3335 	strb.w	r3, [r4, #821]	; 0x335
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8009710:	f894 312c 	ldrb.w	r3, [r4, #300]	; 0x12c
 8009714:	f884 3336 	strb.w	r3, [r4, #822]	; 0x336
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8009718:	f894 312d 	ldrb.w	r3, [r4, #301]	; 0x12d
 800971c:	f884 3337 	strb.w	r3, [r4, #823]	; 0x337
 8009720:	e79e      	b.n	8009660 <USBH_Get_DevDesc+0x1a>

08009722 <USBH_Get_CfgDesc>:
{
 8009722:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009726:	b085      	sub	sp, #20
 8009728:	4605      	mov	r5, r0
 800972a:	460e      	mov	r6, r1
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800972c:	f100 041c 	add.w	r4, r0, #28
  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8009730:	9100      	str	r1, [sp, #0]
 8009732:	4623      	mov	r3, r4
 8009734:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009738:	2100      	movs	r1, #0
 800973a:	f7ff ff65 	bl	8009608 <USBH_GetDescriptor>
  if (status == USBH_OK)
 800973e:	b110      	cbz	r0, 8009746 <USBH_Get_CfgDesc+0x24>
}
 8009740:	b005      	add	sp, #20
 8009742:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8009746:	7f2a      	ldrb	r2, [r5, #28]
 8009748:	f885 2338 	strb.w	r2, [r5, #824]	; 0x338
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800974c:	7f6b      	ldrb	r3, [r5, #29]
 800974e:	f885 3339 	strb.w	r3, [r5, #825]	; 0x339
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8009752:	7fe9      	ldrb	r1, [r5, #31]
 8009754:	7fab      	ldrb	r3, [r5, #30]
 8009756:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800975a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800975e:	bf28      	it	cs
 8009760:	f44f 7380 	movcs.w	r3, #256	; 0x100
 8009764:	f8a5 333a 	strh.w	r3, [r5, #826]	; 0x33a
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8009768:	f895 3020 	ldrb.w	r3, [r5, #32]
 800976c:	f885 333c 	strb.w	r3, [r5, #828]	; 0x33c
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8009770:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
 8009774:	f885 333d 	strb.w	r3, [r5, #829]	; 0x33d
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8009778:	f895 3022 	ldrb.w	r3, [r5, #34]	; 0x22
 800977c:	f885 333e 	strb.w	r3, [r5, #830]	; 0x33e
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8009780:	f895 3023 	ldrb.w	r3, [r5, #35]	; 0x23
 8009784:	f885 333f 	strb.w	r3, [r5, #831]	; 0x33f
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8009788:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
 800978c:	f885 3340 	strb.w	r3, [r5, #832]	; 0x340
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 8009790:	2a09      	cmp	r2, #9
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8009792:	bf1c      	itt	ne
 8009794:	2309      	movne	r3, #9
 8009796:	f885 3338 	strbne.w	r3, [r5, #824]	; 0x338
  if (length > USB_CONFIGURATION_DESC_SIZE)
 800979a:	2e09      	cmp	r6, #9
 800979c:	d9d0      	bls.n	8009740 <USBH_Get_CfgDesc+0x1e>
 800979e:	46ab      	mov	fp, r5
  USBH_StatusTypeDef           status = USBH_OK;
 80097a0:	4606      	mov	r6, r0
  if (length > USB_CONFIGURATION_DESC_SIZE)
 80097a2:	2200      	movs	r2, #0
    ptr = USB_LEN_CFG_DESC;
 80097a4:	2309      	movs	r3, #9
        ep_ix = 0U;
 80097a6:	9003      	str	r0, [sp, #12]
 80097a8:	9002      	str	r0, [sp, #8]
 80097aa:	b2d7      	uxtb	r7, r2
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80097ac:	2a02      	cmp	r2, #2
 80097ae:	f000 80c8 	beq.w	8009942 <USBH_Get_CfgDesc+0x220>
 80097b2:	f8b5 133a 	ldrh.w	r1, [r5, #826]	; 0x33a
 80097b6:	4299      	cmp	r1, r3
 80097b8:	f240 80c3 	bls.w	8009942 <USBH_Get_CfgDesc+0x220>
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 80097bc:	7821      	ldrb	r1, [r4, #0]
 80097be:	440b      	add	r3, r1
 80097c0:	b29b      	uxth	r3, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 80097c2:	440c      	add	r4, r1
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 80097c4:	7861      	ldrb	r1, [r4, #1]
 80097c6:	2904      	cmp	r1, #4
 80097c8:	d1f0      	bne.n	80097ac <USBH_Get_CfgDesc+0x8a>
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 80097ca:	7821      	ldrb	r1, [r4, #0]
 80097cc:	2909      	cmp	r1, #9
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 80097ce:	bf1c      	itt	ne
 80097d0:	2109      	movne	r1, #9
 80097d2:	7021      	strbne	r1, [r4, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 80097d4:	7821      	ldrb	r1, [r4, #0]
 80097d6:	465f      	mov	r7, fp
 80097d8:	f88b 1342 	strb.w	r1, [fp, #834]	; 0x342
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 80097dc:	7861      	ldrb	r1, [r4, #1]
 80097de:	f88b 1343 	strb.w	r1, [fp, #835]	; 0x343
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 80097e2:	78a1      	ldrb	r1, [r4, #2]
 80097e4:	f88b 1344 	strb.w	r1, [fp, #836]	; 0x344
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 80097e8:	78e1      	ldrb	r1, [r4, #3]
 80097ea:	f88b 1345 	strb.w	r1, [fp, #837]	; 0x345
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 80097ee:	7920      	ldrb	r0, [r4, #4]
 80097f0:	f88b 0346 	strb.w	r0, [fp, #838]	; 0x346
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 80097f4:	7961      	ldrb	r1, [r4, #5]
 80097f6:	f88b 1347 	strb.w	r1, [fp, #839]	; 0x347
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 80097fa:	79a1      	ldrb	r1, [r4, #6]
 80097fc:	f88b 1348 	strb.w	r1, [fp, #840]	; 0x348
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8009800:	79e1      	ldrb	r1, [r4, #7]
 8009802:	f88b 1349 	strb.w	r1, [fp, #841]	; 0x349
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8009806:	7a21      	ldrb	r1, [r4, #8]
 8009808:	f88b 134a 	strb.w	r1, [fp, #842]	; 0x34a
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800980c:	2800      	cmp	r0, #0
 800980e:	f000 8094 	beq.w	800993a <USBH_Get_CfgDesc+0x218>
        ep_ix = 0U;
 8009812:	9903      	ldr	r1, [sp, #12]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8009814:	f04f 0c1a 	mov.w	ip, #26
 8009818:	fb0c f902 	mul.w	r9, ip, r2
 800981c:	e01b      	b.n	8009856 <USBH_Get_CfgDesc+0x134>
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 800981e:	f897 0348 	ldrb.w	r0, [r7, #840]	; 0x348
 8009822:	2802      	cmp	r0, #2
 8009824:	d126      	bne.n	8009874 <USBH_Get_CfgDesc+0x152>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8009826:	f897 0349 	ldrb.w	r0, [r7, #841]	; 0x349
 800982a:	bb40      	cbnz	r0, 800987e <USBH_Get_CfgDesc+0x15c>
 800982c:	7820      	ldrb	r0, [r4, #0]
 800982e:	2809      	cmp	r0, #9
 8009830:	d025      	beq.n	800987e <USBH_Get_CfgDesc+0x15c>
                pdesc->bLength = 0x09U;
 8009832:	f04f 0009 	mov.w	r0, #9
 8009836:	7020      	strb	r0, [r4, #0]
 8009838:	e021      	b.n	800987e <USBH_Get_CfgDesc+0x15c>
    status = USBH_NOT_SUPPORTED;
 800983a:	2603      	movs	r6, #3
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800983c:	f895 031d 	ldrb.w	r0, [r5, #797]	; 0x31d
 8009840:	2800      	cmp	r0, #0
 8009842:	d162      	bne.n	800990a <USBH_Get_CfgDesc+0x1e8>
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8009844:	f01e 0f01 	tst.w	lr, #1
 8009848:	d156      	bne.n	80098f8 <USBH_Get_CfgDesc+0x1d6>
            ep_ix++;
 800984a:	3101      	adds	r1, #1
 800984c:	b2c9      	uxtb	r1, r1
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800984e:	f897 0346 	ldrb.w	r0, [r7, #838]	; 0x346
 8009852:	4281      	cmp	r1, r0
 8009854:	d271      	bcs.n	800993a <USBH_Get_CfgDesc+0x218>
 8009856:	f8b5 c33a 	ldrh.w	ip, [r5, #826]	; 0x33a
 800985a:	459c      	cmp	ip, r3
 800985c:	d96b      	bls.n	8009936 <USBH_Get_CfgDesc+0x214>
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800985e:	7820      	ldrb	r0, [r4, #0]
 8009860:	4403      	add	r3, r0
 8009862:	b29b      	uxth	r3, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8009864:	4404      	add	r4, r0
          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8009866:	7860      	ldrb	r0, [r4, #1]
 8009868:	2805      	cmp	r0, #5
 800986a:	d1f0      	bne.n	800984e <USBH_Get_CfgDesc+0x12c>
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 800986c:	f897 0347 	ldrb.w	r0, [r7, #839]	; 0x347
 8009870:	2801      	cmp	r0, #1
 8009872:	d0d4      	beq.n	800981e <USBH_Get_CfgDesc+0xfc>
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 8009874:	7820      	ldrb	r0, [r4, #0]
 8009876:	2807      	cmp	r0, #7
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8009878:	bf1c      	itt	ne
 800987a:	2007      	movne	r0, #7
 800987c:	7020      	strbne	r0, [r4, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800987e:	7826      	ldrb	r6, [r4, #0]
 8009880:	1c48      	adds	r0, r1, #1
 8009882:	eb09 00c0 	add.w	r0, r9, r0, lsl #3
 8009886:	4428      	add	r0, r5
 8009888:	f880 6344 	strb.w	r6, [r0, #836]	; 0x344
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800988c:	7866      	ldrb	r6, [r4, #1]
 800988e:	f880 6345 	strb.w	r6, [r0, #837]	; 0x345
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8009892:	78a6      	ldrb	r6, [r4, #2]
 8009894:	f880 6346 	strb.w	r6, [r0, #838]	; 0x346
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8009898:	f894 e003 	ldrb.w	lr, [r4, #3]
 800989c:	f880 e347 	strb.w	lr, [r0, #839]	; 0x347
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 80098a0:	f894 8005 	ldrb.w	r8, [r4, #5]
 80098a4:	7926      	ldrb	r6, [r4, #4]
 80098a6:	ea46 2608 	orr.w	r6, r6, r8, lsl #8
 80098aa:	f8a0 6348 	strh.w	r6, [r0, #840]	; 0x348
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 80098ae:	f894 8006 	ldrb.w	r8, [r4, #6]
 80098b2:	f880 834a 	strb.w	r8, [r0, #842]	; 0x34a
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 80098b6:	2e00      	cmp	r6, #0
 80098b8:	d0bf      	beq.n	800983a <USBH_Get_CfgDesc+0x118>
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 80098ba:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
 80098be:	1c48      	adds	r0, r1, #1
 80098c0:	eb09 00c0 	add.w	r0, r9, r0, lsl #3
 80098c4:	4428      	add	r0, r5
 80098c6:	f8a0 6348 	strh.w	r6, [r0, #840]	; 0x348
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 80098ca:	b236      	sxth	r6, r6
 80098cc:	7960      	ldrb	r0, [r4, #5]
 80098ce:	f894 a004 	ldrb.w	sl, [r4, #4]
 80098d2:	ea4a 2a00 	orr.w	sl, sl, r0, lsl #8
 80098d6:	f41a 6fc0 	tst.w	sl, #1536	; 0x600
 80098da:	bf0c      	ite	eq
 80098dc:	f3ca 0a0a 	ubfxeq	sl, sl, #0, #11
 80098e0:	f44f 7a00 	movne.w	sl, #512	; 0x200
 80098e4:	1c48      	adds	r0, r1, #1
 80098e6:	eb09 00c0 	add.w	r0, r9, r0, lsl #3
 80098ea:	4428      	add	r0, r5
 80098ec:	ea46 060a 	orr.w	r6, r6, sl
 80098f0:	f8a0 6348 	strh.w	r6, [r0, #840]	; 0x348
  USBH_StatusTypeDef status = USBH_OK;
 80098f4:	9e02      	ldr	r6, [sp, #8]
 80098f6:	e7a1      	b.n	800983c <USBH_Get_CfgDesc+0x11a>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 80098f8:	f108 38ff 	add.w	r8, r8, #4294967295
 80098fc:	fa5f f888 	uxtb.w	r8, r8
        status = USBH_NOT_SUPPORTED;
 8009900:	f1b8 0f10 	cmp.w	r8, #16
 8009904:	bf28      	it	cs
 8009906:	2603      	movcs	r6, #3
 8009908:	e79f      	b.n	800984a <USBH_Get_CfgDesc+0x128>
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800990a:	f00e 0e03 	and.w	lr, lr, #3
 800990e:	f1be 0f01 	cmp.w	lr, #1
 8009912:	d007      	beq.n	8009924 <USBH_Get_CfgDesc+0x202>
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8009914:	f1be 0f03 	cmp.w	lr, #3
 8009918:	d197      	bne.n	800984a <USBH_Get_CfgDesc+0x128>
        status = USBH_NOT_SUPPORTED;
 800991a:	f1b8 0f00 	cmp.w	r8, #0
 800991e:	bf08      	it	eq
 8009920:	4676      	moveq	r6, lr
 8009922:	e792      	b.n	800984a <USBH_Get_CfgDesc+0x128>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8009924:	f108 38ff 	add.w	r8, r8, #4294967295
 8009928:	fa5f f888 	uxtb.w	r8, r8
        status = USBH_NOT_SUPPORTED;
 800992c:	f1b8 0f10 	cmp.w	r8, #16
 8009930:	bf28      	it	cs
 8009932:	2603      	movcs	r6, #3
 8009934:	e789      	b.n	800984a <USBH_Get_CfgDesc+0x128>
        if (ep_ix < pif->bNumEndpoints)
 8009936:	4288      	cmp	r0, r1
 8009938:	d80d      	bhi.n	8009956 <USBH_Get_CfgDesc+0x234>
        if_ix++;
 800993a:	3201      	adds	r2, #1
 800993c:	f10b 0b1a 	add.w	fp, fp, #26
 8009940:	e733      	b.n	80097aa <USBH_Get_CfgDesc+0x88>
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8009942:	f895 333c 	ldrb.w	r3, [r5, #828]	; 0x33c
 8009946:	2b02      	cmp	r3, #2
 8009948:	bf28      	it	cs
 800994a:	2302      	movcs	r3, #2
      return USBH_NOT_SUPPORTED;
 800994c:	42bb      	cmp	r3, r7
 800994e:	bf94      	ite	ls
 8009950:	4630      	movls	r0, r6
 8009952:	2003      	movhi	r0, #3
 8009954:	e6f4      	b.n	8009740 <USBH_Get_CfgDesc+0x1e>
          return USBH_NOT_SUPPORTED;
 8009956:	2003      	movs	r0, #3
 8009958:	e6f2      	b.n	8009740 <USBH_Get_CfgDesc+0x1e>

0800995a <USBH_Get_StringDesc>:
{
 800995a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800995c:	b083      	sub	sp, #12
 800995e:	4605      	mov	r5, r0
 8009960:	4614      	mov	r4, r2
 8009962:	461e      	mov	r6, r3
                              phost->device.Data, length);
 8009964:	f500 778e 	add.w	r7, r0, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8009968:	9300      	str	r3, [sp, #0]
 800996a:	463b      	mov	r3, r7
 800996c:	f441 7240 	orr.w	r2, r1, #768	; 0x300
 8009970:	2100      	movs	r1, #0
 8009972:	f7ff fe49 	bl	8009608 <USBH_GetDescriptor>
  if (status == USBH_OK)
 8009976:	b108      	cbz	r0, 800997c <USBH_Get_StringDesc+0x22>
}
 8009978:	b003      	add	sp, #12
 800997a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (psrc[1] == USB_DESC_TYPE_STRING)
 800997c:	f895 311d 	ldrb.w	r3, [r5, #285]	; 0x11d
 8009980:	2b03      	cmp	r3, #3
 8009982:	d1f9      	bne.n	8009978 <USBH_Get_StringDesc+0x1e>
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8009984:	f895 311c 	ldrb.w	r3, [r5, #284]	; 0x11c
 8009988:	3b02      	subs	r3, #2
 800998a:	429e      	cmp	r6, r3
 800998c:	bf28      	it	cs
 800998e:	461e      	movcs	r6, r3
 8009990:	b2b6      	uxth	r6, r6
    for (idx = 0U; idx < strlength; idx += 2U)
 8009992:	b146      	cbz	r6, 80099a6 <USBH_Get_StringDesc+0x4c>
 8009994:	2300      	movs	r3, #0
      *pdest =  psrc[idx];
 8009996:	18fa      	adds	r2, r7, r3
 8009998:	7892      	ldrb	r2, [r2, #2]
 800999a:	f804 2b01 	strb.w	r2, [r4], #1
    for (idx = 0U; idx < strlength; idx += 2U)
 800999e:	3302      	adds	r3, #2
 80099a0:	b29b      	uxth	r3, r3
 80099a2:	429e      	cmp	r6, r3
 80099a4:	d8f7      	bhi.n	8009996 <USBH_Get_StringDesc+0x3c>
    *pdest = 0U; /* mark end of string */
 80099a6:	2300      	movs	r3, #0
 80099a8:	7023      	strb	r3, [r4, #0]
 80099aa:	e7e5      	b.n	8009978 <USBH_Get_StringDesc+0x1e>

080099ac <USBH_SetAddress>:
{
 80099ac:	b508      	push	{r3, lr}
  if (phost->RequestState == CMD_SEND)
 80099ae:	7883      	ldrb	r3, [r0, #2]
 80099b0:	2b01      	cmp	r3, #1
 80099b2:	d004      	beq.n	80099be <USBH_SetAddress+0x12>
  return USBH_CtlReq(phost, NULL, 0U);
 80099b4:	2200      	movs	r2, #0
 80099b6:	4611      	mov	r1, r2
 80099b8:	f7ff fd4b 	bl	8009452 <USBH_CtlReq>
}
 80099bc:	bd08      	pop	{r3, pc}
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 80099be:	2300      	movs	r3, #0
 80099c0:	7403      	strb	r3, [r0, #16]
    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 80099c2:	2205      	movs	r2, #5
 80099c4:	7442      	strb	r2, [r0, #17]
    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 80099c6:	8241      	strh	r1, [r0, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80099c8:	8283      	strh	r3, [r0, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80099ca:	82c3      	strh	r3, [r0, #22]
 80099cc:	e7f2      	b.n	80099b4 <USBH_SetAddress+0x8>

080099ce <USBH_SetCfg>:
{
 80099ce:	b508      	push	{r3, lr}
  if (phost->RequestState == CMD_SEND)
 80099d0:	7883      	ldrb	r3, [r0, #2]
 80099d2:	2b01      	cmp	r3, #1
 80099d4:	d004      	beq.n	80099e0 <USBH_SetCfg+0x12>
  return USBH_CtlReq(phost, NULL, 0U);
 80099d6:	2200      	movs	r2, #0
 80099d8:	4611      	mov	r1, r2
 80099da:	f7ff fd3a 	bl	8009452 <USBH_CtlReq>
}
 80099de:	bd08      	pop	{r3, pc}
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80099e0:	2300      	movs	r3, #0
 80099e2:	7403      	strb	r3, [r0, #16]
    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 80099e4:	2209      	movs	r2, #9
 80099e6:	7442      	strb	r2, [r0, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 80099e8:	8241      	strh	r1, [r0, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80099ea:	8283      	strh	r3, [r0, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80099ec:	82c3      	strh	r3, [r0, #22]
 80099ee:	e7f2      	b.n	80099d6 <USBH_SetCfg+0x8>

080099f0 <USBH_SetFeature>:
{
 80099f0:	b508      	push	{r3, lr}
  if (phost->RequestState == CMD_SEND)
 80099f2:	7883      	ldrb	r3, [r0, #2]
 80099f4:	2b01      	cmp	r3, #1
 80099f6:	d004      	beq.n	8009a02 <USBH_SetFeature+0x12>
  return USBH_CtlReq(phost, NULL, 0U);
 80099f8:	2200      	movs	r2, #0
 80099fa:	4611      	mov	r1, r2
 80099fc:	f7ff fd29 	bl	8009452 <USBH_CtlReq>
}
 8009a00:	bd08      	pop	{r3, pc}
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8009a02:	2300      	movs	r3, #0
 8009a04:	7403      	strb	r3, [r0, #16]
    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8009a06:	2203      	movs	r2, #3
 8009a08:	7442      	strb	r2, [r0, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8009a0a:	8241      	strh	r1, [r0, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009a0c:	8283      	strh	r3, [r0, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009a0e:	82c3      	strh	r3, [r0, #22]
 8009a10:	e7f2      	b.n	80099f8 <USBH_SetFeature+0x8>

08009a12 <USBH_ClrFeature>:
{
 8009a12:	b508      	push	{r3, lr}
  if (phost->RequestState == CMD_SEND)
 8009a14:	7883      	ldrb	r3, [r0, #2]
 8009a16:	2b01      	cmp	r3, #1
 8009a18:	d004      	beq.n	8009a24 <USBH_ClrFeature+0x12>
  return USBH_CtlReq(phost, NULL, 0U);
 8009a1a:	2200      	movs	r2, #0
 8009a1c:	4611      	mov	r1, r2
 8009a1e:	f7ff fd18 	bl	8009452 <USBH_CtlReq>
}
 8009a22:	bd08      	pop	{r3, pc}
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8009a24:	2302      	movs	r3, #2
 8009a26:	7403      	strb	r3, [r0, #16]
    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8009a28:	2301      	movs	r3, #1
 8009a2a:	7443      	strb	r3, [r0, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8009a2c:	2300      	movs	r3, #0
 8009a2e:	8243      	strh	r3, [r0, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8009a30:	8281      	strh	r1, [r0, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009a32:	82c3      	strh	r3, [r0, #22]
 8009a34:	e7f1      	b.n	8009a1a <USBH_ClrFeature+0x8>

08009a36 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8009a36:	b510      	push	{r4, lr}
 8009a38:	b084      	sub	sp, #16
 8009a3a:	460b      	mov	r3, r1
 8009a3c:	4611      	mov	r1, r2

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009a3e:	2400      	movs	r4, #0
 8009a40:	9403      	str	r4, [sp, #12]
 8009a42:	2208      	movs	r2, #8
 8009a44:	9202      	str	r2, [sp, #8]
 8009a46:	9301      	str	r3, [sp, #4]
 8009a48:	9400      	str	r4, [sp, #0]
 8009a4a:	4623      	mov	r3, r4
 8009a4c:	4622      	mov	r2, r4
 8009a4e:	f000 f9df 	bl	8009e10 <USBH_LL_SubmitURB>
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
}
 8009a52:	4620      	mov	r0, r4
 8009a54:	b004      	add	sp, #16
 8009a56:	bd10      	pop	{r4, pc}

08009a58 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8009a58:	b510      	push	{r4, lr}
 8009a5a:	b084      	sub	sp, #16
 8009a5c:	460c      	mov	r4, r1
 8009a5e:	4619      	mov	r1, r3
 8009a60:	f89d 3018 	ldrb.w	r3, [sp, #24]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8009a64:	f890 c31d 	ldrb.w	ip, [r0, #797]	; 0x31d
  {
    do_ping = 0U;
 8009a68:	f1bc 0f00 	cmp.w	ip, #0
 8009a6c:	bf18      	it	ne
 8009a6e:	2300      	movne	r3, #0
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009a70:	9303      	str	r3, [sp, #12]
 8009a72:	9202      	str	r2, [sp, #8]
 8009a74:	9401      	str	r4, [sp, #4]
 8009a76:	2301      	movs	r3, #1
 8009a78:	9300      	str	r3, [sp, #0]
 8009a7a:	2300      	movs	r3, #0
 8009a7c:	461a      	mov	r2, r3
 8009a7e:	f000 f9c7 	bl	8009e10 <USBH_LL_SubmitURB>
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
}
 8009a82:	2000      	movs	r0, #0
 8009a84:	b004      	add	sp, #16
 8009a86:	bd10      	pop	{r4, pc}

08009a88 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8009a88:	b530      	push	{r4, r5, lr}
 8009a8a:	b085      	sub	sp, #20
 8009a8c:	460d      	mov	r5, r1
 8009a8e:	4619      	mov	r1, r3
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009a90:	2400      	movs	r4, #0
 8009a92:	9403      	str	r4, [sp, #12]
 8009a94:	9202      	str	r2, [sp, #8]
 8009a96:	9501      	str	r5, [sp, #4]
 8009a98:	2201      	movs	r2, #1
 8009a9a:	9200      	str	r2, [sp, #0]
 8009a9c:	4623      	mov	r3, r4
 8009a9e:	f000 f9b7 	bl	8009e10 <USBH_LL_SubmitURB>
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;

}
 8009aa2:	4620      	mov	r0, r4
 8009aa4:	b005      	add	sp, #20
 8009aa6:	bd30      	pop	{r4, r5, pc}

08009aa8 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8009aa8:	b510      	push	{r4, lr}
 8009aaa:	b084      	sub	sp, #16
 8009aac:	460c      	mov	r4, r1
 8009aae:	4619      	mov	r1, r3
 8009ab0:	f89d 3018 	ldrb.w	r3, [sp, #24]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8009ab4:	f890 c31d 	ldrb.w	ip, [r0, #797]	; 0x31d
  {
    do_ping = 0U;
 8009ab8:	f1bc 0f00 	cmp.w	ip, #0
 8009abc:	bf18      	it	ne
 8009abe:	2300      	movne	r3, #0
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009ac0:	9303      	str	r3, [sp, #12]
 8009ac2:	9202      	str	r2, [sp, #8]
 8009ac4:	9401      	str	r4, [sp, #4]
 8009ac6:	2301      	movs	r3, #1
 8009ac8:	9300      	str	r3, [sp, #0]
 8009aca:	2302      	movs	r3, #2
 8009acc:	2200      	movs	r2, #0
 8009ace:	f000 f99f 	bl	8009e10 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
}
 8009ad2:	2000      	movs	r0, #0
 8009ad4:	b004      	add	sp, #16
 8009ad6:	bd10      	pop	{r4, pc}

08009ad8 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8009ad8:	b530      	push	{r4, r5, lr}
 8009ada:	b085      	sub	sp, #20
 8009adc:	460d      	mov	r5, r1
 8009ade:	4619      	mov	r1, r3
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009ae0:	2400      	movs	r4, #0
 8009ae2:	9403      	str	r4, [sp, #12]
 8009ae4:	9202      	str	r2, [sp, #8]
 8009ae6:	9501      	str	r5, [sp, #4]
 8009ae8:	2201      	movs	r2, #1
 8009aea:	9200      	str	r2, [sp, #0]
 8009aec:	2302      	movs	r3, #2
 8009aee:	f000 f98f 	bl	8009e10 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
}
 8009af2:	4620      	mov	r0, r4
 8009af4:	b005      	add	sp, #20
 8009af6:	bd30      	pop	{r4, r5, pc}

08009af8 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8009af8:	b510      	push	{r4, lr}
 8009afa:	b084      	sub	sp, #16
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8009afc:	f8bd 4020 	ldrh.w	r4, [sp, #32]
 8009b00:	9402      	str	r4, [sp, #8]
 8009b02:	f89d 401c 	ldrb.w	r4, [sp, #28]
 8009b06:	9401      	str	r4, [sp, #4]
 8009b08:	f89d 4018 	ldrb.w	r4, [sp, #24]
 8009b0c:	9400      	str	r4, [sp, #0]
 8009b0e:	f000 f964 	bl	8009dda <USBH_LL_OpenPipe>

  return USBH_OK;
}
 8009b12:	2000      	movs	r0, #0
 8009b14:	b004      	add	sp, #16
 8009b16:	bd10      	pop	{r4, pc}

08009b18 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8009b18:	b508      	push	{r3, lr}
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8009b1a:	f000 f971 	bl	8009e00 <USBH_LL_ClosePipe>

  return USBH_OK;
}
 8009b1e:	2000      	movs	r0, #0
 8009b20:	bd08      	pop	{r3, pc}

08009b22 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8009b22:	b410      	push	{r4}
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
  uint8_t idx = 0U;

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8009b24:	f500 7260 	add.w	r2, r0, #896	; 0x380
{
 8009b28:	2300      	movs	r3, #0
 8009b2a:	fa5f fc83 	uxtb.w	ip, r3
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8009b2e:	f852 4f04 	ldr.w	r4, [r2, #4]!
 8009b32:	f414 4f00 	tst.w	r4, #32768	; 0x8000
 8009b36:	d005      	beq.n	8009b44 <USBH_AllocPipe+0x22>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8009b38:	3301      	adds	r3, #1
 8009b3a:	2b10      	cmp	r3, #16
 8009b3c:	d1f5      	bne.n	8009b2a <USBH_AllocPipe+0x8>
    {
      return (uint16_t)idx;
    }
  }

  return 0xFFFFU;
 8009b3e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009b42:	e009      	b.n	8009b58 <USBH_AllocPipe+0x36>
      return (uint16_t)idx;
 8009b44:	fa1f f38c 	uxth.w	r3, ip
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8009b48:	f00c 0c0f 	and.w	ip, ip, #15
 8009b4c:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
 8009b50:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8009b54:	f8cc 1384 	str.w	r1, [ip, #900]	; 0x384
}
 8009b58:	b2d8      	uxtb	r0, r3
 8009b5a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009b5e:	4770      	bx	lr

08009b60 <USBH_FreePipe>:
  if (idx < USBH_MAX_PIPES_NBR)
 8009b60:	290f      	cmp	r1, #15
 8009b62:	d807      	bhi.n	8009b74 <USBH_FreePipe+0x14>
    phost->Pipes[idx] &= 0x7FFFU;
 8009b64:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 8009b68:	f8d0 3384 	ldr.w	r3, [r0, #900]	; 0x384
 8009b6c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8009b70:	f8c0 3384 	str.w	r3, [r0, #900]	; 0x384
}
 8009b74:	2000      	movs	r0, #0
 8009b76:	4770      	bx	lr

08009b78 <USBH_UserProcess>:
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8009b78:	2904      	cmp	r1, #4
 8009b7a:	d00c      	beq.n	8009b96 <USBH_UserProcess+0x1e>
 8009b7c:	2905      	cmp	r1, #5
 8009b7e:	d002      	beq.n	8009b86 <USBH_UserProcess+0xe>
 8009b80:	2902      	cmp	r1, #2
 8009b82:	d004      	beq.n	8009b8e <USBH_UserProcess+0x16>

  default:
  break;
  }
  /* USER CODE END CALL_BACK_1 */
}
 8009b84:	4770      	bx	lr
  Appli_state = APPLICATION_DISCONNECT;
 8009b86:	4b06      	ldr	r3, [pc, #24]	; (8009ba0 <USBH_UserProcess+0x28>)
 8009b88:	2203      	movs	r2, #3
 8009b8a:	701a      	strb	r2, [r3, #0]
  break;
 8009b8c:	4770      	bx	lr
  Appli_state = APPLICATION_READY;
 8009b8e:	4b04      	ldr	r3, [pc, #16]	; (8009ba0 <USBH_UserProcess+0x28>)
 8009b90:	2202      	movs	r2, #2
 8009b92:	701a      	strb	r2, [r3, #0]
  break;
 8009b94:	4770      	bx	lr
  Appli_state = APPLICATION_START;
 8009b96:	4b02      	ldr	r3, [pc, #8]	; (8009ba0 <USBH_UserProcess+0x28>)
 8009b98:	2201      	movs	r2, #1
 8009b9a:	701a      	strb	r2, [r3, #0]
}
 8009b9c:	e7f2      	b.n	8009b84 <USBH_UserProcess+0xc>
 8009b9e:	bf00      	nop
 8009ba0:	20000d78 	.word	0x20000d78

08009ba4 <MX_USB_HOST_Init>:
{
 8009ba4:	b508      	push	{r3, lr}
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8009ba6:	2201      	movs	r2, #1
 8009ba8:	490b      	ldr	r1, [pc, #44]	; (8009bd8 <MX_USB_HOST_Init+0x34>)
 8009baa:	480c      	ldr	r0, [pc, #48]	; (8009bdc <MX_USB_HOST_Init+0x38>)
 8009bac:	f7ff f94e 	bl	8008e4c <USBH_Init>
 8009bb0:	b948      	cbnz	r0, 8009bc6 <MX_USB_HOST_Init+0x22>
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8009bb2:	490b      	ldr	r1, [pc, #44]	; (8009be0 <MX_USB_HOST_Init+0x3c>)
 8009bb4:	4809      	ldr	r0, [pc, #36]	; (8009bdc <MX_USB_HOST_Init+0x38>)
 8009bb6:	f7ff f968 	bl	8008e8a <USBH_RegisterClass>
 8009bba:	b938      	cbnz	r0, 8009bcc <MX_USB_HOST_Init+0x28>
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8009bbc:	4807      	ldr	r0, [pc, #28]	; (8009bdc <MX_USB_HOST_Init+0x38>)
 8009bbe:	f7ff f9a0 	bl	8008f02 <USBH_Start>
 8009bc2:	b930      	cbnz	r0, 8009bd2 <MX_USB_HOST_Init+0x2e>
}
 8009bc4:	bd08      	pop	{r3, pc}
    Error_Handler();
 8009bc6:	f7f9 fead 	bl	8003924 <Error_Handler>
 8009bca:	e7f2      	b.n	8009bb2 <MX_USB_HOST_Init+0xe>
    Error_Handler();
 8009bcc:	f7f9 feaa 	bl	8003924 <Error_Handler>
 8009bd0:	e7f4      	b.n	8009bbc <MX_USB_HOST_Init+0x18>
    Error_Handler();
 8009bd2:	f7f9 fea7 	bl	8003924 <Error_Handler>
}
 8009bd6:	e7f5      	b.n	8009bc4 <MX_USB_HOST_Init+0x20>
 8009bd8:	08009b79 	.word	0x08009b79
 8009bdc:	20000d7c 	.word	0x20000d7c
 8009be0:	20000024 	.word	0x20000024

08009be4 <MX_USB_HOST_Process>:
{
 8009be4:	b508      	push	{r3, lr}
  USBH_Process(&hUsbHostFS);
 8009be6:	4802      	ldr	r0, [pc, #8]	; (8009bf0 <MX_USB_HOST_Process+0xc>)
 8009be8:	f7ff f995 	bl	8008f16 <USBH_Process>
}
 8009bec:	bd08      	pop	{r3, pc}
 8009bee:	bf00      	nop
 8009bf0:	20000d7c 	.word	0x20000d7c

08009bf4 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8009bf4:	b570      	push	{r4, r5, r6, lr}
 8009bf6:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009bf8:	2300      	movs	r3, #0
 8009bfa:	9303      	str	r3, [sp, #12]
 8009bfc:	9304      	str	r3, [sp, #16]
 8009bfe:	9305      	str	r3, [sp, #20]
 8009c00:	9306      	str	r3, [sp, #24]
 8009c02:	9307      	str	r3, [sp, #28]
  if(hcdHandle->Instance==USB_OTG_FS)
 8009c04:	6803      	ldr	r3, [r0, #0]
 8009c06:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009c0a:	d001      	beq.n	8009c10 <HAL_HCD_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009c0c:	b008      	add	sp, #32
 8009c0e:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009c10:	2500      	movs	r5, #0
 8009c12:	9501      	str	r5, [sp, #4]
 8009c14:	4c1a      	ldr	r4, [pc, #104]	; (8009c80 <HAL_HCD_MspInit+0x8c>)
 8009c16:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8009c18:	f043 0301 	orr.w	r3, r3, #1
 8009c1c:	6323      	str	r3, [r4, #48]	; 0x30
 8009c1e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8009c20:	f003 0301 	and.w	r3, r3, #1
 8009c24:	9301      	str	r3, [sp, #4]
 8009c26:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8009c28:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009c2c:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8009c2e:	4e15      	ldr	r6, [pc, #84]	; (8009c84 <HAL_HCD_MspInit+0x90>)
 8009c30:	a903      	add	r1, sp, #12
 8009c32:	4630      	mov	r0, r6
 8009c34:	f7fc f96e 	bl	8005f14 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8009c38:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8009c3c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009c3e:	2302      	movs	r3, #2
 8009c40:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009c42:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009c44:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009c46:	230a      	movs	r3, #10
 8009c48:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009c4a:	a903      	add	r1, sp, #12
 8009c4c:	4630      	mov	r0, r6
 8009c4e:	f7fc f961 	bl	8005f14 <HAL_GPIO_Init>
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009c52:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009c54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009c58:	6363      	str	r3, [r4, #52]	; 0x34
 8009c5a:	9502      	str	r5, [sp, #8]
 8009c5c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8009c5e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009c62:	6463      	str	r3, [r4, #68]	; 0x44
 8009c64:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8009c66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009c6a:	9302      	str	r3, [sp, #8]
 8009c6c:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8009c6e:	462a      	mov	r2, r5
 8009c70:	4629      	mov	r1, r5
 8009c72:	2043      	movs	r0, #67	; 0x43
 8009c74:	f7fc f8f6 	bl	8005e64 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8009c78:	2043      	movs	r0, #67	; 0x43
 8009c7a:	f7fc f929 	bl	8005ed0 <HAL_NVIC_EnableIRQ>
}
 8009c7e:	e7c5      	b.n	8009c0c <HAL_HCD_MspInit+0x18>
 8009c80:	40023800 	.word	0x40023800
 8009c84:	40020000 	.word	0x40020000

08009c88 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8009c88:	b508      	push	{r3, lr}
  USBH_LL_IncTimer(hhcd->pData);
 8009c8a:	f8d0 0300 	ldr.w	r0, [r0, #768]	; 0x300
 8009c8e:	f7ff fba6 	bl	80093de <USBH_LL_IncTimer>
}
 8009c92:	bd08      	pop	{r3, pc}

08009c94 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8009c94:	b508      	push	{r3, lr}
  USBH_LL_Connect(hhcd->pData);
 8009c96:	f8d0 0300 	ldr.w	r0, [r0, #768]	; 0x300
 8009c9a:	f7ff fbba 	bl	8009412 <USBH_LL_Connect>
}
 8009c9e:	bd08      	pop	{r3, pc}

08009ca0 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8009ca0:	b508      	push	{r3, lr}
  USBH_LL_Disconnect(hhcd->pData);
 8009ca2:	f8d0 0300 	ldr.w	r0, [r0, #768]	; 0x300
 8009ca6:	f7ff fbbe 	bl	8009426 <USBH_LL_Disconnect>
}
 8009caa:	bd08      	pop	{r3, pc}

08009cac <HAL_HCD_HC_NotifyURBChange_Callback>:
{
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8009cac:	4770      	bx	lr

08009cae <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8009cae:	b508      	push	{r3, lr}
  USBH_LL_PortEnabled(hhcd->pData);
 8009cb0:	f8d0 0300 	ldr.w	r0, [r0, #768]	; 0x300
 8009cb4:	f7ff fba5 	bl	8009402 <USBH_LL_PortEnabled>
}
 8009cb8:	bd08      	pop	{r3, pc}

08009cba <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8009cba:	b508      	push	{r3, lr}
  USBH_LL_PortDisabled(hhcd->pData);
 8009cbc:	f8d0 0300 	ldr.w	r0, [r0, #768]	; 0x300
 8009cc0:	f7ff fba3 	bl	800940a <USBH_LL_PortDisabled>
}
 8009cc4:	bd08      	pop	{r3, pc}
	...

08009cc8 <USBH_LL_Init>:
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8009cc8:	f890 33cc 	ldrb.w	r3, [r0, #972]	; 0x3cc
 8009ccc:	2b01      	cmp	r3, #1
 8009cce:	d001      	beq.n	8009cd4 <USBH_LL_Init+0xc>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
  }
  return USBH_OK;
}
 8009cd0:	2000      	movs	r0, #0
 8009cd2:	4770      	bx	lr
{
 8009cd4:	b510      	push	{r4, lr}
 8009cd6:	4604      	mov	r4, r0
  hhcd_USB_OTG_FS.pData = phost;
 8009cd8:	480f      	ldr	r0, [pc, #60]	; (8009d18 <USBH_LL_Init+0x50>)
 8009cda:	f8c0 4300 	str.w	r4, [r0, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 8009cde:	f8c4 03d0 	str.w	r0, [r4, #976]	; 0x3d0
  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009ce2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8009ce6:	6003      	str	r3, [r0, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8009ce8:	2308      	movs	r3, #8
 8009cea:	6083      	str	r3, [r0, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8009cec:	2301      	movs	r3, #1
 8009cee:	60c3      	str	r3, [r0, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009cf0:	2300      	movs	r3, #0
 8009cf2:	6103      	str	r3, [r0, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8009cf4:	2202      	movs	r2, #2
 8009cf6:	6182      	str	r2, [r0, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009cf8:	61c3      	str	r3, [r0, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8009cfa:	f7fc fa5e 	bl	80061ba <HAL_HCD_Init>
 8009cfe:	b940      	cbnz	r0, 8009d12 <USBH_LL_Init+0x4a>
  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8009d00:	4805      	ldr	r0, [pc, #20]	; (8009d18 <USBH_LL_Init+0x50>)
 8009d02:	f7fc ff7d 	bl	8006c00 <HAL_HCD_GetCurrentFrame>
 8009d06:	4601      	mov	r1, r0
 8009d08:	4620      	mov	r0, r4
 8009d0a:	f7ff fb65 	bl	80093d8 <USBH_LL_SetTimer>
}
 8009d0e:	2000      	movs	r0, #0
 8009d10:	bd10      	pop	{r4, pc}
    Error_Handler( );
 8009d12:	f7f9 fe07 	bl	8003924 <Error_Handler>
 8009d16:	e7f3      	b.n	8009d00 <USBH_LL_Init+0x38>
 8009d18:	20001154 	.word	0x20001154

08009d1c <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8009d1c:	b508      	push	{r3, lr}
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8009d1e:	f8d0 03d0 	ldr.w	r0, [r0, #976]	; 0x3d0
 8009d22:	f7fc ff72 	bl	8006c0a <HAL_HCD_GetCurrentSpeed>
 8009d26:	b120      	cbz	r0, 8009d32 <USBH_LL_GetSpeed+0x16>
  case 1 :
    speed = USBH_SPEED_FULL;
    break;

  case 2 :
    speed = USBH_SPEED_LOW;
 8009d28:	2802      	cmp	r0, #2
 8009d2a:	bf14      	ite	ne
 8009d2c:	2001      	movne	r0, #1
 8009d2e:	2002      	moveq	r0, #2
  default:
   speed = USBH_SPEED_FULL;
    break;
  }
  return  speed;
}
 8009d30:	bd08      	pop	{r3, pc}
    speed = USBH_SPEED_HIGH;
 8009d32:	2000      	movs	r0, #0
 8009d34:	e7fc      	b.n	8009d30 <USBH_LL_GetSpeed+0x14>

08009d36 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009d36:	b508      	push	{r3, lr}
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8009d38:	f8d0 03d0 	ldr.w	r0, [r0, #976]	; 0x3d0
 8009d3c:	f7fc ff5b 	bl	8006bf6 <HAL_HCD_HC_GetXferCount>
}
 8009d40:	bd08      	pop	{r3, pc}

08009d42 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009d42:	b508      	push	{r3, lr}
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8009d44:	f8d0 03d0 	ldr.w	r0, [r0, #976]	; 0x3d0
 8009d48:	f7fc ff4f 	bl	8006bea <HAL_HCD_HC_GetURBState>
}
 8009d4c:	bd08      	pop	{r3, pc}

08009d4e <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8009d4e:	b508      	push	{r3, lr}
  if (phost->id == HOST_FS) {
 8009d50:	f890 33cc 	ldrb.w	r3, [r0, #972]	; 0x3cc
 8009d54:	2b01      	cmp	r3, #1
 8009d56:	d004      	beq.n	8009d62 <USBH_LL_DriverVBUS+0x14>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8009d58:	20c8      	movs	r0, #200	; 0xc8
 8009d5a:	f7fb fc9d 	bl	8005698 <HAL_Delay>
  return USBH_OK;
}
 8009d5e:	2000      	movs	r0, #0
 8009d60:	bd08      	pop	{r3, pc}
    MX_DriverVbusFS(state);
 8009d62:	4608      	mov	r0, r1
 8009d64:	f000 f86a 	bl	8009e3c <MX_DriverVbusFS>
 8009d68:	e7f6      	b.n	8009d58 <USBH_LL_DriverVBUS+0xa>

08009d6a <USBH_LL_SetToggle>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8009d6a:	f8d0 33d0 	ldr.w	r3, [r0, #976]	; 0x3d0

  if(pHandle->hc[pipe].ep_is_in)
 8009d6e:	202c      	movs	r0, #44	; 0x2c
 8009d70:	fb00 3001 	mla	r0, r0, r1, r3
 8009d74:	f890 003b 	ldrb.w	r0, [r0, #59]	; 0x3b
 8009d78:	b130      	cbz	r0, 8009d88 <USBH_LL_SetToggle+0x1e>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8009d7a:	202c      	movs	r0, #44	; 0x2c
 8009d7c:	fb00 3301 	mla	r3, r0, r1, r3
 8009d80:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  {
    pHandle->hc[pipe].toggle_out = toggle;
  }

  return USBH_OK;
}
 8009d84:	2000      	movs	r0, #0
 8009d86:	4770      	bx	lr
    pHandle->hc[pipe].toggle_out = toggle;
 8009d88:	202c      	movs	r0, #44	; 0x2c
 8009d8a:	fb00 3301 	mla	r3, r0, r1, r3
 8009d8e:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
 8009d92:	e7f7      	b.n	8009d84 <USBH_LL_SetToggle+0x1a>

08009d94 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8009d94:	b508      	push	{r3, lr}
  HAL_Delay(Delay);
 8009d96:	f7fb fc7f 	bl	8005698 <HAL_Delay>
}
 8009d9a:	bd08      	pop	{r3, pc}

08009d9c <USBH_Get_USB_Status>:
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
  USBH_StatusTypeDef usb_status = USBH_OK;

  switch (hal_status)
 8009d9c:	b120      	cbz	r0, 8009da8 <USBH_Get_USB_Status+0xc>
    break;
    case HAL_ERROR :
      usb_status = USBH_FAIL;
    break;
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8009d9e:	2802      	cmp	r0, #2
 8009da0:	bf14      	ite	ne
 8009da2:	2002      	movne	r0, #2
 8009da4:	2001      	moveq	r0, #1
 8009da6:	4770      	bx	lr
    default :
      usb_status = USBH_FAIL;
    break;
  }
  return usb_status;
}
 8009da8:	4770      	bx	lr

08009daa <USBH_LL_Start>:
{
 8009daa:	b508      	push	{r3, lr}
  hal_status = HAL_HCD_Start(phost->pData);
 8009dac:	f8d0 03d0 	ldr.w	r0, [r0, #976]	; 0x3d0
 8009db0:	f7fc feef 	bl	8006b92 <HAL_HCD_Start>
  usb_status = USBH_Get_USB_Status(hal_status);
 8009db4:	f7ff fff2 	bl	8009d9c <USBH_Get_USB_Status>
}
 8009db8:	bd08      	pop	{r3, pc}

08009dba <USBH_LL_Stop>:
{
 8009dba:	b508      	push	{r3, lr}
  hal_status = HAL_HCD_Stop(phost->pData);
 8009dbc:	f8d0 03d0 	ldr.w	r0, [r0, #976]	; 0x3d0
 8009dc0:	f7fc fefc 	bl	8006bbc <HAL_HCD_Stop>
  usb_status = USBH_Get_USB_Status(hal_status);
 8009dc4:	f7ff ffea 	bl	8009d9c <USBH_Get_USB_Status>
}
 8009dc8:	bd08      	pop	{r3, pc}

08009dca <USBH_LL_ResetPort>:
{
 8009dca:	b508      	push	{r3, lr}
  hal_status = HAL_HCD_ResetPort(phost->pData);
 8009dcc:	f8d0 03d0 	ldr.w	r0, [r0, #976]	; 0x3d0
 8009dd0:	f7fc ff06 	bl	8006be0 <HAL_HCD_ResetPort>
  usb_status = USBH_Get_USB_Status(hal_status);
 8009dd4:	f7ff ffe2 	bl	8009d9c <USBH_Get_USB_Status>
}
 8009dd8:	bd08      	pop	{r3, pc}

08009dda <USBH_LL_OpenPipe>:
{
 8009dda:	b510      	push	{r4, lr}
 8009ddc:	b084      	sub	sp, #16
  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8009dde:	f8d0 03d0 	ldr.w	r0, [r0, #976]	; 0x3d0
 8009de2:	f8bd 4020 	ldrh.w	r4, [sp, #32]
 8009de6:	9402      	str	r4, [sp, #8]
 8009de8:	f89d 401c 	ldrb.w	r4, [sp, #28]
 8009dec:	9401      	str	r4, [sp, #4]
 8009dee:	f89d 4018 	ldrb.w	r4, [sp, #24]
 8009df2:	9400      	str	r4, [sp, #0]
 8009df4:	f7fc f99a 	bl	800612c <HAL_HCD_HC_Init>
  usb_status = USBH_Get_USB_Status(hal_status);
 8009df8:	f7ff ffd0 	bl	8009d9c <USBH_Get_USB_Status>
}
 8009dfc:	b004      	add	sp, #16
 8009dfe:	bd10      	pop	{r4, pc}

08009e00 <USBH_LL_ClosePipe>:
{
 8009e00:	b508      	push	{r3, lr}
  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8009e02:	f8d0 03d0 	ldr.w	r0, [r0, #976]	; 0x3d0
 8009e06:	f7fc f9c6 	bl	8006196 <HAL_HCD_HC_Halt>
  usb_status = USBH_Get_USB_Status(hal_status);
 8009e0a:	f7ff ffc7 	bl	8009d9c <USBH_Get_USB_Status>
}
 8009e0e:	bd08      	pop	{r3, pc}

08009e10 <USBH_LL_SubmitURB>:
{
 8009e10:	b510      	push	{r4, lr}
 8009e12:	b084      	sub	sp, #16
  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8009e14:	f8d0 03d0 	ldr.w	r0, [r0, #976]	; 0x3d0
 8009e18:	f89d 4024 	ldrb.w	r4, [sp, #36]	; 0x24
 8009e1c:	9403      	str	r4, [sp, #12]
 8009e1e:	f8bd 4020 	ldrh.w	r4, [sp, #32]
 8009e22:	9402      	str	r4, [sp, #8]
 8009e24:	9c07      	ldr	r4, [sp, #28]
 8009e26:	9401      	str	r4, [sp, #4]
 8009e28:	f89d 4018 	ldrb.w	r4, [sp, #24]
 8009e2c:	9400      	str	r4, [sp, #0]
 8009e2e:	f7fc fa16 	bl	800625e <HAL_HCD_HC_SubmitRequest>
  usb_status =  USBH_Get_USB_Status(hal_status);
 8009e32:	f7ff ffb3 	bl	8009d9c <USBH_Get_USB_Status>
}
 8009e36:	b004      	add	sp, #16
 8009e38:	bd10      	pop	{r4, pc}
	...

08009e3c <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8009e3c:	b508      	push	{r3, lr}
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8009e3e:	1e02      	subs	r2, r0, #0
 8009e40:	bf18      	it	ne
 8009e42:	2201      	movne	r2, #1
 8009e44:	2101      	movs	r1, #1
 8009e46:	4802      	ldr	r0, [pc, #8]	; (8009e50 <MX_DriverVbusFS+0x14>)
 8009e48:	f7fc f96a 	bl	8006120 <HAL_GPIO_WritePin>
}
 8009e4c:	bd08      	pop	{r3, pc}
 8009e4e:	bf00      	nop
 8009e50:	40020800 	.word	0x40020800

08009e54 <__errno>:
 8009e54:	4b01      	ldr	r3, [pc, #4]	; (8009e5c <__errno+0x8>)
 8009e56:	6818      	ldr	r0, [r3, #0]
 8009e58:	4770      	bx	lr
 8009e5a:	bf00      	nop
 8009e5c:	20000044 	.word	0x20000044

08009e60 <exit>:
 8009e60:	b508      	push	{r3, lr}
 8009e62:	4b07      	ldr	r3, [pc, #28]	; (8009e80 <exit+0x20>)
 8009e64:	4604      	mov	r4, r0
 8009e66:	b113      	cbz	r3, 8009e6e <exit+0xe>
 8009e68:	2100      	movs	r1, #0
 8009e6a:	f3af 8000 	nop.w
 8009e6e:	4b05      	ldr	r3, [pc, #20]	; (8009e84 <exit+0x24>)
 8009e70:	6818      	ldr	r0, [r3, #0]
 8009e72:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8009e74:	b103      	cbz	r3, 8009e78 <exit+0x18>
 8009e76:	4798      	blx	r3
 8009e78:	4620      	mov	r0, r4
 8009e7a:	f7fa fc2d 	bl	80046d8 <_exit>
 8009e7e:	bf00      	nop
 8009e80:	00000000 	.word	0x00000000
 8009e84:	0800ba14 	.word	0x0800ba14

08009e88 <__libc_init_array>:
 8009e88:	b570      	push	{r4, r5, r6, lr}
 8009e8a:	4d0d      	ldr	r5, [pc, #52]	; (8009ec0 <__libc_init_array+0x38>)
 8009e8c:	4c0d      	ldr	r4, [pc, #52]	; (8009ec4 <__libc_init_array+0x3c>)
 8009e8e:	1b64      	subs	r4, r4, r5
 8009e90:	10a4      	asrs	r4, r4, #2
 8009e92:	2600      	movs	r6, #0
 8009e94:	42a6      	cmp	r6, r4
 8009e96:	d109      	bne.n	8009eac <__libc_init_array+0x24>
 8009e98:	4d0b      	ldr	r5, [pc, #44]	; (8009ec8 <__libc_init_array+0x40>)
 8009e9a:	4c0c      	ldr	r4, [pc, #48]	; (8009ecc <__libc_init_array+0x44>)
 8009e9c:	f001 fd2e 	bl	800b8fc <_init>
 8009ea0:	1b64      	subs	r4, r4, r5
 8009ea2:	10a4      	asrs	r4, r4, #2
 8009ea4:	2600      	movs	r6, #0
 8009ea6:	42a6      	cmp	r6, r4
 8009ea8:	d105      	bne.n	8009eb6 <__libc_init_array+0x2e>
 8009eaa:	bd70      	pop	{r4, r5, r6, pc}
 8009eac:	f855 3b04 	ldr.w	r3, [r5], #4
 8009eb0:	4798      	blx	r3
 8009eb2:	3601      	adds	r6, #1
 8009eb4:	e7ee      	b.n	8009e94 <__libc_init_array+0xc>
 8009eb6:	f855 3b04 	ldr.w	r3, [r5], #4
 8009eba:	4798      	blx	r3
 8009ebc:	3601      	adds	r6, #1
 8009ebe:	e7f2      	b.n	8009ea6 <__libc_init_array+0x1e>
 8009ec0:	0800bc68 	.word	0x0800bc68
 8009ec4:	0800bc68 	.word	0x0800bc68
 8009ec8:	0800bc68 	.word	0x0800bc68
 8009ecc:	0800bc6c 	.word	0x0800bc6c

08009ed0 <malloc>:
 8009ed0:	4b02      	ldr	r3, [pc, #8]	; (8009edc <malloc+0xc>)
 8009ed2:	4601      	mov	r1, r0
 8009ed4:	6818      	ldr	r0, [r3, #0]
 8009ed6:	f000 b88d 	b.w	8009ff4 <_malloc_r>
 8009eda:	bf00      	nop
 8009edc:	20000044 	.word	0x20000044

08009ee0 <free>:
 8009ee0:	4b02      	ldr	r3, [pc, #8]	; (8009eec <free+0xc>)
 8009ee2:	4601      	mov	r1, r0
 8009ee4:	6818      	ldr	r0, [r3, #0]
 8009ee6:	f000 b819 	b.w	8009f1c <_free_r>
 8009eea:	bf00      	nop
 8009eec:	20000044 	.word	0x20000044

08009ef0 <memcpy>:
 8009ef0:	440a      	add	r2, r1
 8009ef2:	4291      	cmp	r1, r2
 8009ef4:	f100 33ff 	add.w	r3, r0, #4294967295
 8009ef8:	d100      	bne.n	8009efc <memcpy+0xc>
 8009efa:	4770      	bx	lr
 8009efc:	b510      	push	{r4, lr}
 8009efe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009f02:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009f06:	4291      	cmp	r1, r2
 8009f08:	d1f9      	bne.n	8009efe <memcpy+0xe>
 8009f0a:	bd10      	pop	{r4, pc}

08009f0c <memset>:
 8009f0c:	4402      	add	r2, r0
 8009f0e:	4603      	mov	r3, r0
 8009f10:	4293      	cmp	r3, r2
 8009f12:	d100      	bne.n	8009f16 <memset+0xa>
 8009f14:	4770      	bx	lr
 8009f16:	f803 1b01 	strb.w	r1, [r3], #1
 8009f1a:	e7f9      	b.n	8009f10 <memset+0x4>

08009f1c <_free_r>:
 8009f1c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009f1e:	2900      	cmp	r1, #0
 8009f20:	d044      	beq.n	8009fac <_free_r+0x90>
 8009f22:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009f26:	9001      	str	r0, [sp, #4]
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	f1a1 0404 	sub.w	r4, r1, #4
 8009f2e:	bfb8      	it	lt
 8009f30:	18e4      	addlt	r4, r4, r3
 8009f32:	f000 f8e3 	bl	800a0fc <__malloc_lock>
 8009f36:	4a1e      	ldr	r2, [pc, #120]	; (8009fb0 <_free_r+0x94>)
 8009f38:	9801      	ldr	r0, [sp, #4]
 8009f3a:	6813      	ldr	r3, [r2, #0]
 8009f3c:	b933      	cbnz	r3, 8009f4c <_free_r+0x30>
 8009f3e:	6063      	str	r3, [r4, #4]
 8009f40:	6014      	str	r4, [r2, #0]
 8009f42:	b003      	add	sp, #12
 8009f44:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009f48:	f000 b8de 	b.w	800a108 <__malloc_unlock>
 8009f4c:	42a3      	cmp	r3, r4
 8009f4e:	d908      	bls.n	8009f62 <_free_r+0x46>
 8009f50:	6825      	ldr	r5, [r4, #0]
 8009f52:	1961      	adds	r1, r4, r5
 8009f54:	428b      	cmp	r3, r1
 8009f56:	bf01      	itttt	eq
 8009f58:	6819      	ldreq	r1, [r3, #0]
 8009f5a:	685b      	ldreq	r3, [r3, #4]
 8009f5c:	1949      	addeq	r1, r1, r5
 8009f5e:	6021      	streq	r1, [r4, #0]
 8009f60:	e7ed      	b.n	8009f3e <_free_r+0x22>
 8009f62:	461a      	mov	r2, r3
 8009f64:	685b      	ldr	r3, [r3, #4]
 8009f66:	b10b      	cbz	r3, 8009f6c <_free_r+0x50>
 8009f68:	42a3      	cmp	r3, r4
 8009f6a:	d9fa      	bls.n	8009f62 <_free_r+0x46>
 8009f6c:	6811      	ldr	r1, [r2, #0]
 8009f6e:	1855      	adds	r5, r2, r1
 8009f70:	42a5      	cmp	r5, r4
 8009f72:	d10b      	bne.n	8009f8c <_free_r+0x70>
 8009f74:	6824      	ldr	r4, [r4, #0]
 8009f76:	4421      	add	r1, r4
 8009f78:	1854      	adds	r4, r2, r1
 8009f7a:	42a3      	cmp	r3, r4
 8009f7c:	6011      	str	r1, [r2, #0]
 8009f7e:	d1e0      	bne.n	8009f42 <_free_r+0x26>
 8009f80:	681c      	ldr	r4, [r3, #0]
 8009f82:	685b      	ldr	r3, [r3, #4]
 8009f84:	6053      	str	r3, [r2, #4]
 8009f86:	4421      	add	r1, r4
 8009f88:	6011      	str	r1, [r2, #0]
 8009f8a:	e7da      	b.n	8009f42 <_free_r+0x26>
 8009f8c:	d902      	bls.n	8009f94 <_free_r+0x78>
 8009f8e:	230c      	movs	r3, #12
 8009f90:	6003      	str	r3, [r0, #0]
 8009f92:	e7d6      	b.n	8009f42 <_free_r+0x26>
 8009f94:	6825      	ldr	r5, [r4, #0]
 8009f96:	1961      	adds	r1, r4, r5
 8009f98:	428b      	cmp	r3, r1
 8009f9a:	bf04      	itt	eq
 8009f9c:	6819      	ldreq	r1, [r3, #0]
 8009f9e:	685b      	ldreq	r3, [r3, #4]
 8009fa0:	6063      	str	r3, [r4, #4]
 8009fa2:	bf04      	itt	eq
 8009fa4:	1949      	addeq	r1, r1, r5
 8009fa6:	6021      	streq	r1, [r4, #0]
 8009fa8:	6054      	str	r4, [r2, #4]
 8009faa:	e7ca      	b.n	8009f42 <_free_r+0x26>
 8009fac:	b003      	add	sp, #12
 8009fae:	bd30      	pop	{r4, r5, pc}
 8009fb0:	20001458 	.word	0x20001458

08009fb4 <sbrk_aligned>:
 8009fb4:	b570      	push	{r4, r5, r6, lr}
 8009fb6:	4e0e      	ldr	r6, [pc, #56]	; (8009ff0 <sbrk_aligned+0x3c>)
 8009fb8:	460c      	mov	r4, r1
 8009fba:	6831      	ldr	r1, [r6, #0]
 8009fbc:	4605      	mov	r5, r0
 8009fbe:	b911      	cbnz	r1, 8009fc6 <sbrk_aligned+0x12>
 8009fc0:	f000 f88c 	bl	800a0dc <_sbrk_r>
 8009fc4:	6030      	str	r0, [r6, #0]
 8009fc6:	4621      	mov	r1, r4
 8009fc8:	4628      	mov	r0, r5
 8009fca:	f000 f887 	bl	800a0dc <_sbrk_r>
 8009fce:	1c43      	adds	r3, r0, #1
 8009fd0:	d00a      	beq.n	8009fe8 <sbrk_aligned+0x34>
 8009fd2:	1cc4      	adds	r4, r0, #3
 8009fd4:	f024 0403 	bic.w	r4, r4, #3
 8009fd8:	42a0      	cmp	r0, r4
 8009fda:	d007      	beq.n	8009fec <sbrk_aligned+0x38>
 8009fdc:	1a21      	subs	r1, r4, r0
 8009fde:	4628      	mov	r0, r5
 8009fe0:	f000 f87c 	bl	800a0dc <_sbrk_r>
 8009fe4:	3001      	adds	r0, #1
 8009fe6:	d101      	bne.n	8009fec <sbrk_aligned+0x38>
 8009fe8:	f04f 34ff 	mov.w	r4, #4294967295
 8009fec:	4620      	mov	r0, r4
 8009fee:	bd70      	pop	{r4, r5, r6, pc}
 8009ff0:	2000145c 	.word	0x2000145c

08009ff4 <_malloc_r>:
 8009ff4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ff8:	1ccd      	adds	r5, r1, #3
 8009ffa:	f025 0503 	bic.w	r5, r5, #3
 8009ffe:	3508      	adds	r5, #8
 800a000:	2d0c      	cmp	r5, #12
 800a002:	bf38      	it	cc
 800a004:	250c      	movcc	r5, #12
 800a006:	2d00      	cmp	r5, #0
 800a008:	4607      	mov	r7, r0
 800a00a:	db01      	blt.n	800a010 <_malloc_r+0x1c>
 800a00c:	42a9      	cmp	r1, r5
 800a00e:	d905      	bls.n	800a01c <_malloc_r+0x28>
 800a010:	230c      	movs	r3, #12
 800a012:	603b      	str	r3, [r7, #0]
 800a014:	2600      	movs	r6, #0
 800a016:	4630      	mov	r0, r6
 800a018:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a01c:	4e2e      	ldr	r6, [pc, #184]	; (800a0d8 <_malloc_r+0xe4>)
 800a01e:	f000 f86d 	bl	800a0fc <__malloc_lock>
 800a022:	6833      	ldr	r3, [r6, #0]
 800a024:	461c      	mov	r4, r3
 800a026:	bb34      	cbnz	r4, 800a076 <_malloc_r+0x82>
 800a028:	4629      	mov	r1, r5
 800a02a:	4638      	mov	r0, r7
 800a02c:	f7ff ffc2 	bl	8009fb4 <sbrk_aligned>
 800a030:	1c43      	adds	r3, r0, #1
 800a032:	4604      	mov	r4, r0
 800a034:	d14d      	bne.n	800a0d2 <_malloc_r+0xde>
 800a036:	6834      	ldr	r4, [r6, #0]
 800a038:	4626      	mov	r6, r4
 800a03a:	2e00      	cmp	r6, #0
 800a03c:	d140      	bne.n	800a0c0 <_malloc_r+0xcc>
 800a03e:	6823      	ldr	r3, [r4, #0]
 800a040:	4631      	mov	r1, r6
 800a042:	4638      	mov	r0, r7
 800a044:	eb04 0803 	add.w	r8, r4, r3
 800a048:	f000 f848 	bl	800a0dc <_sbrk_r>
 800a04c:	4580      	cmp	r8, r0
 800a04e:	d13a      	bne.n	800a0c6 <_malloc_r+0xd2>
 800a050:	6821      	ldr	r1, [r4, #0]
 800a052:	3503      	adds	r5, #3
 800a054:	1a6d      	subs	r5, r5, r1
 800a056:	f025 0503 	bic.w	r5, r5, #3
 800a05a:	3508      	adds	r5, #8
 800a05c:	2d0c      	cmp	r5, #12
 800a05e:	bf38      	it	cc
 800a060:	250c      	movcc	r5, #12
 800a062:	4629      	mov	r1, r5
 800a064:	4638      	mov	r0, r7
 800a066:	f7ff ffa5 	bl	8009fb4 <sbrk_aligned>
 800a06a:	3001      	adds	r0, #1
 800a06c:	d02b      	beq.n	800a0c6 <_malloc_r+0xd2>
 800a06e:	6823      	ldr	r3, [r4, #0]
 800a070:	442b      	add	r3, r5
 800a072:	6023      	str	r3, [r4, #0]
 800a074:	e00e      	b.n	800a094 <_malloc_r+0xa0>
 800a076:	6822      	ldr	r2, [r4, #0]
 800a078:	1b52      	subs	r2, r2, r5
 800a07a:	d41e      	bmi.n	800a0ba <_malloc_r+0xc6>
 800a07c:	2a0b      	cmp	r2, #11
 800a07e:	d916      	bls.n	800a0ae <_malloc_r+0xba>
 800a080:	1961      	adds	r1, r4, r5
 800a082:	42a3      	cmp	r3, r4
 800a084:	6025      	str	r5, [r4, #0]
 800a086:	bf18      	it	ne
 800a088:	6059      	strne	r1, [r3, #4]
 800a08a:	6863      	ldr	r3, [r4, #4]
 800a08c:	bf08      	it	eq
 800a08e:	6031      	streq	r1, [r6, #0]
 800a090:	5162      	str	r2, [r4, r5]
 800a092:	604b      	str	r3, [r1, #4]
 800a094:	4638      	mov	r0, r7
 800a096:	f104 060b 	add.w	r6, r4, #11
 800a09a:	f000 f835 	bl	800a108 <__malloc_unlock>
 800a09e:	f026 0607 	bic.w	r6, r6, #7
 800a0a2:	1d23      	adds	r3, r4, #4
 800a0a4:	1af2      	subs	r2, r6, r3
 800a0a6:	d0b6      	beq.n	800a016 <_malloc_r+0x22>
 800a0a8:	1b9b      	subs	r3, r3, r6
 800a0aa:	50a3      	str	r3, [r4, r2]
 800a0ac:	e7b3      	b.n	800a016 <_malloc_r+0x22>
 800a0ae:	6862      	ldr	r2, [r4, #4]
 800a0b0:	42a3      	cmp	r3, r4
 800a0b2:	bf0c      	ite	eq
 800a0b4:	6032      	streq	r2, [r6, #0]
 800a0b6:	605a      	strne	r2, [r3, #4]
 800a0b8:	e7ec      	b.n	800a094 <_malloc_r+0xa0>
 800a0ba:	4623      	mov	r3, r4
 800a0bc:	6864      	ldr	r4, [r4, #4]
 800a0be:	e7b2      	b.n	800a026 <_malloc_r+0x32>
 800a0c0:	4634      	mov	r4, r6
 800a0c2:	6876      	ldr	r6, [r6, #4]
 800a0c4:	e7b9      	b.n	800a03a <_malloc_r+0x46>
 800a0c6:	230c      	movs	r3, #12
 800a0c8:	603b      	str	r3, [r7, #0]
 800a0ca:	4638      	mov	r0, r7
 800a0cc:	f000 f81c 	bl	800a108 <__malloc_unlock>
 800a0d0:	e7a1      	b.n	800a016 <_malloc_r+0x22>
 800a0d2:	6025      	str	r5, [r4, #0]
 800a0d4:	e7de      	b.n	800a094 <_malloc_r+0xa0>
 800a0d6:	bf00      	nop
 800a0d8:	20001458 	.word	0x20001458

0800a0dc <_sbrk_r>:
 800a0dc:	b538      	push	{r3, r4, r5, lr}
 800a0de:	4d06      	ldr	r5, [pc, #24]	; (800a0f8 <_sbrk_r+0x1c>)
 800a0e0:	2300      	movs	r3, #0
 800a0e2:	4604      	mov	r4, r0
 800a0e4:	4608      	mov	r0, r1
 800a0e6:	602b      	str	r3, [r5, #0]
 800a0e8:	f7fa fafc 	bl	80046e4 <_sbrk>
 800a0ec:	1c43      	adds	r3, r0, #1
 800a0ee:	d102      	bne.n	800a0f6 <_sbrk_r+0x1a>
 800a0f0:	682b      	ldr	r3, [r5, #0]
 800a0f2:	b103      	cbz	r3, 800a0f6 <_sbrk_r+0x1a>
 800a0f4:	6023      	str	r3, [r4, #0]
 800a0f6:	bd38      	pop	{r3, r4, r5, pc}
 800a0f8:	20001460 	.word	0x20001460

0800a0fc <__malloc_lock>:
 800a0fc:	4801      	ldr	r0, [pc, #4]	; (800a104 <__malloc_lock+0x8>)
 800a0fe:	f000 b809 	b.w	800a114 <__retarget_lock_acquire_recursive>
 800a102:	bf00      	nop
 800a104:	20001464 	.word	0x20001464

0800a108 <__malloc_unlock>:
 800a108:	4801      	ldr	r0, [pc, #4]	; (800a110 <__malloc_unlock+0x8>)
 800a10a:	f000 b804 	b.w	800a116 <__retarget_lock_release_recursive>
 800a10e:	bf00      	nop
 800a110:	20001464 	.word	0x20001464

0800a114 <__retarget_lock_acquire_recursive>:
 800a114:	4770      	bx	lr

0800a116 <__retarget_lock_release_recursive>:
 800a116:	4770      	bx	lr

0800a118 <cos>:
 800a118:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a11a:	ec53 2b10 	vmov	r2, r3, d0
 800a11e:	4826      	ldr	r0, [pc, #152]	; (800a1b8 <cos+0xa0>)
 800a120:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800a124:	4281      	cmp	r1, r0
 800a126:	dc06      	bgt.n	800a136 <cos+0x1e>
 800a128:	ed9f 1b21 	vldr	d1, [pc, #132]	; 800a1b0 <cos+0x98>
 800a12c:	b005      	add	sp, #20
 800a12e:	f85d eb04 	ldr.w	lr, [sp], #4
 800a132:	f000 bc59 	b.w	800a9e8 <__kernel_cos>
 800a136:	4821      	ldr	r0, [pc, #132]	; (800a1bc <cos+0xa4>)
 800a138:	4281      	cmp	r1, r0
 800a13a:	dd09      	ble.n	800a150 <cos+0x38>
 800a13c:	ee10 0a10 	vmov	r0, s0
 800a140:	4619      	mov	r1, r3
 800a142:	f7f6 f845 	bl	80001d0 <__aeabi_dsub>
 800a146:	ec41 0b10 	vmov	d0, r0, r1
 800a14a:	b005      	add	sp, #20
 800a14c:	f85d fb04 	ldr.w	pc, [sp], #4
 800a150:	4668      	mov	r0, sp
 800a152:	f000 f989 	bl	800a468 <__ieee754_rem_pio2>
 800a156:	f000 0003 	and.w	r0, r0, #3
 800a15a:	2801      	cmp	r0, #1
 800a15c:	d00b      	beq.n	800a176 <cos+0x5e>
 800a15e:	2802      	cmp	r0, #2
 800a160:	d016      	beq.n	800a190 <cos+0x78>
 800a162:	b9e0      	cbnz	r0, 800a19e <cos+0x86>
 800a164:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a168:	ed9d 0b00 	vldr	d0, [sp]
 800a16c:	f000 fc3c 	bl	800a9e8 <__kernel_cos>
 800a170:	ec51 0b10 	vmov	r0, r1, d0
 800a174:	e7e7      	b.n	800a146 <cos+0x2e>
 800a176:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a17a:	ed9d 0b00 	vldr	d0, [sp]
 800a17e:	f001 f84b 	bl	800b218 <__kernel_sin>
 800a182:	ec53 2b10 	vmov	r2, r3, d0
 800a186:	ee10 0a10 	vmov	r0, s0
 800a18a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800a18e:	e7da      	b.n	800a146 <cos+0x2e>
 800a190:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a194:	ed9d 0b00 	vldr	d0, [sp]
 800a198:	f000 fc26 	bl	800a9e8 <__kernel_cos>
 800a19c:	e7f1      	b.n	800a182 <cos+0x6a>
 800a19e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a1a2:	ed9d 0b00 	vldr	d0, [sp]
 800a1a6:	2001      	movs	r0, #1
 800a1a8:	f001 f836 	bl	800b218 <__kernel_sin>
 800a1ac:	e7e0      	b.n	800a170 <cos+0x58>
 800a1ae:	bf00      	nop
	...
 800a1b8:	3fe921fb 	.word	0x3fe921fb
 800a1bc:	7fefffff 	.word	0x7fefffff

0800a1c0 <sin>:
 800a1c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a1c2:	ec53 2b10 	vmov	r2, r3, d0
 800a1c6:	4828      	ldr	r0, [pc, #160]	; (800a268 <sin+0xa8>)
 800a1c8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800a1cc:	4281      	cmp	r1, r0
 800a1ce:	dc07      	bgt.n	800a1e0 <sin+0x20>
 800a1d0:	ed9f 1b23 	vldr	d1, [pc, #140]	; 800a260 <sin+0xa0>
 800a1d4:	2000      	movs	r0, #0
 800a1d6:	b005      	add	sp, #20
 800a1d8:	f85d eb04 	ldr.w	lr, [sp], #4
 800a1dc:	f001 b81c 	b.w	800b218 <__kernel_sin>
 800a1e0:	4822      	ldr	r0, [pc, #136]	; (800a26c <sin+0xac>)
 800a1e2:	4281      	cmp	r1, r0
 800a1e4:	dd09      	ble.n	800a1fa <sin+0x3a>
 800a1e6:	ee10 0a10 	vmov	r0, s0
 800a1ea:	4619      	mov	r1, r3
 800a1ec:	f7f5 fff0 	bl	80001d0 <__aeabi_dsub>
 800a1f0:	ec41 0b10 	vmov	d0, r0, r1
 800a1f4:	b005      	add	sp, #20
 800a1f6:	f85d fb04 	ldr.w	pc, [sp], #4
 800a1fa:	4668      	mov	r0, sp
 800a1fc:	f000 f934 	bl	800a468 <__ieee754_rem_pio2>
 800a200:	f000 0003 	and.w	r0, r0, #3
 800a204:	2801      	cmp	r0, #1
 800a206:	d00c      	beq.n	800a222 <sin+0x62>
 800a208:	2802      	cmp	r0, #2
 800a20a:	d011      	beq.n	800a230 <sin+0x70>
 800a20c:	b9f0      	cbnz	r0, 800a24c <sin+0x8c>
 800a20e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a212:	ed9d 0b00 	vldr	d0, [sp]
 800a216:	2001      	movs	r0, #1
 800a218:	f000 fffe 	bl	800b218 <__kernel_sin>
 800a21c:	ec51 0b10 	vmov	r0, r1, d0
 800a220:	e7e6      	b.n	800a1f0 <sin+0x30>
 800a222:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a226:	ed9d 0b00 	vldr	d0, [sp]
 800a22a:	f000 fbdd 	bl	800a9e8 <__kernel_cos>
 800a22e:	e7f5      	b.n	800a21c <sin+0x5c>
 800a230:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a234:	ed9d 0b00 	vldr	d0, [sp]
 800a238:	2001      	movs	r0, #1
 800a23a:	f000 ffed 	bl	800b218 <__kernel_sin>
 800a23e:	ec53 2b10 	vmov	r2, r3, d0
 800a242:	ee10 0a10 	vmov	r0, s0
 800a246:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800a24a:	e7d1      	b.n	800a1f0 <sin+0x30>
 800a24c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a250:	ed9d 0b00 	vldr	d0, [sp]
 800a254:	f000 fbc8 	bl	800a9e8 <__kernel_cos>
 800a258:	e7f1      	b.n	800a23e <sin+0x7e>
 800a25a:	bf00      	nop
 800a25c:	f3af 8000 	nop.w
	...
 800a268:	3fe921fb 	.word	0x3fe921fb
 800a26c:	7fefffff 	.word	0x7fefffff

0800a270 <atan2>:
 800a270:	f000 b82e 	b.w	800a2d0 <__ieee754_atan2>

0800a274 <sqrt>:
 800a274:	b538      	push	{r3, r4, r5, lr}
 800a276:	ed2d 8b02 	vpush	{d8}
 800a27a:	ec55 4b10 	vmov	r4, r5, d0
 800a27e:	f000 faff 	bl	800a880 <__ieee754_sqrt>
 800a282:	4622      	mov	r2, r4
 800a284:	462b      	mov	r3, r5
 800a286:	4620      	mov	r0, r4
 800a288:	4629      	mov	r1, r5
 800a28a:	eeb0 8a40 	vmov.f32	s16, s0
 800a28e:	eef0 8a60 	vmov.f32	s17, s1
 800a292:	f7f6 fbef 	bl	8000a74 <__aeabi_dcmpun>
 800a296:	b990      	cbnz	r0, 800a2be <sqrt+0x4a>
 800a298:	2200      	movs	r2, #0
 800a29a:	2300      	movs	r3, #0
 800a29c:	4620      	mov	r0, r4
 800a29e:	4629      	mov	r1, r5
 800a2a0:	f7f6 fbc0 	bl	8000a24 <__aeabi_dcmplt>
 800a2a4:	b158      	cbz	r0, 800a2be <sqrt+0x4a>
 800a2a6:	f7ff fdd5 	bl	8009e54 <__errno>
 800a2aa:	2321      	movs	r3, #33	; 0x21
 800a2ac:	6003      	str	r3, [r0, #0]
 800a2ae:	2200      	movs	r2, #0
 800a2b0:	2300      	movs	r3, #0
 800a2b2:	4610      	mov	r0, r2
 800a2b4:	4619      	mov	r1, r3
 800a2b6:	f7f6 fa6d 	bl	8000794 <__aeabi_ddiv>
 800a2ba:	ec41 0b18 	vmov	d8, r0, r1
 800a2be:	eeb0 0a48 	vmov.f32	s0, s16
 800a2c2:	eef0 0a68 	vmov.f32	s1, s17
 800a2c6:	ecbd 8b02 	vpop	{d8}
 800a2ca:	bd38      	pop	{r3, r4, r5, pc}
 800a2cc:	0000      	movs	r0, r0
	...

0800a2d0 <__ieee754_atan2>:
 800a2d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a2d4:	ec57 6b11 	vmov	r6, r7, d1
 800a2d8:	4273      	negs	r3, r6
 800a2da:	f8df e184 	ldr.w	lr, [pc, #388]	; 800a460 <__ieee754_atan2+0x190>
 800a2de:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800a2e2:	4333      	orrs	r3, r6
 800a2e4:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800a2e8:	4573      	cmp	r3, lr
 800a2ea:	ec51 0b10 	vmov	r0, r1, d0
 800a2ee:	ee11 8a10 	vmov	r8, s2
 800a2f2:	d80a      	bhi.n	800a30a <__ieee754_atan2+0x3a>
 800a2f4:	4244      	negs	r4, r0
 800a2f6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a2fa:	4304      	orrs	r4, r0
 800a2fc:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800a300:	4574      	cmp	r4, lr
 800a302:	ee10 9a10 	vmov	r9, s0
 800a306:	468c      	mov	ip, r1
 800a308:	d907      	bls.n	800a31a <__ieee754_atan2+0x4a>
 800a30a:	4632      	mov	r2, r6
 800a30c:	463b      	mov	r3, r7
 800a30e:	f7f5 ff61 	bl	80001d4 <__adddf3>
 800a312:	ec41 0b10 	vmov	d0, r0, r1
 800a316:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a31a:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800a31e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800a322:	4334      	orrs	r4, r6
 800a324:	d103      	bne.n	800a32e <__ieee754_atan2+0x5e>
 800a326:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a32a:	f001 b835 	b.w	800b398 <atan>
 800a32e:	17bc      	asrs	r4, r7, #30
 800a330:	f004 0402 	and.w	r4, r4, #2
 800a334:	ea53 0909 	orrs.w	r9, r3, r9
 800a338:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800a33c:	d107      	bne.n	800a34e <__ieee754_atan2+0x7e>
 800a33e:	2c02      	cmp	r4, #2
 800a340:	d060      	beq.n	800a404 <__ieee754_atan2+0x134>
 800a342:	2c03      	cmp	r4, #3
 800a344:	d1e5      	bne.n	800a312 <__ieee754_atan2+0x42>
 800a346:	a142      	add	r1, pc, #264	; (adr r1, 800a450 <__ieee754_atan2+0x180>)
 800a348:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a34c:	e7e1      	b.n	800a312 <__ieee754_atan2+0x42>
 800a34e:	ea52 0808 	orrs.w	r8, r2, r8
 800a352:	d106      	bne.n	800a362 <__ieee754_atan2+0x92>
 800a354:	f1bc 0f00 	cmp.w	ip, #0
 800a358:	da5f      	bge.n	800a41a <__ieee754_atan2+0x14a>
 800a35a:	a13f      	add	r1, pc, #252	; (adr r1, 800a458 <__ieee754_atan2+0x188>)
 800a35c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a360:	e7d7      	b.n	800a312 <__ieee754_atan2+0x42>
 800a362:	4572      	cmp	r2, lr
 800a364:	d10f      	bne.n	800a386 <__ieee754_atan2+0xb6>
 800a366:	4293      	cmp	r3, r2
 800a368:	f104 34ff 	add.w	r4, r4, #4294967295
 800a36c:	d107      	bne.n	800a37e <__ieee754_atan2+0xae>
 800a36e:	2c02      	cmp	r4, #2
 800a370:	d84c      	bhi.n	800a40c <__ieee754_atan2+0x13c>
 800a372:	4b35      	ldr	r3, [pc, #212]	; (800a448 <__ieee754_atan2+0x178>)
 800a374:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800a378:	e9d4 0100 	ldrd	r0, r1, [r4]
 800a37c:	e7c9      	b.n	800a312 <__ieee754_atan2+0x42>
 800a37e:	2c02      	cmp	r4, #2
 800a380:	d848      	bhi.n	800a414 <__ieee754_atan2+0x144>
 800a382:	4b32      	ldr	r3, [pc, #200]	; (800a44c <__ieee754_atan2+0x17c>)
 800a384:	e7f6      	b.n	800a374 <__ieee754_atan2+0xa4>
 800a386:	4573      	cmp	r3, lr
 800a388:	d0e4      	beq.n	800a354 <__ieee754_atan2+0x84>
 800a38a:	1a9b      	subs	r3, r3, r2
 800a38c:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800a390:	ea4f 5223 	mov.w	r2, r3, asr #20
 800a394:	da1e      	bge.n	800a3d4 <__ieee754_atan2+0x104>
 800a396:	2f00      	cmp	r7, #0
 800a398:	da01      	bge.n	800a39e <__ieee754_atan2+0xce>
 800a39a:	323c      	adds	r2, #60	; 0x3c
 800a39c:	db1e      	blt.n	800a3dc <__ieee754_atan2+0x10c>
 800a39e:	4632      	mov	r2, r6
 800a3a0:	463b      	mov	r3, r7
 800a3a2:	f7f6 f9f7 	bl	8000794 <__aeabi_ddiv>
 800a3a6:	ec41 0b10 	vmov	d0, r0, r1
 800a3aa:	f001 f995 	bl	800b6d8 <fabs>
 800a3ae:	f000 fff3 	bl	800b398 <atan>
 800a3b2:	ec51 0b10 	vmov	r0, r1, d0
 800a3b6:	2c01      	cmp	r4, #1
 800a3b8:	d013      	beq.n	800a3e2 <__ieee754_atan2+0x112>
 800a3ba:	2c02      	cmp	r4, #2
 800a3bc:	d015      	beq.n	800a3ea <__ieee754_atan2+0x11a>
 800a3be:	2c00      	cmp	r4, #0
 800a3c0:	d0a7      	beq.n	800a312 <__ieee754_atan2+0x42>
 800a3c2:	a319      	add	r3, pc, #100	; (adr r3, 800a428 <__ieee754_atan2+0x158>)
 800a3c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3c8:	f7f5 ff02 	bl	80001d0 <__aeabi_dsub>
 800a3cc:	a318      	add	r3, pc, #96	; (adr r3, 800a430 <__ieee754_atan2+0x160>)
 800a3ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3d2:	e014      	b.n	800a3fe <__ieee754_atan2+0x12e>
 800a3d4:	a118      	add	r1, pc, #96	; (adr r1, 800a438 <__ieee754_atan2+0x168>)
 800a3d6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a3da:	e7ec      	b.n	800a3b6 <__ieee754_atan2+0xe6>
 800a3dc:	2000      	movs	r0, #0
 800a3de:	2100      	movs	r1, #0
 800a3e0:	e7e9      	b.n	800a3b6 <__ieee754_atan2+0xe6>
 800a3e2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a3e6:	4619      	mov	r1, r3
 800a3e8:	e793      	b.n	800a312 <__ieee754_atan2+0x42>
 800a3ea:	a30f      	add	r3, pc, #60	; (adr r3, 800a428 <__ieee754_atan2+0x158>)
 800a3ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3f0:	f7f5 feee 	bl	80001d0 <__aeabi_dsub>
 800a3f4:	4602      	mov	r2, r0
 800a3f6:	460b      	mov	r3, r1
 800a3f8:	a10d      	add	r1, pc, #52	; (adr r1, 800a430 <__ieee754_atan2+0x160>)
 800a3fa:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a3fe:	f7f5 fee7 	bl	80001d0 <__aeabi_dsub>
 800a402:	e786      	b.n	800a312 <__ieee754_atan2+0x42>
 800a404:	a10a      	add	r1, pc, #40	; (adr r1, 800a430 <__ieee754_atan2+0x160>)
 800a406:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a40a:	e782      	b.n	800a312 <__ieee754_atan2+0x42>
 800a40c:	a10c      	add	r1, pc, #48	; (adr r1, 800a440 <__ieee754_atan2+0x170>)
 800a40e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a412:	e77e      	b.n	800a312 <__ieee754_atan2+0x42>
 800a414:	2000      	movs	r0, #0
 800a416:	2100      	movs	r1, #0
 800a418:	e77b      	b.n	800a312 <__ieee754_atan2+0x42>
 800a41a:	a107      	add	r1, pc, #28	; (adr r1, 800a438 <__ieee754_atan2+0x168>)
 800a41c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a420:	e777      	b.n	800a312 <__ieee754_atan2+0x42>
 800a422:	bf00      	nop
 800a424:	f3af 8000 	nop.w
 800a428:	33145c07 	.word	0x33145c07
 800a42c:	3ca1a626 	.word	0x3ca1a626
 800a430:	54442d18 	.word	0x54442d18
 800a434:	400921fb 	.word	0x400921fb
 800a438:	54442d18 	.word	0x54442d18
 800a43c:	3ff921fb 	.word	0x3ff921fb
 800a440:	54442d18 	.word	0x54442d18
 800a444:	3fe921fb 	.word	0x3fe921fb
 800a448:	0800ba18 	.word	0x0800ba18
 800a44c:	0800ba30 	.word	0x0800ba30
 800a450:	54442d18 	.word	0x54442d18
 800a454:	c00921fb 	.word	0xc00921fb
 800a458:	54442d18 	.word	0x54442d18
 800a45c:	bff921fb 	.word	0xbff921fb
 800a460:	7ff00000 	.word	0x7ff00000
 800a464:	00000000 	.word	0x00000000

0800a468 <__ieee754_rem_pio2>:
 800a468:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a46c:	ed2d 8b02 	vpush	{d8}
 800a470:	ec55 4b10 	vmov	r4, r5, d0
 800a474:	4bca      	ldr	r3, [pc, #808]	; (800a7a0 <__ieee754_rem_pio2+0x338>)
 800a476:	b08b      	sub	sp, #44	; 0x2c
 800a478:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800a47c:	4598      	cmp	r8, r3
 800a47e:	4682      	mov	sl, r0
 800a480:	9502      	str	r5, [sp, #8]
 800a482:	dc08      	bgt.n	800a496 <__ieee754_rem_pio2+0x2e>
 800a484:	2200      	movs	r2, #0
 800a486:	2300      	movs	r3, #0
 800a488:	ed80 0b00 	vstr	d0, [r0]
 800a48c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800a490:	f04f 0b00 	mov.w	fp, #0
 800a494:	e028      	b.n	800a4e8 <__ieee754_rem_pio2+0x80>
 800a496:	4bc3      	ldr	r3, [pc, #780]	; (800a7a4 <__ieee754_rem_pio2+0x33c>)
 800a498:	4598      	cmp	r8, r3
 800a49a:	dc78      	bgt.n	800a58e <__ieee754_rem_pio2+0x126>
 800a49c:	9b02      	ldr	r3, [sp, #8]
 800a49e:	4ec2      	ldr	r6, [pc, #776]	; (800a7a8 <__ieee754_rem_pio2+0x340>)
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	ee10 0a10 	vmov	r0, s0
 800a4a6:	a3b0      	add	r3, pc, #704	; (adr r3, 800a768 <__ieee754_rem_pio2+0x300>)
 800a4a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4ac:	4629      	mov	r1, r5
 800a4ae:	dd39      	ble.n	800a524 <__ieee754_rem_pio2+0xbc>
 800a4b0:	f7f5 fe8e 	bl	80001d0 <__aeabi_dsub>
 800a4b4:	45b0      	cmp	r8, r6
 800a4b6:	4604      	mov	r4, r0
 800a4b8:	460d      	mov	r5, r1
 800a4ba:	d01b      	beq.n	800a4f4 <__ieee754_rem_pio2+0x8c>
 800a4bc:	a3ac      	add	r3, pc, #688	; (adr r3, 800a770 <__ieee754_rem_pio2+0x308>)
 800a4be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4c2:	f7f5 fe85 	bl	80001d0 <__aeabi_dsub>
 800a4c6:	4602      	mov	r2, r0
 800a4c8:	460b      	mov	r3, r1
 800a4ca:	e9ca 2300 	strd	r2, r3, [sl]
 800a4ce:	4620      	mov	r0, r4
 800a4d0:	4629      	mov	r1, r5
 800a4d2:	f7f5 fe7d 	bl	80001d0 <__aeabi_dsub>
 800a4d6:	a3a6      	add	r3, pc, #664	; (adr r3, 800a770 <__ieee754_rem_pio2+0x308>)
 800a4d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4dc:	f7f5 fe78 	bl	80001d0 <__aeabi_dsub>
 800a4e0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800a4e4:	f04f 0b01 	mov.w	fp, #1
 800a4e8:	4658      	mov	r0, fp
 800a4ea:	b00b      	add	sp, #44	; 0x2c
 800a4ec:	ecbd 8b02 	vpop	{d8}
 800a4f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a4f4:	a3a0      	add	r3, pc, #640	; (adr r3, 800a778 <__ieee754_rem_pio2+0x310>)
 800a4f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4fa:	f7f5 fe69 	bl	80001d0 <__aeabi_dsub>
 800a4fe:	a3a0      	add	r3, pc, #640	; (adr r3, 800a780 <__ieee754_rem_pio2+0x318>)
 800a500:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a504:	4604      	mov	r4, r0
 800a506:	460d      	mov	r5, r1
 800a508:	f7f5 fe62 	bl	80001d0 <__aeabi_dsub>
 800a50c:	4602      	mov	r2, r0
 800a50e:	460b      	mov	r3, r1
 800a510:	e9ca 2300 	strd	r2, r3, [sl]
 800a514:	4620      	mov	r0, r4
 800a516:	4629      	mov	r1, r5
 800a518:	f7f5 fe5a 	bl	80001d0 <__aeabi_dsub>
 800a51c:	a398      	add	r3, pc, #608	; (adr r3, 800a780 <__ieee754_rem_pio2+0x318>)
 800a51e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a522:	e7db      	b.n	800a4dc <__ieee754_rem_pio2+0x74>
 800a524:	f7f5 fe56 	bl	80001d4 <__adddf3>
 800a528:	45b0      	cmp	r8, r6
 800a52a:	4604      	mov	r4, r0
 800a52c:	460d      	mov	r5, r1
 800a52e:	d016      	beq.n	800a55e <__ieee754_rem_pio2+0xf6>
 800a530:	a38f      	add	r3, pc, #572	; (adr r3, 800a770 <__ieee754_rem_pio2+0x308>)
 800a532:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a536:	f7f5 fe4d 	bl	80001d4 <__adddf3>
 800a53a:	4602      	mov	r2, r0
 800a53c:	460b      	mov	r3, r1
 800a53e:	e9ca 2300 	strd	r2, r3, [sl]
 800a542:	4620      	mov	r0, r4
 800a544:	4629      	mov	r1, r5
 800a546:	f7f5 fe43 	bl	80001d0 <__aeabi_dsub>
 800a54a:	a389      	add	r3, pc, #548	; (adr r3, 800a770 <__ieee754_rem_pio2+0x308>)
 800a54c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a550:	f7f5 fe40 	bl	80001d4 <__adddf3>
 800a554:	f04f 3bff 	mov.w	fp, #4294967295
 800a558:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800a55c:	e7c4      	b.n	800a4e8 <__ieee754_rem_pio2+0x80>
 800a55e:	a386      	add	r3, pc, #536	; (adr r3, 800a778 <__ieee754_rem_pio2+0x310>)
 800a560:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a564:	f7f5 fe36 	bl	80001d4 <__adddf3>
 800a568:	a385      	add	r3, pc, #532	; (adr r3, 800a780 <__ieee754_rem_pio2+0x318>)
 800a56a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a56e:	4604      	mov	r4, r0
 800a570:	460d      	mov	r5, r1
 800a572:	f7f5 fe2f 	bl	80001d4 <__adddf3>
 800a576:	4602      	mov	r2, r0
 800a578:	460b      	mov	r3, r1
 800a57a:	e9ca 2300 	strd	r2, r3, [sl]
 800a57e:	4620      	mov	r0, r4
 800a580:	4629      	mov	r1, r5
 800a582:	f7f5 fe25 	bl	80001d0 <__aeabi_dsub>
 800a586:	a37e      	add	r3, pc, #504	; (adr r3, 800a780 <__ieee754_rem_pio2+0x318>)
 800a588:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a58c:	e7e0      	b.n	800a550 <__ieee754_rem_pio2+0xe8>
 800a58e:	4b87      	ldr	r3, [pc, #540]	; (800a7ac <__ieee754_rem_pio2+0x344>)
 800a590:	4598      	cmp	r8, r3
 800a592:	f300 80d9 	bgt.w	800a748 <__ieee754_rem_pio2+0x2e0>
 800a596:	f001 f89f 	bl	800b6d8 <fabs>
 800a59a:	ec55 4b10 	vmov	r4, r5, d0
 800a59e:	ee10 0a10 	vmov	r0, s0
 800a5a2:	a379      	add	r3, pc, #484	; (adr r3, 800a788 <__ieee754_rem_pio2+0x320>)
 800a5a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5a8:	4629      	mov	r1, r5
 800a5aa:	f7f5 ffc9 	bl	8000540 <__aeabi_dmul>
 800a5ae:	4b80      	ldr	r3, [pc, #512]	; (800a7b0 <__ieee754_rem_pio2+0x348>)
 800a5b0:	2200      	movs	r2, #0
 800a5b2:	f7f5 fe0f 	bl	80001d4 <__adddf3>
 800a5b6:	f7f6 fa73 	bl	8000aa0 <__aeabi_d2iz>
 800a5ba:	4683      	mov	fp, r0
 800a5bc:	f7f5 ff56 	bl	800046c <__aeabi_i2d>
 800a5c0:	4602      	mov	r2, r0
 800a5c2:	460b      	mov	r3, r1
 800a5c4:	ec43 2b18 	vmov	d8, r2, r3
 800a5c8:	a367      	add	r3, pc, #412	; (adr r3, 800a768 <__ieee754_rem_pio2+0x300>)
 800a5ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5ce:	f7f5 ffb7 	bl	8000540 <__aeabi_dmul>
 800a5d2:	4602      	mov	r2, r0
 800a5d4:	460b      	mov	r3, r1
 800a5d6:	4620      	mov	r0, r4
 800a5d8:	4629      	mov	r1, r5
 800a5da:	f7f5 fdf9 	bl	80001d0 <__aeabi_dsub>
 800a5de:	a364      	add	r3, pc, #400	; (adr r3, 800a770 <__ieee754_rem_pio2+0x308>)
 800a5e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5e4:	4606      	mov	r6, r0
 800a5e6:	460f      	mov	r7, r1
 800a5e8:	ec51 0b18 	vmov	r0, r1, d8
 800a5ec:	f7f5 ffa8 	bl	8000540 <__aeabi_dmul>
 800a5f0:	f1bb 0f1f 	cmp.w	fp, #31
 800a5f4:	4604      	mov	r4, r0
 800a5f6:	460d      	mov	r5, r1
 800a5f8:	dc0d      	bgt.n	800a616 <__ieee754_rem_pio2+0x1ae>
 800a5fa:	4b6e      	ldr	r3, [pc, #440]	; (800a7b4 <__ieee754_rem_pio2+0x34c>)
 800a5fc:	f10b 32ff 	add.w	r2, fp, #4294967295
 800a600:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a604:	4543      	cmp	r3, r8
 800a606:	d006      	beq.n	800a616 <__ieee754_rem_pio2+0x1ae>
 800a608:	4622      	mov	r2, r4
 800a60a:	462b      	mov	r3, r5
 800a60c:	4630      	mov	r0, r6
 800a60e:	4639      	mov	r1, r7
 800a610:	f7f5 fdde 	bl	80001d0 <__aeabi_dsub>
 800a614:	e00f      	b.n	800a636 <__ieee754_rem_pio2+0x1ce>
 800a616:	462b      	mov	r3, r5
 800a618:	4622      	mov	r2, r4
 800a61a:	4630      	mov	r0, r6
 800a61c:	4639      	mov	r1, r7
 800a61e:	f7f5 fdd7 	bl	80001d0 <__aeabi_dsub>
 800a622:	ea4f 5328 	mov.w	r3, r8, asr #20
 800a626:	9303      	str	r3, [sp, #12]
 800a628:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800a62c:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 800a630:	f1b8 0f10 	cmp.w	r8, #16
 800a634:	dc02      	bgt.n	800a63c <__ieee754_rem_pio2+0x1d4>
 800a636:	e9ca 0100 	strd	r0, r1, [sl]
 800a63a:	e039      	b.n	800a6b0 <__ieee754_rem_pio2+0x248>
 800a63c:	a34e      	add	r3, pc, #312	; (adr r3, 800a778 <__ieee754_rem_pio2+0x310>)
 800a63e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a642:	ec51 0b18 	vmov	r0, r1, d8
 800a646:	f7f5 ff7b 	bl	8000540 <__aeabi_dmul>
 800a64a:	4604      	mov	r4, r0
 800a64c:	460d      	mov	r5, r1
 800a64e:	4602      	mov	r2, r0
 800a650:	460b      	mov	r3, r1
 800a652:	4630      	mov	r0, r6
 800a654:	4639      	mov	r1, r7
 800a656:	f7f5 fdbb 	bl	80001d0 <__aeabi_dsub>
 800a65a:	4602      	mov	r2, r0
 800a65c:	460b      	mov	r3, r1
 800a65e:	4680      	mov	r8, r0
 800a660:	4689      	mov	r9, r1
 800a662:	4630      	mov	r0, r6
 800a664:	4639      	mov	r1, r7
 800a666:	f7f5 fdb3 	bl	80001d0 <__aeabi_dsub>
 800a66a:	4622      	mov	r2, r4
 800a66c:	462b      	mov	r3, r5
 800a66e:	f7f5 fdaf 	bl	80001d0 <__aeabi_dsub>
 800a672:	a343      	add	r3, pc, #268	; (adr r3, 800a780 <__ieee754_rem_pio2+0x318>)
 800a674:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a678:	4604      	mov	r4, r0
 800a67a:	460d      	mov	r5, r1
 800a67c:	ec51 0b18 	vmov	r0, r1, d8
 800a680:	f7f5 ff5e 	bl	8000540 <__aeabi_dmul>
 800a684:	4622      	mov	r2, r4
 800a686:	462b      	mov	r3, r5
 800a688:	f7f5 fda2 	bl	80001d0 <__aeabi_dsub>
 800a68c:	4602      	mov	r2, r0
 800a68e:	460b      	mov	r3, r1
 800a690:	4604      	mov	r4, r0
 800a692:	460d      	mov	r5, r1
 800a694:	4640      	mov	r0, r8
 800a696:	4649      	mov	r1, r9
 800a698:	f7f5 fd9a 	bl	80001d0 <__aeabi_dsub>
 800a69c:	9a03      	ldr	r2, [sp, #12]
 800a69e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800a6a2:	1ad3      	subs	r3, r2, r3
 800a6a4:	2b31      	cmp	r3, #49	; 0x31
 800a6a6:	dc24      	bgt.n	800a6f2 <__ieee754_rem_pio2+0x28a>
 800a6a8:	e9ca 0100 	strd	r0, r1, [sl]
 800a6ac:	4646      	mov	r6, r8
 800a6ae:	464f      	mov	r7, r9
 800a6b0:	e9da 8900 	ldrd	r8, r9, [sl]
 800a6b4:	4630      	mov	r0, r6
 800a6b6:	4642      	mov	r2, r8
 800a6b8:	464b      	mov	r3, r9
 800a6ba:	4639      	mov	r1, r7
 800a6bc:	f7f5 fd88 	bl	80001d0 <__aeabi_dsub>
 800a6c0:	462b      	mov	r3, r5
 800a6c2:	4622      	mov	r2, r4
 800a6c4:	f7f5 fd84 	bl	80001d0 <__aeabi_dsub>
 800a6c8:	9b02      	ldr	r3, [sp, #8]
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800a6d0:	f6bf af0a 	bge.w	800a4e8 <__ieee754_rem_pio2+0x80>
 800a6d4:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800a6d8:	f8ca 3004 	str.w	r3, [sl, #4]
 800a6dc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a6e0:	f8ca 8000 	str.w	r8, [sl]
 800a6e4:	f8ca 0008 	str.w	r0, [sl, #8]
 800a6e8:	f8ca 300c 	str.w	r3, [sl, #12]
 800a6ec:	f1cb 0b00 	rsb	fp, fp, #0
 800a6f0:	e6fa      	b.n	800a4e8 <__ieee754_rem_pio2+0x80>
 800a6f2:	a327      	add	r3, pc, #156	; (adr r3, 800a790 <__ieee754_rem_pio2+0x328>)
 800a6f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6f8:	ec51 0b18 	vmov	r0, r1, d8
 800a6fc:	f7f5 ff20 	bl	8000540 <__aeabi_dmul>
 800a700:	4604      	mov	r4, r0
 800a702:	460d      	mov	r5, r1
 800a704:	4602      	mov	r2, r0
 800a706:	460b      	mov	r3, r1
 800a708:	4640      	mov	r0, r8
 800a70a:	4649      	mov	r1, r9
 800a70c:	f7f5 fd60 	bl	80001d0 <__aeabi_dsub>
 800a710:	4602      	mov	r2, r0
 800a712:	460b      	mov	r3, r1
 800a714:	4606      	mov	r6, r0
 800a716:	460f      	mov	r7, r1
 800a718:	4640      	mov	r0, r8
 800a71a:	4649      	mov	r1, r9
 800a71c:	f7f5 fd58 	bl	80001d0 <__aeabi_dsub>
 800a720:	4622      	mov	r2, r4
 800a722:	462b      	mov	r3, r5
 800a724:	f7f5 fd54 	bl	80001d0 <__aeabi_dsub>
 800a728:	a31b      	add	r3, pc, #108	; (adr r3, 800a798 <__ieee754_rem_pio2+0x330>)
 800a72a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a72e:	4604      	mov	r4, r0
 800a730:	460d      	mov	r5, r1
 800a732:	ec51 0b18 	vmov	r0, r1, d8
 800a736:	f7f5 ff03 	bl	8000540 <__aeabi_dmul>
 800a73a:	4622      	mov	r2, r4
 800a73c:	462b      	mov	r3, r5
 800a73e:	f7f5 fd47 	bl	80001d0 <__aeabi_dsub>
 800a742:	4604      	mov	r4, r0
 800a744:	460d      	mov	r5, r1
 800a746:	e75f      	b.n	800a608 <__ieee754_rem_pio2+0x1a0>
 800a748:	4b1b      	ldr	r3, [pc, #108]	; (800a7b8 <__ieee754_rem_pio2+0x350>)
 800a74a:	4598      	cmp	r8, r3
 800a74c:	dd36      	ble.n	800a7bc <__ieee754_rem_pio2+0x354>
 800a74e:	ee10 2a10 	vmov	r2, s0
 800a752:	462b      	mov	r3, r5
 800a754:	4620      	mov	r0, r4
 800a756:	4629      	mov	r1, r5
 800a758:	f7f5 fd3a 	bl	80001d0 <__aeabi_dsub>
 800a75c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800a760:	e9ca 0100 	strd	r0, r1, [sl]
 800a764:	e694      	b.n	800a490 <__ieee754_rem_pio2+0x28>
 800a766:	bf00      	nop
 800a768:	54400000 	.word	0x54400000
 800a76c:	3ff921fb 	.word	0x3ff921fb
 800a770:	1a626331 	.word	0x1a626331
 800a774:	3dd0b461 	.word	0x3dd0b461
 800a778:	1a600000 	.word	0x1a600000
 800a77c:	3dd0b461 	.word	0x3dd0b461
 800a780:	2e037073 	.word	0x2e037073
 800a784:	3ba3198a 	.word	0x3ba3198a
 800a788:	6dc9c883 	.word	0x6dc9c883
 800a78c:	3fe45f30 	.word	0x3fe45f30
 800a790:	2e000000 	.word	0x2e000000
 800a794:	3ba3198a 	.word	0x3ba3198a
 800a798:	252049c1 	.word	0x252049c1
 800a79c:	397b839a 	.word	0x397b839a
 800a7a0:	3fe921fb 	.word	0x3fe921fb
 800a7a4:	4002d97b 	.word	0x4002d97b
 800a7a8:	3ff921fb 	.word	0x3ff921fb
 800a7ac:	413921fb 	.word	0x413921fb
 800a7b0:	3fe00000 	.word	0x3fe00000
 800a7b4:	0800ba48 	.word	0x0800ba48
 800a7b8:	7fefffff 	.word	0x7fefffff
 800a7bc:	ea4f 5428 	mov.w	r4, r8, asr #20
 800a7c0:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800a7c4:	ee10 0a10 	vmov	r0, s0
 800a7c8:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800a7cc:	ee10 6a10 	vmov	r6, s0
 800a7d0:	460f      	mov	r7, r1
 800a7d2:	f7f6 f965 	bl	8000aa0 <__aeabi_d2iz>
 800a7d6:	f7f5 fe49 	bl	800046c <__aeabi_i2d>
 800a7da:	4602      	mov	r2, r0
 800a7dc:	460b      	mov	r3, r1
 800a7de:	4630      	mov	r0, r6
 800a7e0:	4639      	mov	r1, r7
 800a7e2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a7e6:	f7f5 fcf3 	bl	80001d0 <__aeabi_dsub>
 800a7ea:	4b23      	ldr	r3, [pc, #140]	; (800a878 <__ieee754_rem_pio2+0x410>)
 800a7ec:	2200      	movs	r2, #0
 800a7ee:	f7f5 fea7 	bl	8000540 <__aeabi_dmul>
 800a7f2:	460f      	mov	r7, r1
 800a7f4:	4606      	mov	r6, r0
 800a7f6:	f7f6 f953 	bl	8000aa0 <__aeabi_d2iz>
 800a7fa:	f7f5 fe37 	bl	800046c <__aeabi_i2d>
 800a7fe:	4602      	mov	r2, r0
 800a800:	460b      	mov	r3, r1
 800a802:	4630      	mov	r0, r6
 800a804:	4639      	mov	r1, r7
 800a806:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800a80a:	f7f5 fce1 	bl	80001d0 <__aeabi_dsub>
 800a80e:	4b1a      	ldr	r3, [pc, #104]	; (800a878 <__ieee754_rem_pio2+0x410>)
 800a810:	2200      	movs	r2, #0
 800a812:	f7f5 fe95 	bl	8000540 <__aeabi_dmul>
 800a816:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800a81a:	ad04      	add	r5, sp, #16
 800a81c:	f04f 0803 	mov.w	r8, #3
 800a820:	46a9      	mov	r9, r5
 800a822:	2600      	movs	r6, #0
 800a824:	2700      	movs	r7, #0
 800a826:	4632      	mov	r2, r6
 800a828:	463b      	mov	r3, r7
 800a82a:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800a82e:	46c3      	mov	fp, r8
 800a830:	3d08      	subs	r5, #8
 800a832:	f108 38ff 	add.w	r8, r8, #4294967295
 800a836:	f7f6 f8eb 	bl	8000a10 <__aeabi_dcmpeq>
 800a83a:	2800      	cmp	r0, #0
 800a83c:	d1f3      	bne.n	800a826 <__ieee754_rem_pio2+0x3be>
 800a83e:	4b0f      	ldr	r3, [pc, #60]	; (800a87c <__ieee754_rem_pio2+0x414>)
 800a840:	9301      	str	r3, [sp, #4]
 800a842:	2302      	movs	r3, #2
 800a844:	9300      	str	r3, [sp, #0]
 800a846:	4622      	mov	r2, r4
 800a848:	465b      	mov	r3, fp
 800a84a:	4651      	mov	r1, sl
 800a84c:	4648      	mov	r0, r9
 800a84e:	f000 f993 	bl	800ab78 <__kernel_rem_pio2>
 800a852:	9b02      	ldr	r3, [sp, #8]
 800a854:	2b00      	cmp	r3, #0
 800a856:	4683      	mov	fp, r0
 800a858:	f6bf ae46 	bge.w	800a4e8 <__ieee754_rem_pio2+0x80>
 800a85c:	e9da 2100 	ldrd	r2, r1, [sl]
 800a860:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a864:	e9ca 2300 	strd	r2, r3, [sl]
 800a868:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 800a86c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a870:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800a874:	e73a      	b.n	800a6ec <__ieee754_rem_pio2+0x284>
 800a876:	bf00      	nop
 800a878:	41700000 	.word	0x41700000
 800a87c:	0800bac8 	.word	0x0800bac8

0800a880 <__ieee754_sqrt>:
 800a880:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a884:	ec55 4b10 	vmov	r4, r5, d0
 800a888:	4e55      	ldr	r6, [pc, #340]	; (800a9e0 <__ieee754_sqrt+0x160>)
 800a88a:	43ae      	bics	r6, r5
 800a88c:	ee10 0a10 	vmov	r0, s0
 800a890:	ee10 3a10 	vmov	r3, s0
 800a894:	462a      	mov	r2, r5
 800a896:	4629      	mov	r1, r5
 800a898:	d110      	bne.n	800a8bc <__ieee754_sqrt+0x3c>
 800a89a:	ee10 2a10 	vmov	r2, s0
 800a89e:	462b      	mov	r3, r5
 800a8a0:	f7f5 fe4e 	bl	8000540 <__aeabi_dmul>
 800a8a4:	4602      	mov	r2, r0
 800a8a6:	460b      	mov	r3, r1
 800a8a8:	4620      	mov	r0, r4
 800a8aa:	4629      	mov	r1, r5
 800a8ac:	f7f5 fc92 	bl	80001d4 <__adddf3>
 800a8b0:	4604      	mov	r4, r0
 800a8b2:	460d      	mov	r5, r1
 800a8b4:	ec45 4b10 	vmov	d0, r4, r5
 800a8b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a8bc:	2d00      	cmp	r5, #0
 800a8be:	dc10      	bgt.n	800a8e2 <__ieee754_sqrt+0x62>
 800a8c0:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800a8c4:	4330      	orrs	r0, r6
 800a8c6:	d0f5      	beq.n	800a8b4 <__ieee754_sqrt+0x34>
 800a8c8:	b15d      	cbz	r5, 800a8e2 <__ieee754_sqrt+0x62>
 800a8ca:	ee10 2a10 	vmov	r2, s0
 800a8ce:	462b      	mov	r3, r5
 800a8d0:	ee10 0a10 	vmov	r0, s0
 800a8d4:	f7f5 fc7c 	bl	80001d0 <__aeabi_dsub>
 800a8d8:	4602      	mov	r2, r0
 800a8da:	460b      	mov	r3, r1
 800a8dc:	f7f5 ff5a 	bl	8000794 <__aeabi_ddiv>
 800a8e0:	e7e6      	b.n	800a8b0 <__ieee754_sqrt+0x30>
 800a8e2:	1512      	asrs	r2, r2, #20
 800a8e4:	d074      	beq.n	800a9d0 <__ieee754_sqrt+0x150>
 800a8e6:	07d4      	lsls	r4, r2, #31
 800a8e8:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800a8ec:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800a8f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800a8f4:	bf5e      	ittt	pl
 800a8f6:	0fda      	lsrpl	r2, r3, #31
 800a8f8:	005b      	lslpl	r3, r3, #1
 800a8fa:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800a8fe:	2400      	movs	r4, #0
 800a900:	0fda      	lsrs	r2, r3, #31
 800a902:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800a906:	107f      	asrs	r7, r7, #1
 800a908:	005b      	lsls	r3, r3, #1
 800a90a:	2516      	movs	r5, #22
 800a90c:	4620      	mov	r0, r4
 800a90e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800a912:	1886      	adds	r6, r0, r2
 800a914:	428e      	cmp	r6, r1
 800a916:	bfde      	ittt	le
 800a918:	1b89      	suble	r1, r1, r6
 800a91a:	18b0      	addle	r0, r6, r2
 800a91c:	18a4      	addle	r4, r4, r2
 800a91e:	0049      	lsls	r1, r1, #1
 800a920:	3d01      	subs	r5, #1
 800a922:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800a926:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800a92a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800a92e:	d1f0      	bne.n	800a912 <__ieee754_sqrt+0x92>
 800a930:	462a      	mov	r2, r5
 800a932:	f04f 0e20 	mov.w	lr, #32
 800a936:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800a93a:	4281      	cmp	r1, r0
 800a93c:	eb06 0c05 	add.w	ip, r6, r5
 800a940:	dc02      	bgt.n	800a948 <__ieee754_sqrt+0xc8>
 800a942:	d113      	bne.n	800a96c <__ieee754_sqrt+0xec>
 800a944:	459c      	cmp	ip, r3
 800a946:	d811      	bhi.n	800a96c <__ieee754_sqrt+0xec>
 800a948:	f1bc 0f00 	cmp.w	ip, #0
 800a94c:	eb0c 0506 	add.w	r5, ip, r6
 800a950:	da43      	bge.n	800a9da <__ieee754_sqrt+0x15a>
 800a952:	2d00      	cmp	r5, #0
 800a954:	db41      	blt.n	800a9da <__ieee754_sqrt+0x15a>
 800a956:	f100 0801 	add.w	r8, r0, #1
 800a95a:	1a09      	subs	r1, r1, r0
 800a95c:	459c      	cmp	ip, r3
 800a95e:	bf88      	it	hi
 800a960:	f101 31ff 	addhi.w	r1, r1, #4294967295
 800a964:	eba3 030c 	sub.w	r3, r3, ip
 800a968:	4432      	add	r2, r6
 800a96a:	4640      	mov	r0, r8
 800a96c:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800a970:	f1be 0e01 	subs.w	lr, lr, #1
 800a974:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800a978:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800a97c:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800a980:	d1db      	bne.n	800a93a <__ieee754_sqrt+0xba>
 800a982:	430b      	orrs	r3, r1
 800a984:	d006      	beq.n	800a994 <__ieee754_sqrt+0x114>
 800a986:	1c50      	adds	r0, r2, #1
 800a988:	bf13      	iteet	ne
 800a98a:	3201      	addne	r2, #1
 800a98c:	3401      	addeq	r4, #1
 800a98e:	4672      	moveq	r2, lr
 800a990:	f022 0201 	bicne.w	r2, r2, #1
 800a994:	1063      	asrs	r3, r4, #1
 800a996:	0852      	lsrs	r2, r2, #1
 800a998:	07e1      	lsls	r1, r4, #31
 800a99a:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800a99e:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800a9a2:	bf48      	it	mi
 800a9a4:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800a9a8:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800a9ac:	4614      	mov	r4, r2
 800a9ae:	e781      	b.n	800a8b4 <__ieee754_sqrt+0x34>
 800a9b0:	0ad9      	lsrs	r1, r3, #11
 800a9b2:	3815      	subs	r0, #21
 800a9b4:	055b      	lsls	r3, r3, #21
 800a9b6:	2900      	cmp	r1, #0
 800a9b8:	d0fa      	beq.n	800a9b0 <__ieee754_sqrt+0x130>
 800a9ba:	02cd      	lsls	r5, r1, #11
 800a9bc:	d50a      	bpl.n	800a9d4 <__ieee754_sqrt+0x154>
 800a9be:	f1c2 0420 	rsb	r4, r2, #32
 800a9c2:	fa23 f404 	lsr.w	r4, r3, r4
 800a9c6:	1e55      	subs	r5, r2, #1
 800a9c8:	4093      	lsls	r3, r2
 800a9ca:	4321      	orrs	r1, r4
 800a9cc:	1b42      	subs	r2, r0, r5
 800a9ce:	e78a      	b.n	800a8e6 <__ieee754_sqrt+0x66>
 800a9d0:	4610      	mov	r0, r2
 800a9d2:	e7f0      	b.n	800a9b6 <__ieee754_sqrt+0x136>
 800a9d4:	0049      	lsls	r1, r1, #1
 800a9d6:	3201      	adds	r2, #1
 800a9d8:	e7ef      	b.n	800a9ba <__ieee754_sqrt+0x13a>
 800a9da:	4680      	mov	r8, r0
 800a9dc:	e7bd      	b.n	800a95a <__ieee754_sqrt+0xda>
 800a9de:	bf00      	nop
 800a9e0:	7ff00000 	.word	0x7ff00000
 800a9e4:	00000000 	.word	0x00000000

0800a9e8 <__kernel_cos>:
 800a9e8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9ec:	ec57 6b10 	vmov	r6, r7, d0
 800a9f0:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800a9f4:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800a9f8:	ed8d 1b00 	vstr	d1, [sp]
 800a9fc:	da07      	bge.n	800aa0e <__kernel_cos+0x26>
 800a9fe:	ee10 0a10 	vmov	r0, s0
 800aa02:	4639      	mov	r1, r7
 800aa04:	f7f6 f84c 	bl	8000aa0 <__aeabi_d2iz>
 800aa08:	2800      	cmp	r0, #0
 800aa0a:	f000 8088 	beq.w	800ab1e <__kernel_cos+0x136>
 800aa0e:	4632      	mov	r2, r6
 800aa10:	463b      	mov	r3, r7
 800aa12:	4630      	mov	r0, r6
 800aa14:	4639      	mov	r1, r7
 800aa16:	f7f5 fd93 	bl	8000540 <__aeabi_dmul>
 800aa1a:	4b51      	ldr	r3, [pc, #324]	; (800ab60 <__kernel_cos+0x178>)
 800aa1c:	2200      	movs	r2, #0
 800aa1e:	4604      	mov	r4, r0
 800aa20:	460d      	mov	r5, r1
 800aa22:	f7f5 fd8d 	bl	8000540 <__aeabi_dmul>
 800aa26:	a340      	add	r3, pc, #256	; (adr r3, 800ab28 <__kernel_cos+0x140>)
 800aa28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa2c:	4682      	mov	sl, r0
 800aa2e:	468b      	mov	fp, r1
 800aa30:	4620      	mov	r0, r4
 800aa32:	4629      	mov	r1, r5
 800aa34:	f7f5 fd84 	bl	8000540 <__aeabi_dmul>
 800aa38:	a33d      	add	r3, pc, #244	; (adr r3, 800ab30 <__kernel_cos+0x148>)
 800aa3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa3e:	f7f5 fbc9 	bl	80001d4 <__adddf3>
 800aa42:	4622      	mov	r2, r4
 800aa44:	462b      	mov	r3, r5
 800aa46:	f7f5 fd7b 	bl	8000540 <__aeabi_dmul>
 800aa4a:	a33b      	add	r3, pc, #236	; (adr r3, 800ab38 <__kernel_cos+0x150>)
 800aa4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa50:	f7f5 fbbe 	bl	80001d0 <__aeabi_dsub>
 800aa54:	4622      	mov	r2, r4
 800aa56:	462b      	mov	r3, r5
 800aa58:	f7f5 fd72 	bl	8000540 <__aeabi_dmul>
 800aa5c:	a338      	add	r3, pc, #224	; (adr r3, 800ab40 <__kernel_cos+0x158>)
 800aa5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa62:	f7f5 fbb7 	bl	80001d4 <__adddf3>
 800aa66:	4622      	mov	r2, r4
 800aa68:	462b      	mov	r3, r5
 800aa6a:	f7f5 fd69 	bl	8000540 <__aeabi_dmul>
 800aa6e:	a336      	add	r3, pc, #216	; (adr r3, 800ab48 <__kernel_cos+0x160>)
 800aa70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa74:	f7f5 fbac 	bl	80001d0 <__aeabi_dsub>
 800aa78:	4622      	mov	r2, r4
 800aa7a:	462b      	mov	r3, r5
 800aa7c:	f7f5 fd60 	bl	8000540 <__aeabi_dmul>
 800aa80:	a333      	add	r3, pc, #204	; (adr r3, 800ab50 <__kernel_cos+0x168>)
 800aa82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa86:	f7f5 fba5 	bl	80001d4 <__adddf3>
 800aa8a:	4622      	mov	r2, r4
 800aa8c:	462b      	mov	r3, r5
 800aa8e:	f7f5 fd57 	bl	8000540 <__aeabi_dmul>
 800aa92:	4622      	mov	r2, r4
 800aa94:	462b      	mov	r3, r5
 800aa96:	f7f5 fd53 	bl	8000540 <__aeabi_dmul>
 800aa9a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800aa9e:	4604      	mov	r4, r0
 800aaa0:	460d      	mov	r5, r1
 800aaa2:	4630      	mov	r0, r6
 800aaa4:	4639      	mov	r1, r7
 800aaa6:	f7f5 fd4b 	bl	8000540 <__aeabi_dmul>
 800aaaa:	460b      	mov	r3, r1
 800aaac:	4602      	mov	r2, r0
 800aaae:	4629      	mov	r1, r5
 800aab0:	4620      	mov	r0, r4
 800aab2:	f7f5 fb8d 	bl	80001d0 <__aeabi_dsub>
 800aab6:	4b2b      	ldr	r3, [pc, #172]	; (800ab64 <__kernel_cos+0x17c>)
 800aab8:	4598      	cmp	r8, r3
 800aaba:	4606      	mov	r6, r0
 800aabc:	460f      	mov	r7, r1
 800aabe:	dc10      	bgt.n	800aae2 <__kernel_cos+0xfa>
 800aac0:	4602      	mov	r2, r0
 800aac2:	460b      	mov	r3, r1
 800aac4:	4650      	mov	r0, sl
 800aac6:	4659      	mov	r1, fp
 800aac8:	f7f5 fb82 	bl	80001d0 <__aeabi_dsub>
 800aacc:	460b      	mov	r3, r1
 800aace:	4926      	ldr	r1, [pc, #152]	; (800ab68 <__kernel_cos+0x180>)
 800aad0:	4602      	mov	r2, r0
 800aad2:	2000      	movs	r0, #0
 800aad4:	f7f5 fb7c 	bl	80001d0 <__aeabi_dsub>
 800aad8:	ec41 0b10 	vmov	d0, r0, r1
 800aadc:	b003      	add	sp, #12
 800aade:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aae2:	4b22      	ldr	r3, [pc, #136]	; (800ab6c <__kernel_cos+0x184>)
 800aae4:	4920      	ldr	r1, [pc, #128]	; (800ab68 <__kernel_cos+0x180>)
 800aae6:	4598      	cmp	r8, r3
 800aae8:	bfcc      	ite	gt
 800aaea:	4d21      	ldrgt	r5, [pc, #132]	; (800ab70 <__kernel_cos+0x188>)
 800aaec:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800aaf0:	2400      	movs	r4, #0
 800aaf2:	4622      	mov	r2, r4
 800aaf4:	462b      	mov	r3, r5
 800aaf6:	2000      	movs	r0, #0
 800aaf8:	f7f5 fb6a 	bl	80001d0 <__aeabi_dsub>
 800aafc:	4622      	mov	r2, r4
 800aafe:	4680      	mov	r8, r0
 800ab00:	4689      	mov	r9, r1
 800ab02:	462b      	mov	r3, r5
 800ab04:	4650      	mov	r0, sl
 800ab06:	4659      	mov	r1, fp
 800ab08:	f7f5 fb62 	bl	80001d0 <__aeabi_dsub>
 800ab0c:	4632      	mov	r2, r6
 800ab0e:	463b      	mov	r3, r7
 800ab10:	f7f5 fb5e 	bl	80001d0 <__aeabi_dsub>
 800ab14:	4602      	mov	r2, r0
 800ab16:	460b      	mov	r3, r1
 800ab18:	4640      	mov	r0, r8
 800ab1a:	4649      	mov	r1, r9
 800ab1c:	e7da      	b.n	800aad4 <__kernel_cos+0xec>
 800ab1e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800ab58 <__kernel_cos+0x170>
 800ab22:	e7db      	b.n	800aadc <__kernel_cos+0xf4>
 800ab24:	f3af 8000 	nop.w
 800ab28:	be8838d4 	.word	0xbe8838d4
 800ab2c:	bda8fae9 	.word	0xbda8fae9
 800ab30:	bdb4b1c4 	.word	0xbdb4b1c4
 800ab34:	3e21ee9e 	.word	0x3e21ee9e
 800ab38:	809c52ad 	.word	0x809c52ad
 800ab3c:	3e927e4f 	.word	0x3e927e4f
 800ab40:	19cb1590 	.word	0x19cb1590
 800ab44:	3efa01a0 	.word	0x3efa01a0
 800ab48:	16c15177 	.word	0x16c15177
 800ab4c:	3f56c16c 	.word	0x3f56c16c
 800ab50:	5555554c 	.word	0x5555554c
 800ab54:	3fa55555 	.word	0x3fa55555
 800ab58:	00000000 	.word	0x00000000
 800ab5c:	3ff00000 	.word	0x3ff00000
 800ab60:	3fe00000 	.word	0x3fe00000
 800ab64:	3fd33332 	.word	0x3fd33332
 800ab68:	3ff00000 	.word	0x3ff00000
 800ab6c:	3fe90000 	.word	0x3fe90000
 800ab70:	3fd20000 	.word	0x3fd20000
 800ab74:	00000000 	.word	0x00000000

0800ab78 <__kernel_rem_pio2>:
 800ab78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab7c:	ed2d 8b02 	vpush	{d8}
 800ab80:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800ab84:	f112 0f14 	cmn.w	r2, #20
 800ab88:	9308      	str	r3, [sp, #32]
 800ab8a:	9101      	str	r1, [sp, #4]
 800ab8c:	4bc4      	ldr	r3, [pc, #784]	; (800aea0 <__kernel_rem_pio2+0x328>)
 800ab8e:	99a6      	ldr	r1, [sp, #664]	; 0x298
 800ab90:	900b      	str	r0, [sp, #44]	; 0x2c
 800ab92:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ab96:	9302      	str	r3, [sp, #8]
 800ab98:	9b08      	ldr	r3, [sp, #32]
 800ab9a:	f103 33ff 	add.w	r3, r3, #4294967295
 800ab9e:	bfa8      	it	ge
 800aba0:	1ed4      	subge	r4, r2, #3
 800aba2:	9306      	str	r3, [sp, #24]
 800aba4:	bfb2      	itee	lt
 800aba6:	2400      	movlt	r4, #0
 800aba8:	2318      	movge	r3, #24
 800abaa:	fb94 f4f3 	sdivge	r4, r4, r3
 800abae:	f06f 0317 	mvn.w	r3, #23
 800abb2:	fb04 3303 	mla	r3, r4, r3, r3
 800abb6:	eb03 0a02 	add.w	sl, r3, r2
 800abba:	9b02      	ldr	r3, [sp, #8]
 800abbc:	9a06      	ldr	r2, [sp, #24]
 800abbe:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 800ae90 <__kernel_rem_pio2+0x318>
 800abc2:	eb03 0802 	add.w	r8, r3, r2
 800abc6:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800abc8:	1aa7      	subs	r7, r4, r2
 800abca:	ae22      	add	r6, sp, #136	; 0x88
 800abcc:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800abd0:	2500      	movs	r5, #0
 800abd2:	4545      	cmp	r5, r8
 800abd4:	dd13      	ble.n	800abfe <__kernel_rem_pio2+0x86>
 800abd6:	9b08      	ldr	r3, [sp, #32]
 800abd8:	ed9f 8bad 	vldr	d8, [pc, #692]	; 800ae90 <__kernel_rem_pio2+0x318>
 800abdc:	aa22      	add	r2, sp, #136	; 0x88
 800abde:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800abe2:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800abe6:	f04f 0800 	mov.w	r8, #0
 800abea:	9b02      	ldr	r3, [sp, #8]
 800abec:	4598      	cmp	r8, r3
 800abee:	dc2f      	bgt.n	800ac50 <__kernel_rem_pio2+0xd8>
 800abf0:	ed8d 8b04 	vstr	d8, [sp, #16]
 800abf4:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 800abf8:	462f      	mov	r7, r5
 800abfa:	2600      	movs	r6, #0
 800abfc:	e01b      	b.n	800ac36 <__kernel_rem_pio2+0xbe>
 800abfe:	42ef      	cmn	r7, r5
 800ac00:	d407      	bmi.n	800ac12 <__kernel_rem_pio2+0x9a>
 800ac02:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800ac06:	f7f5 fc31 	bl	800046c <__aeabi_i2d>
 800ac0a:	e8e6 0102 	strd	r0, r1, [r6], #8
 800ac0e:	3501      	adds	r5, #1
 800ac10:	e7df      	b.n	800abd2 <__kernel_rem_pio2+0x5a>
 800ac12:	ec51 0b18 	vmov	r0, r1, d8
 800ac16:	e7f8      	b.n	800ac0a <__kernel_rem_pio2+0x92>
 800ac18:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ac1c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800ac20:	f7f5 fc8e 	bl	8000540 <__aeabi_dmul>
 800ac24:	4602      	mov	r2, r0
 800ac26:	460b      	mov	r3, r1
 800ac28:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ac2c:	f7f5 fad2 	bl	80001d4 <__adddf3>
 800ac30:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ac34:	3601      	adds	r6, #1
 800ac36:	9b06      	ldr	r3, [sp, #24]
 800ac38:	429e      	cmp	r6, r3
 800ac3a:	f1a7 0708 	sub.w	r7, r7, #8
 800ac3e:	ddeb      	ble.n	800ac18 <__kernel_rem_pio2+0xa0>
 800ac40:	ed9d 7b04 	vldr	d7, [sp, #16]
 800ac44:	f108 0801 	add.w	r8, r8, #1
 800ac48:	ecab 7b02 	vstmia	fp!, {d7}
 800ac4c:	3508      	adds	r5, #8
 800ac4e:	e7cc      	b.n	800abea <__kernel_rem_pio2+0x72>
 800ac50:	9b02      	ldr	r3, [sp, #8]
 800ac52:	aa0e      	add	r2, sp, #56	; 0x38
 800ac54:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ac58:	930d      	str	r3, [sp, #52]	; 0x34
 800ac5a:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800ac5c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800ac60:	9c02      	ldr	r4, [sp, #8]
 800ac62:	930c      	str	r3, [sp, #48]	; 0x30
 800ac64:	00e3      	lsls	r3, r4, #3
 800ac66:	930a      	str	r3, [sp, #40]	; 0x28
 800ac68:	ab9a      	add	r3, sp, #616	; 0x268
 800ac6a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ac6e:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800ac72:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 800ac76:	ab72      	add	r3, sp, #456	; 0x1c8
 800ac78:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800ac7c:	46c3      	mov	fp, r8
 800ac7e:	46a1      	mov	r9, r4
 800ac80:	f1b9 0f00 	cmp.w	r9, #0
 800ac84:	f1a5 0508 	sub.w	r5, r5, #8
 800ac88:	dc77      	bgt.n	800ad7a <__kernel_rem_pio2+0x202>
 800ac8a:	ec47 6b10 	vmov	d0, r6, r7
 800ac8e:	4650      	mov	r0, sl
 800ac90:	f000 fdae 	bl	800b7f0 <scalbn>
 800ac94:	ec57 6b10 	vmov	r6, r7, d0
 800ac98:	2200      	movs	r2, #0
 800ac9a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800ac9e:	ee10 0a10 	vmov	r0, s0
 800aca2:	4639      	mov	r1, r7
 800aca4:	f7f5 fc4c 	bl	8000540 <__aeabi_dmul>
 800aca8:	ec41 0b10 	vmov	d0, r0, r1
 800acac:	f000 fd20 	bl	800b6f0 <floor>
 800acb0:	4b7c      	ldr	r3, [pc, #496]	; (800aea4 <__kernel_rem_pio2+0x32c>)
 800acb2:	ec51 0b10 	vmov	r0, r1, d0
 800acb6:	2200      	movs	r2, #0
 800acb8:	f7f5 fc42 	bl	8000540 <__aeabi_dmul>
 800acbc:	4602      	mov	r2, r0
 800acbe:	460b      	mov	r3, r1
 800acc0:	4630      	mov	r0, r6
 800acc2:	4639      	mov	r1, r7
 800acc4:	f7f5 fa84 	bl	80001d0 <__aeabi_dsub>
 800acc8:	460f      	mov	r7, r1
 800acca:	4606      	mov	r6, r0
 800accc:	f7f5 fee8 	bl	8000aa0 <__aeabi_d2iz>
 800acd0:	9004      	str	r0, [sp, #16]
 800acd2:	f7f5 fbcb 	bl	800046c <__aeabi_i2d>
 800acd6:	4602      	mov	r2, r0
 800acd8:	460b      	mov	r3, r1
 800acda:	4630      	mov	r0, r6
 800acdc:	4639      	mov	r1, r7
 800acde:	f7f5 fa77 	bl	80001d0 <__aeabi_dsub>
 800ace2:	f1ba 0f00 	cmp.w	sl, #0
 800ace6:	4606      	mov	r6, r0
 800ace8:	460f      	mov	r7, r1
 800acea:	dd6d      	ble.n	800adc8 <__kernel_rem_pio2+0x250>
 800acec:	1e62      	subs	r2, r4, #1
 800acee:	ab0e      	add	r3, sp, #56	; 0x38
 800acf0:	9d04      	ldr	r5, [sp, #16]
 800acf2:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800acf6:	f1ca 0118 	rsb	r1, sl, #24
 800acfa:	fa40 f301 	asr.w	r3, r0, r1
 800acfe:	441d      	add	r5, r3
 800ad00:	408b      	lsls	r3, r1
 800ad02:	1ac0      	subs	r0, r0, r3
 800ad04:	ab0e      	add	r3, sp, #56	; 0x38
 800ad06:	9504      	str	r5, [sp, #16]
 800ad08:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800ad0c:	f1ca 0317 	rsb	r3, sl, #23
 800ad10:	fa40 fb03 	asr.w	fp, r0, r3
 800ad14:	f1bb 0f00 	cmp.w	fp, #0
 800ad18:	dd65      	ble.n	800ade6 <__kernel_rem_pio2+0x26e>
 800ad1a:	9b04      	ldr	r3, [sp, #16]
 800ad1c:	2200      	movs	r2, #0
 800ad1e:	3301      	adds	r3, #1
 800ad20:	9304      	str	r3, [sp, #16]
 800ad22:	4615      	mov	r5, r2
 800ad24:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800ad28:	4294      	cmp	r4, r2
 800ad2a:	f300 809c 	bgt.w	800ae66 <__kernel_rem_pio2+0x2ee>
 800ad2e:	f1ba 0f00 	cmp.w	sl, #0
 800ad32:	dd07      	ble.n	800ad44 <__kernel_rem_pio2+0x1cc>
 800ad34:	f1ba 0f01 	cmp.w	sl, #1
 800ad38:	f000 80c0 	beq.w	800aebc <__kernel_rem_pio2+0x344>
 800ad3c:	f1ba 0f02 	cmp.w	sl, #2
 800ad40:	f000 80c6 	beq.w	800aed0 <__kernel_rem_pio2+0x358>
 800ad44:	f1bb 0f02 	cmp.w	fp, #2
 800ad48:	d14d      	bne.n	800ade6 <__kernel_rem_pio2+0x26e>
 800ad4a:	4632      	mov	r2, r6
 800ad4c:	463b      	mov	r3, r7
 800ad4e:	4956      	ldr	r1, [pc, #344]	; (800aea8 <__kernel_rem_pio2+0x330>)
 800ad50:	2000      	movs	r0, #0
 800ad52:	f7f5 fa3d 	bl	80001d0 <__aeabi_dsub>
 800ad56:	4606      	mov	r6, r0
 800ad58:	460f      	mov	r7, r1
 800ad5a:	2d00      	cmp	r5, #0
 800ad5c:	d043      	beq.n	800ade6 <__kernel_rem_pio2+0x26e>
 800ad5e:	4650      	mov	r0, sl
 800ad60:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 800ae98 <__kernel_rem_pio2+0x320>
 800ad64:	f000 fd44 	bl	800b7f0 <scalbn>
 800ad68:	4630      	mov	r0, r6
 800ad6a:	4639      	mov	r1, r7
 800ad6c:	ec53 2b10 	vmov	r2, r3, d0
 800ad70:	f7f5 fa2e 	bl	80001d0 <__aeabi_dsub>
 800ad74:	4606      	mov	r6, r0
 800ad76:	460f      	mov	r7, r1
 800ad78:	e035      	b.n	800ade6 <__kernel_rem_pio2+0x26e>
 800ad7a:	4b4c      	ldr	r3, [pc, #304]	; (800aeac <__kernel_rem_pio2+0x334>)
 800ad7c:	2200      	movs	r2, #0
 800ad7e:	4630      	mov	r0, r6
 800ad80:	4639      	mov	r1, r7
 800ad82:	f7f5 fbdd 	bl	8000540 <__aeabi_dmul>
 800ad86:	f7f5 fe8b 	bl	8000aa0 <__aeabi_d2iz>
 800ad8a:	f7f5 fb6f 	bl	800046c <__aeabi_i2d>
 800ad8e:	4602      	mov	r2, r0
 800ad90:	460b      	mov	r3, r1
 800ad92:	ec43 2b18 	vmov	d8, r2, r3
 800ad96:	4b46      	ldr	r3, [pc, #280]	; (800aeb0 <__kernel_rem_pio2+0x338>)
 800ad98:	2200      	movs	r2, #0
 800ad9a:	f7f5 fbd1 	bl	8000540 <__aeabi_dmul>
 800ad9e:	4602      	mov	r2, r0
 800ada0:	460b      	mov	r3, r1
 800ada2:	4630      	mov	r0, r6
 800ada4:	4639      	mov	r1, r7
 800ada6:	f7f5 fa13 	bl	80001d0 <__aeabi_dsub>
 800adaa:	f7f5 fe79 	bl	8000aa0 <__aeabi_d2iz>
 800adae:	e9d5 2300 	ldrd	r2, r3, [r5]
 800adb2:	f84b 0b04 	str.w	r0, [fp], #4
 800adb6:	ec51 0b18 	vmov	r0, r1, d8
 800adba:	f7f5 fa0b 	bl	80001d4 <__adddf3>
 800adbe:	f109 39ff 	add.w	r9, r9, #4294967295
 800adc2:	4606      	mov	r6, r0
 800adc4:	460f      	mov	r7, r1
 800adc6:	e75b      	b.n	800ac80 <__kernel_rem_pio2+0x108>
 800adc8:	d106      	bne.n	800add8 <__kernel_rem_pio2+0x260>
 800adca:	1e63      	subs	r3, r4, #1
 800adcc:	aa0e      	add	r2, sp, #56	; 0x38
 800adce:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800add2:	ea4f 5be0 	mov.w	fp, r0, asr #23
 800add6:	e79d      	b.n	800ad14 <__kernel_rem_pio2+0x19c>
 800add8:	4b36      	ldr	r3, [pc, #216]	; (800aeb4 <__kernel_rem_pio2+0x33c>)
 800adda:	2200      	movs	r2, #0
 800addc:	f7f5 fe36 	bl	8000a4c <__aeabi_dcmpge>
 800ade0:	2800      	cmp	r0, #0
 800ade2:	d13d      	bne.n	800ae60 <__kernel_rem_pio2+0x2e8>
 800ade4:	4683      	mov	fp, r0
 800ade6:	2200      	movs	r2, #0
 800ade8:	2300      	movs	r3, #0
 800adea:	4630      	mov	r0, r6
 800adec:	4639      	mov	r1, r7
 800adee:	f7f5 fe0f 	bl	8000a10 <__aeabi_dcmpeq>
 800adf2:	2800      	cmp	r0, #0
 800adf4:	f000 80c0 	beq.w	800af78 <__kernel_rem_pio2+0x400>
 800adf8:	1e65      	subs	r5, r4, #1
 800adfa:	462b      	mov	r3, r5
 800adfc:	2200      	movs	r2, #0
 800adfe:	9902      	ldr	r1, [sp, #8]
 800ae00:	428b      	cmp	r3, r1
 800ae02:	da6c      	bge.n	800aede <__kernel_rem_pio2+0x366>
 800ae04:	2a00      	cmp	r2, #0
 800ae06:	f000 8089 	beq.w	800af1c <__kernel_rem_pio2+0x3a4>
 800ae0a:	ab0e      	add	r3, sp, #56	; 0x38
 800ae0c:	f1aa 0a18 	sub.w	sl, sl, #24
 800ae10:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	f000 80ad 	beq.w	800af74 <__kernel_rem_pio2+0x3fc>
 800ae1a:	4650      	mov	r0, sl
 800ae1c:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 800ae98 <__kernel_rem_pio2+0x320>
 800ae20:	f000 fce6 	bl	800b7f0 <scalbn>
 800ae24:	ab9a      	add	r3, sp, #616	; 0x268
 800ae26:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800ae2a:	ec57 6b10 	vmov	r6, r7, d0
 800ae2e:	00ec      	lsls	r4, r5, #3
 800ae30:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 800ae34:	46aa      	mov	sl, r5
 800ae36:	f1ba 0f00 	cmp.w	sl, #0
 800ae3a:	f280 80d6 	bge.w	800afea <__kernel_rem_pio2+0x472>
 800ae3e:	ed9f 8b14 	vldr	d8, [pc, #80]	; 800ae90 <__kernel_rem_pio2+0x318>
 800ae42:	462e      	mov	r6, r5
 800ae44:	2e00      	cmp	r6, #0
 800ae46:	f2c0 8104 	blt.w	800b052 <__kernel_rem_pio2+0x4da>
 800ae4a:	ab72      	add	r3, sp, #456	; 0x1c8
 800ae4c:	ed8d 8b06 	vstr	d8, [sp, #24]
 800ae50:	f8df a064 	ldr.w	sl, [pc, #100]	; 800aeb8 <__kernel_rem_pio2+0x340>
 800ae54:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 800ae58:	f04f 0800 	mov.w	r8, #0
 800ae5c:	1baf      	subs	r7, r5, r6
 800ae5e:	e0ea      	b.n	800b036 <__kernel_rem_pio2+0x4be>
 800ae60:	f04f 0b02 	mov.w	fp, #2
 800ae64:	e759      	b.n	800ad1a <__kernel_rem_pio2+0x1a2>
 800ae66:	f8d8 3000 	ldr.w	r3, [r8]
 800ae6a:	b955      	cbnz	r5, 800ae82 <__kernel_rem_pio2+0x30a>
 800ae6c:	b123      	cbz	r3, 800ae78 <__kernel_rem_pio2+0x300>
 800ae6e:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800ae72:	f8c8 3000 	str.w	r3, [r8]
 800ae76:	2301      	movs	r3, #1
 800ae78:	3201      	adds	r2, #1
 800ae7a:	f108 0804 	add.w	r8, r8, #4
 800ae7e:	461d      	mov	r5, r3
 800ae80:	e752      	b.n	800ad28 <__kernel_rem_pio2+0x1b0>
 800ae82:	1acb      	subs	r3, r1, r3
 800ae84:	f8c8 3000 	str.w	r3, [r8]
 800ae88:	462b      	mov	r3, r5
 800ae8a:	e7f5      	b.n	800ae78 <__kernel_rem_pio2+0x300>
 800ae8c:	f3af 8000 	nop.w
	...
 800ae9c:	3ff00000 	.word	0x3ff00000
 800aea0:	0800bc10 	.word	0x0800bc10
 800aea4:	40200000 	.word	0x40200000
 800aea8:	3ff00000 	.word	0x3ff00000
 800aeac:	3e700000 	.word	0x3e700000
 800aeb0:	41700000 	.word	0x41700000
 800aeb4:	3fe00000 	.word	0x3fe00000
 800aeb8:	0800bbd0 	.word	0x0800bbd0
 800aebc:	1e62      	subs	r2, r4, #1
 800aebe:	ab0e      	add	r3, sp, #56	; 0x38
 800aec0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aec4:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800aec8:	a90e      	add	r1, sp, #56	; 0x38
 800aeca:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800aece:	e739      	b.n	800ad44 <__kernel_rem_pio2+0x1cc>
 800aed0:	1e62      	subs	r2, r4, #1
 800aed2:	ab0e      	add	r3, sp, #56	; 0x38
 800aed4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aed8:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800aedc:	e7f4      	b.n	800aec8 <__kernel_rem_pio2+0x350>
 800aede:	a90e      	add	r1, sp, #56	; 0x38
 800aee0:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800aee4:	3b01      	subs	r3, #1
 800aee6:	430a      	orrs	r2, r1
 800aee8:	e789      	b.n	800adfe <__kernel_rem_pio2+0x286>
 800aeea:	3301      	adds	r3, #1
 800aeec:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800aef0:	2900      	cmp	r1, #0
 800aef2:	d0fa      	beq.n	800aeea <__kernel_rem_pio2+0x372>
 800aef4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800aef6:	f502 721a 	add.w	r2, r2, #616	; 0x268
 800aefa:	446a      	add	r2, sp
 800aefc:	3a98      	subs	r2, #152	; 0x98
 800aefe:	920a      	str	r2, [sp, #40]	; 0x28
 800af00:	9a08      	ldr	r2, [sp, #32]
 800af02:	18e3      	adds	r3, r4, r3
 800af04:	18a5      	adds	r5, r4, r2
 800af06:	aa22      	add	r2, sp, #136	; 0x88
 800af08:	f104 0801 	add.w	r8, r4, #1
 800af0c:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 800af10:	9304      	str	r3, [sp, #16]
 800af12:	9b04      	ldr	r3, [sp, #16]
 800af14:	4543      	cmp	r3, r8
 800af16:	da04      	bge.n	800af22 <__kernel_rem_pio2+0x3aa>
 800af18:	461c      	mov	r4, r3
 800af1a:	e6a3      	b.n	800ac64 <__kernel_rem_pio2+0xec>
 800af1c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800af1e:	2301      	movs	r3, #1
 800af20:	e7e4      	b.n	800aeec <__kernel_rem_pio2+0x374>
 800af22:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800af24:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800af28:	f7f5 faa0 	bl	800046c <__aeabi_i2d>
 800af2c:	e8e5 0102 	strd	r0, r1, [r5], #8
 800af30:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800af32:	46ab      	mov	fp, r5
 800af34:	461c      	mov	r4, r3
 800af36:	f04f 0900 	mov.w	r9, #0
 800af3a:	2600      	movs	r6, #0
 800af3c:	2700      	movs	r7, #0
 800af3e:	9b06      	ldr	r3, [sp, #24]
 800af40:	4599      	cmp	r9, r3
 800af42:	dd06      	ble.n	800af52 <__kernel_rem_pio2+0x3da>
 800af44:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800af46:	e8e3 6702 	strd	r6, r7, [r3], #8
 800af4a:	f108 0801 	add.w	r8, r8, #1
 800af4e:	930a      	str	r3, [sp, #40]	; 0x28
 800af50:	e7df      	b.n	800af12 <__kernel_rem_pio2+0x39a>
 800af52:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800af56:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800af5a:	f7f5 faf1 	bl	8000540 <__aeabi_dmul>
 800af5e:	4602      	mov	r2, r0
 800af60:	460b      	mov	r3, r1
 800af62:	4630      	mov	r0, r6
 800af64:	4639      	mov	r1, r7
 800af66:	f7f5 f935 	bl	80001d4 <__adddf3>
 800af6a:	f109 0901 	add.w	r9, r9, #1
 800af6e:	4606      	mov	r6, r0
 800af70:	460f      	mov	r7, r1
 800af72:	e7e4      	b.n	800af3e <__kernel_rem_pio2+0x3c6>
 800af74:	3d01      	subs	r5, #1
 800af76:	e748      	b.n	800ae0a <__kernel_rem_pio2+0x292>
 800af78:	ec47 6b10 	vmov	d0, r6, r7
 800af7c:	f1ca 0000 	rsb	r0, sl, #0
 800af80:	f000 fc36 	bl	800b7f0 <scalbn>
 800af84:	ec57 6b10 	vmov	r6, r7, d0
 800af88:	4ba0      	ldr	r3, [pc, #640]	; (800b20c <__kernel_rem_pio2+0x694>)
 800af8a:	ee10 0a10 	vmov	r0, s0
 800af8e:	2200      	movs	r2, #0
 800af90:	4639      	mov	r1, r7
 800af92:	f7f5 fd5b 	bl	8000a4c <__aeabi_dcmpge>
 800af96:	b1f8      	cbz	r0, 800afd8 <__kernel_rem_pio2+0x460>
 800af98:	4b9d      	ldr	r3, [pc, #628]	; (800b210 <__kernel_rem_pio2+0x698>)
 800af9a:	2200      	movs	r2, #0
 800af9c:	4630      	mov	r0, r6
 800af9e:	4639      	mov	r1, r7
 800afa0:	f7f5 face 	bl	8000540 <__aeabi_dmul>
 800afa4:	f7f5 fd7c 	bl	8000aa0 <__aeabi_d2iz>
 800afa8:	4680      	mov	r8, r0
 800afaa:	f7f5 fa5f 	bl	800046c <__aeabi_i2d>
 800afae:	4b97      	ldr	r3, [pc, #604]	; (800b20c <__kernel_rem_pio2+0x694>)
 800afb0:	2200      	movs	r2, #0
 800afb2:	f7f5 fac5 	bl	8000540 <__aeabi_dmul>
 800afb6:	460b      	mov	r3, r1
 800afb8:	4602      	mov	r2, r0
 800afba:	4639      	mov	r1, r7
 800afbc:	4630      	mov	r0, r6
 800afbe:	f7f5 f907 	bl	80001d0 <__aeabi_dsub>
 800afc2:	f7f5 fd6d 	bl	8000aa0 <__aeabi_d2iz>
 800afc6:	1c65      	adds	r5, r4, #1
 800afc8:	ab0e      	add	r3, sp, #56	; 0x38
 800afca:	f10a 0a18 	add.w	sl, sl, #24
 800afce:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800afd2:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800afd6:	e720      	b.n	800ae1a <__kernel_rem_pio2+0x2a2>
 800afd8:	4630      	mov	r0, r6
 800afda:	4639      	mov	r1, r7
 800afdc:	f7f5 fd60 	bl	8000aa0 <__aeabi_d2iz>
 800afe0:	ab0e      	add	r3, sp, #56	; 0x38
 800afe2:	4625      	mov	r5, r4
 800afe4:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800afe8:	e717      	b.n	800ae1a <__kernel_rem_pio2+0x2a2>
 800afea:	ab0e      	add	r3, sp, #56	; 0x38
 800afec:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800aff0:	f7f5 fa3c 	bl	800046c <__aeabi_i2d>
 800aff4:	4632      	mov	r2, r6
 800aff6:	463b      	mov	r3, r7
 800aff8:	f7f5 faa2 	bl	8000540 <__aeabi_dmul>
 800affc:	4b84      	ldr	r3, [pc, #528]	; (800b210 <__kernel_rem_pio2+0x698>)
 800affe:	e968 0102 	strd	r0, r1, [r8, #-8]!
 800b002:	2200      	movs	r2, #0
 800b004:	4630      	mov	r0, r6
 800b006:	4639      	mov	r1, r7
 800b008:	f7f5 fa9a 	bl	8000540 <__aeabi_dmul>
 800b00c:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b010:	4606      	mov	r6, r0
 800b012:	460f      	mov	r7, r1
 800b014:	e70f      	b.n	800ae36 <__kernel_rem_pio2+0x2be>
 800b016:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800b01a:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800b01e:	f7f5 fa8f 	bl	8000540 <__aeabi_dmul>
 800b022:	4602      	mov	r2, r0
 800b024:	460b      	mov	r3, r1
 800b026:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b02a:	f7f5 f8d3 	bl	80001d4 <__adddf3>
 800b02e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800b032:	f108 0801 	add.w	r8, r8, #1
 800b036:	9b02      	ldr	r3, [sp, #8]
 800b038:	4598      	cmp	r8, r3
 800b03a:	dc01      	bgt.n	800b040 <__kernel_rem_pio2+0x4c8>
 800b03c:	45b8      	cmp	r8, r7
 800b03e:	ddea      	ble.n	800b016 <__kernel_rem_pio2+0x49e>
 800b040:	ed9d 7b06 	vldr	d7, [sp, #24]
 800b044:	ab4a      	add	r3, sp, #296	; 0x128
 800b046:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800b04a:	ed87 7b00 	vstr	d7, [r7]
 800b04e:	3e01      	subs	r6, #1
 800b050:	e6f8      	b.n	800ae44 <__kernel_rem_pio2+0x2cc>
 800b052:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800b054:	2b02      	cmp	r3, #2
 800b056:	dc0b      	bgt.n	800b070 <__kernel_rem_pio2+0x4f8>
 800b058:	2b00      	cmp	r3, #0
 800b05a:	dc35      	bgt.n	800b0c8 <__kernel_rem_pio2+0x550>
 800b05c:	d059      	beq.n	800b112 <__kernel_rem_pio2+0x59a>
 800b05e:	9b04      	ldr	r3, [sp, #16]
 800b060:	f003 0007 	and.w	r0, r3, #7
 800b064:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 800b068:	ecbd 8b02 	vpop	{d8}
 800b06c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b070:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800b072:	2b03      	cmp	r3, #3
 800b074:	d1f3      	bne.n	800b05e <__kernel_rem_pio2+0x4e6>
 800b076:	ab4a      	add	r3, sp, #296	; 0x128
 800b078:	4423      	add	r3, r4
 800b07a:	9306      	str	r3, [sp, #24]
 800b07c:	461c      	mov	r4, r3
 800b07e:	469a      	mov	sl, r3
 800b080:	9502      	str	r5, [sp, #8]
 800b082:	9b02      	ldr	r3, [sp, #8]
 800b084:	2b00      	cmp	r3, #0
 800b086:	f1aa 0a08 	sub.w	sl, sl, #8
 800b08a:	dc6b      	bgt.n	800b164 <__kernel_rem_pio2+0x5ec>
 800b08c:	46aa      	mov	sl, r5
 800b08e:	f1ba 0f01 	cmp.w	sl, #1
 800b092:	f1a4 0408 	sub.w	r4, r4, #8
 800b096:	f300 8085 	bgt.w	800b1a4 <__kernel_rem_pio2+0x62c>
 800b09a:	9c06      	ldr	r4, [sp, #24]
 800b09c:	2000      	movs	r0, #0
 800b09e:	3408      	adds	r4, #8
 800b0a0:	2100      	movs	r1, #0
 800b0a2:	2d01      	cmp	r5, #1
 800b0a4:	f300 809d 	bgt.w	800b1e2 <__kernel_rem_pio2+0x66a>
 800b0a8:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800b0ac:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 800b0b0:	f1bb 0f00 	cmp.w	fp, #0
 800b0b4:	f040 809b 	bne.w	800b1ee <__kernel_rem_pio2+0x676>
 800b0b8:	9b01      	ldr	r3, [sp, #4]
 800b0ba:	e9c3 5600 	strd	r5, r6, [r3]
 800b0be:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800b0c2:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800b0c6:	e7ca      	b.n	800b05e <__kernel_rem_pio2+0x4e6>
 800b0c8:	3408      	adds	r4, #8
 800b0ca:	ab4a      	add	r3, sp, #296	; 0x128
 800b0cc:	441c      	add	r4, r3
 800b0ce:	462e      	mov	r6, r5
 800b0d0:	2000      	movs	r0, #0
 800b0d2:	2100      	movs	r1, #0
 800b0d4:	2e00      	cmp	r6, #0
 800b0d6:	da36      	bge.n	800b146 <__kernel_rem_pio2+0x5ce>
 800b0d8:	f1bb 0f00 	cmp.w	fp, #0
 800b0dc:	d039      	beq.n	800b152 <__kernel_rem_pio2+0x5da>
 800b0de:	4602      	mov	r2, r0
 800b0e0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b0e4:	9c01      	ldr	r4, [sp, #4]
 800b0e6:	e9c4 2300 	strd	r2, r3, [r4]
 800b0ea:	4602      	mov	r2, r0
 800b0ec:	460b      	mov	r3, r1
 800b0ee:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 800b0f2:	f7f5 f86d 	bl	80001d0 <__aeabi_dsub>
 800b0f6:	ae4c      	add	r6, sp, #304	; 0x130
 800b0f8:	2401      	movs	r4, #1
 800b0fa:	42a5      	cmp	r5, r4
 800b0fc:	da2c      	bge.n	800b158 <__kernel_rem_pio2+0x5e0>
 800b0fe:	f1bb 0f00 	cmp.w	fp, #0
 800b102:	d002      	beq.n	800b10a <__kernel_rem_pio2+0x592>
 800b104:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b108:	4619      	mov	r1, r3
 800b10a:	9b01      	ldr	r3, [sp, #4]
 800b10c:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800b110:	e7a5      	b.n	800b05e <__kernel_rem_pio2+0x4e6>
 800b112:	f504 731a 	add.w	r3, r4, #616	; 0x268
 800b116:	eb0d 0403 	add.w	r4, sp, r3
 800b11a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800b11e:	2000      	movs	r0, #0
 800b120:	2100      	movs	r1, #0
 800b122:	2d00      	cmp	r5, #0
 800b124:	da09      	bge.n	800b13a <__kernel_rem_pio2+0x5c2>
 800b126:	f1bb 0f00 	cmp.w	fp, #0
 800b12a:	d002      	beq.n	800b132 <__kernel_rem_pio2+0x5ba>
 800b12c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b130:	4619      	mov	r1, r3
 800b132:	9b01      	ldr	r3, [sp, #4]
 800b134:	e9c3 0100 	strd	r0, r1, [r3]
 800b138:	e791      	b.n	800b05e <__kernel_rem_pio2+0x4e6>
 800b13a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800b13e:	f7f5 f849 	bl	80001d4 <__adddf3>
 800b142:	3d01      	subs	r5, #1
 800b144:	e7ed      	b.n	800b122 <__kernel_rem_pio2+0x5aa>
 800b146:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800b14a:	f7f5 f843 	bl	80001d4 <__adddf3>
 800b14e:	3e01      	subs	r6, #1
 800b150:	e7c0      	b.n	800b0d4 <__kernel_rem_pio2+0x55c>
 800b152:	4602      	mov	r2, r0
 800b154:	460b      	mov	r3, r1
 800b156:	e7c5      	b.n	800b0e4 <__kernel_rem_pio2+0x56c>
 800b158:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800b15c:	f7f5 f83a 	bl	80001d4 <__adddf3>
 800b160:	3401      	adds	r4, #1
 800b162:	e7ca      	b.n	800b0fa <__kernel_rem_pio2+0x582>
 800b164:	e9da 8900 	ldrd	r8, r9, [sl]
 800b168:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800b16c:	9b02      	ldr	r3, [sp, #8]
 800b16e:	3b01      	subs	r3, #1
 800b170:	9302      	str	r3, [sp, #8]
 800b172:	4632      	mov	r2, r6
 800b174:	463b      	mov	r3, r7
 800b176:	4640      	mov	r0, r8
 800b178:	4649      	mov	r1, r9
 800b17a:	f7f5 f82b 	bl	80001d4 <__adddf3>
 800b17e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800b182:	4602      	mov	r2, r0
 800b184:	460b      	mov	r3, r1
 800b186:	4640      	mov	r0, r8
 800b188:	4649      	mov	r1, r9
 800b18a:	f7f5 f821 	bl	80001d0 <__aeabi_dsub>
 800b18e:	4632      	mov	r2, r6
 800b190:	463b      	mov	r3, r7
 800b192:	f7f5 f81f 	bl	80001d4 <__adddf3>
 800b196:	ed9d 7b08 	vldr	d7, [sp, #32]
 800b19a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800b19e:	ed8a 7b00 	vstr	d7, [sl]
 800b1a2:	e76e      	b.n	800b082 <__kernel_rem_pio2+0x50a>
 800b1a4:	e9d4 8900 	ldrd	r8, r9, [r4]
 800b1a8:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800b1ac:	4640      	mov	r0, r8
 800b1ae:	4632      	mov	r2, r6
 800b1b0:	463b      	mov	r3, r7
 800b1b2:	4649      	mov	r1, r9
 800b1b4:	f7f5 f80e 	bl	80001d4 <__adddf3>
 800b1b8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b1bc:	4602      	mov	r2, r0
 800b1be:	460b      	mov	r3, r1
 800b1c0:	4640      	mov	r0, r8
 800b1c2:	4649      	mov	r1, r9
 800b1c4:	f7f5 f804 	bl	80001d0 <__aeabi_dsub>
 800b1c8:	4632      	mov	r2, r6
 800b1ca:	463b      	mov	r3, r7
 800b1cc:	f7f5 f802 	bl	80001d4 <__adddf3>
 800b1d0:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b1d4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800b1d8:	ed84 7b00 	vstr	d7, [r4]
 800b1dc:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b1e0:	e755      	b.n	800b08e <__kernel_rem_pio2+0x516>
 800b1e2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800b1e6:	f7f4 fff5 	bl	80001d4 <__adddf3>
 800b1ea:	3d01      	subs	r5, #1
 800b1ec:	e759      	b.n	800b0a2 <__kernel_rem_pio2+0x52a>
 800b1ee:	9b01      	ldr	r3, [sp, #4]
 800b1f0:	9a01      	ldr	r2, [sp, #4]
 800b1f2:	601d      	str	r5, [r3, #0]
 800b1f4:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 800b1f8:	605c      	str	r4, [r3, #4]
 800b1fa:	609f      	str	r7, [r3, #8]
 800b1fc:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 800b200:	60d3      	str	r3, [r2, #12]
 800b202:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b206:	6110      	str	r0, [r2, #16]
 800b208:	6153      	str	r3, [r2, #20]
 800b20a:	e728      	b.n	800b05e <__kernel_rem_pio2+0x4e6>
 800b20c:	41700000 	.word	0x41700000
 800b210:	3e700000 	.word	0x3e700000
 800b214:	00000000 	.word	0x00000000

0800b218 <__kernel_sin>:
 800b218:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b21c:	ed2d 8b04 	vpush	{d8-d9}
 800b220:	eeb0 8a41 	vmov.f32	s16, s2
 800b224:	eef0 8a61 	vmov.f32	s17, s3
 800b228:	ec55 4b10 	vmov	r4, r5, d0
 800b22c:	b083      	sub	sp, #12
 800b22e:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800b232:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800b236:	9001      	str	r0, [sp, #4]
 800b238:	da06      	bge.n	800b248 <__kernel_sin+0x30>
 800b23a:	ee10 0a10 	vmov	r0, s0
 800b23e:	4629      	mov	r1, r5
 800b240:	f7f5 fc2e 	bl	8000aa0 <__aeabi_d2iz>
 800b244:	2800      	cmp	r0, #0
 800b246:	d051      	beq.n	800b2ec <__kernel_sin+0xd4>
 800b248:	4622      	mov	r2, r4
 800b24a:	462b      	mov	r3, r5
 800b24c:	4620      	mov	r0, r4
 800b24e:	4629      	mov	r1, r5
 800b250:	f7f5 f976 	bl	8000540 <__aeabi_dmul>
 800b254:	4682      	mov	sl, r0
 800b256:	468b      	mov	fp, r1
 800b258:	4602      	mov	r2, r0
 800b25a:	460b      	mov	r3, r1
 800b25c:	4620      	mov	r0, r4
 800b25e:	4629      	mov	r1, r5
 800b260:	f7f5 f96e 	bl	8000540 <__aeabi_dmul>
 800b264:	a341      	add	r3, pc, #260	; (adr r3, 800b36c <__kernel_sin+0x154>)
 800b266:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b26a:	4680      	mov	r8, r0
 800b26c:	4689      	mov	r9, r1
 800b26e:	4650      	mov	r0, sl
 800b270:	4659      	mov	r1, fp
 800b272:	f7f5 f965 	bl	8000540 <__aeabi_dmul>
 800b276:	a33f      	add	r3, pc, #252	; (adr r3, 800b374 <__kernel_sin+0x15c>)
 800b278:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b27c:	f7f4 ffa8 	bl	80001d0 <__aeabi_dsub>
 800b280:	4652      	mov	r2, sl
 800b282:	465b      	mov	r3, fp
 800b284:	f7f5 f95c 	bl	8000540 <__aeabi_dmul>
 800b288:	a33c      	add	r3, pc, #240	; (adr r3, 800b37c <__kernel_sin+0x164>)
 800b28a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b28e:	f7f4 ffa1 	bl	80001d4 <__adddf3>
 800b292:	4652      	mov	r2, sl
 800b294:	465b      	mov	r3, fp
 800b296:	f7f5 f953 	bl	8000540 <__aeabi_dmul>
 800b29a:	a33a      	add	r3, pc, #232	; (adr r3, 800b384 <__kernel_sin+0x16c>)
 800b29c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2a0:	f7f4 ff96 	bl	80001d0 <__aeabi_dsub>
 800b2a4:	4652      	mov	r2, sl
 800b2a6:	465b      	mov	r3, fp
 800b2a8:	f7f5 f94a 	bl	8000540 <__aeabi_dmul>
 800b2ac:	a337      	add	r3, pc, #220	; (adr r3, 800b38c <__kernel_sin+0x174>)
 800b2ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2b2:	f7f4 ff8f 	bl	80001d4 <__adddf3>
 800b2b6:	9b01      	ldr	r3, [sp, #4]
 800b2b8:	4606      	mov	r6, r0
 800b2ba:	460f      	mov	r7, r1
 800b2bc:	b9eb      	cbnz	r3, 800b2fa <__kernel_sin+0xe2>
 800b2be:	4602      	mov	r2, r0
 800b2c0:	460b      	mov	r3, r1
 800b2c2:	4650      	mov	r0, sl
 800b2c4:	4659      	mov	r1, fp
 800b2c6:	f7f5 f93b 	bl	8000540 <__aeabi_dmul>
 800b2ca:	a325      	add	r3, pc, #148	; (adr r3, 800b360 <__kernel_sin+0x148>)
 800b2cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2d0:	f7f4 ff7e 	bl	80001d0 <__aeabi_dsub>
 800b2d4:	4642      	mov	r2, r8
 800b2d6:	464b      	mov	r3, r9
 800b2d8:	f7f5 f932 	bl	8000540 <__aeabi_dmul>
 800b2dc:	4602      	mov	r2, r0
 800b2de:	460b      	mov	r3, r1
 800b2e0:	4620      	mov	r0, r4
 800b2e2:	4629      	mov	r1, r5
 800b2e4:	f7f4 ff76 	bl	80001d4 <__adddf3>
 800b2e8:	4604      	mov	r4, r0
 800b2ea:	460d      	mov	r5, r1
 800b2ec:	ec45 4b10 	vmov	d0, r4, r5
 800b2f0:	b003      	add	sp, #12
 800b2f2:	ecbd 8b04 	vpop	{d8-d9}
 800b2f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b2fa:	4b1b      	ldr	r3, [pc, #108]	; (800b368 <__kernel_sin+0x150>)
 800b2fc:	ec51 0b18 	vmov	r0, r1, d8
 800b300:	2200      	movs	r2, #0
 800b302:	f7f5 f91d 	bl	8000540 <__aeabi_dmul>
 800b306:	4632      	mov	r2, r6
 800b308:	ec41 0b19 	vmov	d9, r0, r1
 800b30c:	463b      	mov	r3, r7
 800b30e:	4640      	mov	r0, r8
 800b310:	4649      	mov	r1, r9
 800b312:	f7f5 f915 	bl	8000540 <__aeabi_dmul>
 800b316:	4602      	mov	r2, r0
 800b318:	460b      	mov	r3, r1
 800b31a:	ec51 0b19 	vmov	r0, r1, d9
 800b31e:	f7f4 ff57 	bl	80001d0 <__aeabi_dsub>
 800b322:	4652      	mov	r2, sl
 800b324:	465b      	mov	r3, fp
 800b326:	f7f5 f90b 	bl	8000540 <__aeabi_dmul>
 800b32a:	ec53 2b18 	vmov	r2, r3, d8
 800b32e:	f7f4 ff4f 	bl	80001d0 <__aeabi_dsub>
 800b332:	a30b      	add	r3, pc, #44	; (adr r3, 800b360 <__kernel_sin+0x148>)
 800b334:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b338:	4606      	mov	r6, r0
 800b33a:	460f      	mov	r7, r1
 800b33c:	4640      	mov	r0, r8
 800b33e:	4649      	mov	r1, r9
 800b340:	f7f5 f8fe 	bl	8000540 <__aeabi_dmul>
 800b344:	4602      	mov	r2, r0
 800b346:	460b      	mov	r3, r1
 800b348:	4630      	mov	r0, r6
 800b34a:	4639      	mov	r1, r7
 800b34c:	f7f4 ff42 	bl	80001d4 <__adddf3>
 800b350:	4602      	mov	r2, r0
 800b352:	460b      	mov	r3, r1
 800b354:	4620      	mov	r0, r4
 800b356:	4629      	mov	r1, r5
 800b358:	f7f4 ff3a 	bl	80001d0 <__aeabi_dsub>
 800b35c:	e7c4      	b.n	800b2e8 <__kernel_sin+0xd0>
 800b35e:	bf00      	nop
 800b360:	55555549 	.word	0x55555549
 800b364:	3fc55555 	.word	0x3fc55555
 800b368:	3fe00000 	.word	0x3fe00000
 800b36c:	5acfd57c 	.word	0x5acfd57c
 800b370:	3de5d93a 	.word	0x3de5d93a
 800b374:	8a2b9ceb 	.word	0x8a2b9ceb
 800b378:	3e5ae5e6 	.word	0x3e5ae5e6
 800b37c:	57b1fe7d 	.word	0x57b1fe7d
 800b380:	3ec71de3 	.word	0x3ec71de3
 800b384:	19c161d5 	.word	0x19c161d5
 800b388:	3f2a01a0 	.word	0x3f2a01a0
 800b38c:	1110f8a6 	.word	0x1110f8a6
 800b390:	3f811111 	.word	0x3f811111
 800b394:	00000000 	.word	0x00000000

0800b398 <atan>:
 800b398:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b39c:	ec55 4b10 	vmov	r4, r5, d0
 800b3a0:	4bc3      	ldr	r3, [pc, #780]	; (800b6b0 <atan+0x318>)
 800b3a2:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800b3a6:	429e      	cmp	r6, r3
 800b3a8:	46ab      	mov	fp, r5
 800b3aa:	dd18      	ble.n	800b3de <atan+0x46>
 800b3ac:	4bc1      	ldr	r3, [pc, #772]	; (800b6b4 <atan+0x31c>)
 800b3ae:	429e      	cmp	r6, r3
 800b3b0:	dc01      	bgt.n	800b3b6 <atan+0x1e>
 800b3b2:	d109      	bne.n	800b3c8 <atan+0x30>
 800b3b4:	b144      	cbz	r4, 800b3c8 <atan+0x30>
 800b3b6:	4622      	mov	r2, r4
 800b3b8:	462b      	mov	r3, r5
 800b3ba:	4620      	mov	r0, r4
 800b3bc:	4629      	mov	r1, r5
 800b3be:	f7f4 ff09 	bl	80001d4 <__adddf3>
 800b3c2:	4604      	mov	r4, r0
 800b3c4:	460d      	mov	r5, r1
 800b3c6:	e006      	b.n	800b3d6 <atan+0x3e>
 800b3c8:	f1bb 0f00 	cmp.w	fp, #0
 800b3cc:	f300 8131 	bgt.w	800b632 <atan+0x29a>
 800b3d0:	a59b      	add	r5, pc, #620	; (adr r5, 800b640 <atan+0x2a8>)
 800b3d2:	e9d5 4500 	ldrd	r4, r5, [r5]
 800b3d6:	ec45 4b10 	vmov	d0, r4, r5
 800b3da:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b3de:	4bb6      	ldr	r3, [pc, #728]	; (800b6b8 <atan+0x320>)
 800b3e0:	429e      	cmp	r6, r3
 800b3e2:	dc14      	bgt.n	800b40e <atan+0x76>
 800b3e4:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800b3e8:	429e      	cmp	r6, r3
 800b3ea:	dc0d      	bgt.n	800b408 <atan+0x70>
 800b3ec:	a396      	add	r3, pc, #600	; (adr r3, 800b648 <atan+0x2b0>)
 800b3ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3f2:	ee10 0a10 	vmov	r0, s0
 800b3f6:	4629      	mov	r1, r5
 800b3f8:	f7f4 feec 	bl	80001d4 <__adddf3>
 800b3fc:	4baf      	ldr	r3, [pc, #700]	; (800b6bc <atan+0x324>)
 800b3fe:	2200      	movs	r2, #0
 800b400:	f7f5 fb2e 	bl	8000a60 <__aeabi_dcmpgt>
 800b404:	2800      	cmp	r0, #0
 800b406:	d1e6      	bne.n	800b3d6 <atan+0x3e>
 800b408:	f04f 3aff 	mov.w	sl, #4294967295
 800b40c:	e02b      	b.n	800b466 <atan+0xce>
 800b40e:	f000 f963 	bl	800b6d8 <fabs>
 800b412:	4bab      	ldr	r3, [pc, #684]	; (800b6c0 <atan+0x328>)
 800b414:	429e      	cmp	r6, r3
 800b416:	ec55 4b10 	vmov	r4, r5, d0
 800b41a:	f300 80bf 	bgt.w	800b59c <atan+0x204>
 800b41e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800b422:	429e      	cmp	r6, r3
 800b424:	f300 80a0 	bgt.w	800b568 <atan+0x1d0>
 800b428:	ee10 2a10 	vmov	r2, s0
 800b42c:	ee10 0a10 	vmov	r0, s0
 800b430:	462b      	mov	r3, r5
 800b432:	4629      	mov	r1, r5
 800b434:	f7f4 fece 	bl	80001d4 <__adddf3>
 800b438:	4ba0      	ldr	r3, [pc, #640]	; (800b6bc <atan+0x324>)
 800b43a:	2200      	movs	r2, #0
 800b43c:	f7f4 fec8 	bl	80001d0 <__aeabi_dsub>
 800b440:	2200      	movs	r2, #0
 800b442:	4606      	mov	r6, r0
 800b444:	460f      	mov	r7, r1
 800b446:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b44a:	4620      	mov	r0, r4
 800b44c:	4629      	mov	r1, r5
 800b44e:	f7f4 fec1 	bl	80001d4 <__adddf3>
 800b452:	4602      	mov	r2, r0
 800b454:	460b      	mov	r3, r1
 800b456:	4630      	mov	r0, r6
 800b458:	4639      	mov	r1, r7
 800b45a:	f7f5 f99b 	bl	8000794 <__aeabi_ddiv>
 800b45e:	f04f 0a00 	mov.w	sl, #0
 800b462:	4604      	mov	r4, r0
 800b464:	460d      	mov	r5, r1
 800b466:	4622      	mov	r2, r4
 800b468:	462b      	mov	r3, r5
 800b46a:	4620      	mov	r0, r4
 800b46c:	4629      	mov	r1, r5
 800b46e:	f7f5 f867 	bl	8000540 <__aeabi_dmul>
 800b472:	4602      	mov	r2, r0
 800b474:	460b      	mov	r3, r1
 800b476:	4680      	mov	r8, r0
 800b478:	4689      	mov	r9, r1
 800b47a:	f7f5 f861 	bl	8000540 <__aeabi_dmul>
 800b47e:	a374      	add	r3, pc, #464	; (adr r3, 800b650 <atan+0x2b8>)
 800b480:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b484:	4606      	mov	r6, r0
 800b486:	460f      	mov	r7, r1
 800b488:	f7f5 f85a 	bl	8000540 <__aeabi_dmul>
 800b48c:	a372      	add	r3, pc, #456	; (adr r3, 800b658 <atan+0x2c0>)
 800b48e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b492:	f7f4 fe9f 	bl	80001d4 <__adddf3>
 800b496:	4632      	mov	r2, r6
 800b498:	463b      	mov	r3, r7
 800b49a:	f7f5 f851 	bl	8000540 <__aeabi_dmul>
 800b49e:	a370      	add	r3, pc, #448	; (adr r3, 800b660 <atan+0x2c8>)
 800b4a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4a4:	f7f4 fe96 	bl	80001d4 <__adddf3>
 800b4a8:	4632      	mov	r2, r6
 800b4aa:	463b      	mov	r3, r7
 800b4ac:	f7f5 f848 	bl	8000540 <__aeabi_dmul>
 800b4b0:	a36d      	add	r3, pc, #436	; (adr r3, 800b668 <atan+0x2d0>)
 800b4b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4b6:	f7f4 fe8d 	bl	80001d4 <__adddf3>
 800b4ba:	4632      	mov	r2, r6
 800b4bc:	463b      	mov	r3, r7
 800b4be:	f7f5 f83f 	bl	8000540 <__aeabi_dmul>
 800b4c2:	a36b      	add	r3, pc, #428	; (adr r3, 800b670 <atan+0x2d8>)
 800b4c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4c8:	f7f4 fe84 	bl	80001d4 <__adddf3>
 800b4cc:	4632      	mov	r2, r6
 800b4ce:	463b      	mov	r3, r7
 800b4d0:	f7f5 f836 	bl	8000540 <__aeabi_dmul>
 800b4d4:	a368      	add	r3, pc, #416	; (adr r3, 800b678 <atan+0x2e0>)
 800b4d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4da:	f7f4 fe7b 	bl	80001d4 <__adddf3>
 800b4de:	4642      	mov	r2, r8
 800b4e0:	464b      	mov	r3, r9
 800b4e2:	f7f5 f82d 	bl	8000540 <__aeabi_dmul>
 800b4e6:	a366      	add	r3, pc, #408	; (adr r3, 800b680 <atan+0x2e8>)
 800b4e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4ec:	4680      	mov	r8, r0
 800b4ee:	4689      	mov	r9, r1
 800b4f0:	4630      	mov	r0, r6
 800b4f2:	4639      	mov	r1, r7
 800b4f4:	f7f5 f824 	bl	8000540 <__aeabi_dmul>
 800b4f8:	a363      	add	r3, pc, #396	; (adr r3, 800b688 <atan+0x2f0>)
 800b4fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4fe:	f7f4 fe67 	bl	80001d0 <__aeabi_dsub>
 800b502:	4632      	mov	r2, r6
 800b504:	463b      	mov	r3, r7
 800b506:	f7f5 f81b 	bl	8000540 <__aeabi_dmul>
 800b50a:	a361      	add	r3, pc, #388	; (adr r3, 800b690 <atan+0x2f8>)
 800b50c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b510:	f7f4 fe5e 	bl	80001d0 <__aeabi_dsub>
 800b514:	4632      	mov	r2, r6
 800b516:	463b      	mov	r3, r7
 800b518:	f7f5 f812 	bl	8000540 <__aeabi_dmul>
 800b51c:	a35e      	add	r3, pc, #376	; (adr r3, 800b698 <atan+0x300>)
 800b51e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b522:	f7f4 fe55 	bl	80001d0 <__aeabi_dsub>
 800b526:	4632      	mov	r2, r6
 800b528:	463b      	mov	r3, r7
 800b52a:	f7f5 f809 	bl	8000540 <__aeabi_dmul>
 800b52e:	a35c      	add	r3, pc, #368	; (adr r3, 800b6a0 <atan+0x308>)
 800b530:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b534:	f7f4 fe4c 	bl	80001d0 <__aeabi_dsub>
 800b538:	4632      	mov	r2, r6
 800b53a:	463b      	mov	r3, r7
 800b53c:	f7f5 f800 	bl	8000540 <__aeabi_dmul>
 800b540:	4602      	mov	r2, r0
 800b542:	460b      	mov	r3, r1
 800b544:	4640      	mov	r0, r8
 800b546:	4649      	mov	r1, r9
 800b548:	f7f4 fe44 	bl	80001d4 <__adddf3>
 800b54c:	4622      	mov	r2, r4
 800b54e:	462b      	mov	r3, r5
 800b550:	f7f4 fff6 	bl	8000540 <__aeabi_dmul>
 800b554:	f1ba 3fff 	cmp.w	sl, #4294967295
 800b558:	4602      	mov	r2, r0
 800b55a:	460b      	mov	r3, r1
 800b55c:	d14b      	bne.n	800b5f6 <atan+0x25e>
 800b55e:	4620      	mov	r0, r4
 800b560:	4629      	mov	r1, r5
 800b562:	f7f4 fe35 	bl	80001d0 <__aeabi_dsub>
 800b566:	e72c      	b.n	800b3c2 <atan+0x2a>
 800b568:	ee10 0a10 	vmov	r0, s0
 800b56c:	4b53      	ldr	r3, [pc, #332]	; (800b6bc <atan+0x324>)
 800b56e:	2200      	movs	r2, #0
 800b570:	4629      	mov	r1, r5
 800b572:	f7f4 fe2d 	bl	80001d0 <__aeabi_dsub>
 800b576:	4b51      	ldr	r3, [pc, #324]	; (800b6bc <atan+0x324>)
 800b578:	4606      	mov	r6, r0
 800b57a:	460f      	mov	r7, r1
 800b57c:	2200      	movs	r2, #0
 800b57e:	4620      	mov	r0, r4
 800b580:	4629      	mov	r1, r5
 800b582:	f7f4 fe27 	bl	80001d4 <__adddf3>
 800b586:	4602      	mov	r2, r0
 800b588:	460b      	mov	r3, r1
 800b58a:	4630      	mov	r0, r6
 800b58c:	4639      	mov	r1, r7
 800b58e:	f7f5 f901 	bl	8000794 <__aeabi_ddiv>
 800b592:	f04f 0a01 	mov.w	sl, #1
 800b596:	4604      	mov	r4, r0
 800b598:	460d      	mov	r5, r1
 800b59a:	e764      	b.n	800b466 <atan+0xce>
 800b59c:	4b49      	ldr	r3, [pc, #292]	; (800b6c4 <atan+0x32c>)
 800b59e:	429e      	cmp	r6, r3
 800b5a0:	da1d      	bge.n	800b5de <atan+0x246>
 800b5a2:	ee10 0a10 	vmov	r0, s0
 800b5a6:	4b48      	ldr	r3, [pc, #288]	; (800b6c8 <atan+0x330>)
 800b5a8:	2200      	movs	r2, #0
 800b5aa:	4629      	mov	r1, r5
 800b5ac:	f7f4 fe10 	bl	80001d0 <__aeabi_dsub>
 800b5b0:	4b45      	ldr	r3, [pc, #276]	; (800b6c8 <atan+0x330>)
 800b5b2:	4606      	mov	r6, r0
 800b5b4:	460f      	mov	r7, r1
 800b5b6:	2200      	movs	r2, #0
 800b5b8:	4620      	mov	r0, r4
 800b5ba:	4629      	mov	r1, r5
 800b5bc:	f7f4 ffc0 	bl	8000540 <__aeabi_dmul>
 800b5c0:	4b3e      	ldr	r3, [pc, #248]	; (800b6bc <atan+0x324>)
 800b5c2:	2200      	movs	r2, #0
 800b5c4:	f7f4 fe06 	bl	80001d4 <__adddf3>
 800b5c8:	4602      	mov	r2, r0
 800b5ca:	460b      	mov	r3, r1
 800b5cc:	4630      	mov	r0, r6
 800b5ce:	4639      	mov	r1, r7
 800b5d0:	f7f5 f8e0 	bl	8000794 <__aeabi_ddiv>
 800b5d4:	f04f 0a02 	mov.w	sl, #2
 800b5d8:	4604      	mov	r4, r0
 800b5da:	460d      	mov	r5, r1
 800b5dc:	e743      	b.n	800b466 <atan+0xce>
 800b5de:	462b      	mov	r3, r5
 800b5e0:	ee10 2a10 	vmov	r2, s0
 800b5e4:	4939      	ldr	r1, [pc, #228]	; (800b6cc <atan+0x334>)
 800b5e6:	2000      	movs	r0, #0
 800b5e8:	f7f5 f8d4 	bl	8000794 <__aeabi_ddiv>
 800b5ec:	f04f 0a03 	mov.w	sl, #3
 800b5f0:	4604      	mov	r4, r0
 800b5f2:	460d      	mov	r5, r1
 800b5f4:	e737      	b.n	800b466 <atan+0xce>
 800b5f6:	4b36      	ldr	r3, [pc, #216]	; (800b6d0 <atan+0x338>)
 800b5f8:	4e36      	ldr	r6, [pc, #216]	; (800b6d4 <atan+0x33c>)
 800b5fa:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800b5fe:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 800b602:	e9da 2300 	ldrd	r2, r3, [sl]
 800b606:	f7f4 fde3 	bl	80001d0 <__aeabi_dsub>
 800b60a:	4622      	mov	r2, r4
 800b60c:	462b      	mov	r3, r5
 800b60e:	f7f4 fddf 	bl	80001d0 <__aeabi_dsub>
 800b612:	4602      	mov	r2, r0
 800b614:	460b      	mov	r3, r1
 800b616:	e9d6 0100 	ldrd	r0, r1, [r6]
 800b61a:	f7f4 fdd9 	bl	80001d0 <__aeabi_dsub>
 800b61e:	f1bb 0f00 	cmp.w	fp, #0
 800b622:	4604      	mov	r4, r0
 800b624:	460d      	mov	r5, r1
 800b626:	f6bf aed6 	bge.w	800b3d6 <atan+0x3e>
 800b62a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b62e:	461d      	mov	r5, r3
 800b630:	e6d1      	b.n	800b3d6 <atan+0x3e>
 800b632:	a51d      	add	r5, pc, #116	; (adr r5, 800b6a8 <atan+0x310>)
 800b634:	e9d5 4500 	ldrd	r4, r5, [r5]
 800b638:	e6cd      	b.n	800b3d6 <atan+0x3e>
 800b63a:	bf00      	nop
 800b63c:	f3af 8000 	nop.w
 800b640:	54442d18 	.word	0x54442d18
 800b644:	bff921fb 	.word	0xbff921fb
 800b648:	8800759c 	.word	0x8800759c
 800b64c:	7e37e43c 	.word	0x7e37e43c
 800b650:	e322da11 	.word	0xe322da11
 800b654:	3f90ad3a 	.word	0x3f90ad3a
 800b658:	24760deb 	.word	0x24760deb
 800b65c:	3fa97b4b 	.word	0x3fa97b4b
 800b660:	a0d03d51 	.word	0xa0d03d51
 800b664:	3fb10d66 	.word	0x3fb10d66
 800b668:	c54c206e 	.word	0xc54c206e
 800b66c:	3fb745cd 	.word	0x3fb745cd
 800b670:	920083ff 	.word	0x920083ff
 800b674:	3fc24924 	.word	0x3fc24924
 800b678:	5555550d 	.word	0x5555550d
 800b67c:	3fd55555 	.word	0x3fd55555
 800b680:	2c6a6c2f 	.word	0x2c6a6c2f
 800b684:	bfa2b444 	.word	0xbfa2b444
 800b688:	52defd9a 	.word	0x52defd9a
 800b68c:	3fadde2d 	.word	0x3fadde2d
 800b690:	af749a6d 	.word	0xaf749a6d
 800b694:	3fb3b0f2 	.word	0x3fb3b0f2
 800b698:	fe231671 	.word	0xfe231671
 800b69c:	3fbc71c6 	.word	0x3fbc71c6
 800b6a0:	9998ebc4 	.word	0x9998ebc4
 800b6a4:	3fc99999 	.word	0x3fc99999
 800b6a8:	54442d18 	.word	0x54442d18
 800b6ac:	3ff921fb 	.word	0x3ff921fb
 800b6b0:	440fffff 	.word	0x440fffff
 800b6b4:	7ff00000 	.word	0x7ff00000
 800b6b8:	3fdbffff 	.word	0x3fdbffff
 800b6bc:	3ff00000 	.word	0x3ff00000
 800b6c0:	3ff2ffff 	.word	0x3ff2ffff
 800b6c4:	40038000 	.word	0x40038000
 800b6c8:	3ff80000 	.word	0x3ff80000
 800b6cc:	bff00000 	.word	0xbff00000
 800b6d0:	0800bc40 	.word	0x0800bc40
 800b6d4:	0800bc20 	.word	0x0800bc20

0800b6d8 <fabs>:
 800b6d8:	ec51 0b10 	vmov	r0, r1, d0
 800b6dc:	ee10 2a10 	vmov	r2, s0
 800b6e0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b6e4:	ec43 2b10 	vmov	d0, r2, r3
 800b6e8:	4770      	bx	lr
 800b6ea:	0000      	movs	r0, r0
 800b6ec:	0000      	movs	r0, r0
	...

0800b6f0 <floor>:
 800b6f0:	ec51 0b10 	vmov	r0, r1, d0
 800b6f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b6f8:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800b6fc:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800b700:	2e13      	cmp	r6, #19
 800b702:	ee10 5a10 	vmov	r5, s0
 800b706:	ee10 8a10 	vmov	r8, s0
 800b70a:	460c      	mov	r4, r1
 800b70c:	dc32      	bgt.n	800b774 <floor+0x84>
 800b70e:	2e00      	cmp	r6, #0
 800b710:	da14      	bge.n	800b73c <floor+0x4c>
 800b712:	a333      	add	r3, pc, #204	; (adr r3, 800b7e0 <floor+0xf0>)
 800b714:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b718:	f7f4 fd5c 	bl	80001d4 <__adddf3>
 800b71c:	2200      	movs	r2, #0
 800b71e:	2300      	movs	r3, #0
 800b720:	f7f5 f99e 	bl	8000a60 <__aeabi_dcmpgt>
 800b724:	b138      	cbz	r0, 800b736 <floor+0x46>
 800b726:	2c00      	cmp	r4, #0
 800b728:	da57      	bge.n	800b7da <floor+0xea>
 800b72a:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800b72e:	431d      	orrs	r5, r3
 800b730:	d001      	beq.n	800b736 <floor+0x46>
 800b732:	4c2d      	ldr	r4, [pc, #180]	; (800b7e8 <floor+0xf8>)
 800b734:	2500      	movs	r5, #0
 800b736:	4621      	mov	r1, r4
 800b738:	4628      	mov	r0, r5
 800b73a:	e025      	b.n	800b788 <floor+0x98>
 800b73c:	4f2b      	ldr	r7, [pc, #172]	; (800b7ec <floor+0xfc>)
 800b73e:	4137      	asrs	r7, r6
 800b740:	ea01 0307 	and.w	r3, r1, r7
 800b744:	4303      	orrs	r3, r0
 800b746:	d01f      	beq.n	800b788 <floor+0x98>
 800b748:	a325      	add	r3, pc, #148	; (adr r3, 800b7e0 <floor+0xf0>)
 800b74a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b74e:	f7f4 fd41 	bl	80001d4 <__adddf3>
 800b752:	2200      	movs	r2, #0
 800b754:	2300      	movs	r3, #0
 800b756:	f7f5 f983 	bl	8000a60 <__aeabi_dcmpgt>
 800b75a:	2800      	cmp	r0, #0
 800b75c:	d0eb      	beq.n	800b736 <floor+0x46>
 800b75e:	2c00      	cmp	r4, #0
 800b760:	bfbe      	ittt	lt
 800b762:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800b766:	fa43 f606 	asrlt.w	r6, r3, r6
 800b76a:	19a4      	addlt	r4, r4, r6
 800b76c:	ea24 0407 	bic.w	r4, r4, r7
 800b770:	2500      	movs	r5, #0
 800b772:	e7e0      	b.n	800b736 <floor+0x46>
 800b774:	2e33      	cmp	r6, #51	; 0x33
 800b776:	dd0b      	ble.n	800b790 <floor+0xa0>
 800b778:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800b77c:	d104      	bne.n	800b788 <floor+0x98>
 800b77e:	ee10 2a10 	vmov	r2, s0
 800b782:	460b      	mov	r3, r1
 800b784:	f7f4 fd26 	bl	80001d4 <__adddf3>
 800b788:	ec41 0b10 	vmov	d0, r0, r1
 800b78c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b790:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800b794:	f04f 33ff 	mov.w	r3, #4294967295
 800b798:	fa23 f707 	lsr.w	r7, r3, r7
 800b79c:	4207      	tst	r7, r0
 800b79e:	d0f3      	beq.n	800b788 <floor+0x98>
 800b7a0:	a30f      	add	r3, pc, #60	; (adr r3, 800b7e0 <floor+0xf0>)
 800b7a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7a6:	f7f4 fd15 	bl	80001d4 <__adddf3>
 800b7aa:	2200      	movs	r2, #0
 800b7ac:	2300      	movs	r3, #0
 800b7ae:	f7f5 f957 	bl	8000a60 <__aeabi_dcmpgt>
 800b7b2:	2800      	cmp	r0, #0
 800b7b4:	d0bf      	beq.n	800b736 <floor+0x46>
 800b7b6:	2c00      	cmp	r4, #0
 800b7b8:	da02      	bge.n	800b7c0 <floor+0xd0>
 800b7ba:	2e14      	cmp	r6, #20
 800b7bc:	d103      	bne.n	800b7c6 <floor+0xd6>
 800b7be:	3401      	adds	r4, #1
 800b7c0:	ea25 0507 	bic.w	r5, r5, r7
 800b7c4:	e7b7      	b.n	800b736 <floor+0x46>
 800b7c6:	2301      	movs	r3, #1
 800b7c8:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800b7cc:	fa03 f606 	lsl.w	r6, r3, r6
 800b7d0:	4435      	add	r5, r6
 800b7d2:	4545      	cmp	r5, r8
 800b7d4:	bf38      	it	cc
 800b7d6:	18e4      	addcc	r4, r4, r3
 800b7d8:	e7f2      	b.n	800b7c0 <floor+0xd0>
 800b7da:	2500      	movs	r5, #0
 800b7dc:	462c      	mov	r4, r5
 800b7de:	e7aa      	b.n	800b736 <floor+0x46>
 800b7e0:	8800759c 	.word	0x8800759c
 800b7e4:	7e37e43c 	.word	0x7e37e43c
 800b7e8:	bff00000 	.word	0xbff00000
 800b7ec:	000fffff 	.word	0x000fffff

0800b7f0 <scalbn>:
 800b7f0:	b570      	push	{r4, r5, r6, lr}
 800b7f2:	ec55 4b10 	vmov	r4, r5, d0
 800b7f6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800b7fa:	4606      	mov	r6, r0
 800b7fc:	462b      	mov	r3, r5
 800b7fe:	b99a      	cbnz	r2, 800b828 <scalbn+0x38>
 800b800:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800b804:	4323      	orrs	r3, r4
 800b806:	d036      	beq.n	800b876 <scalbn+0x86>
 800b808:	4b39      	ldr	r3, [pc, #228]	; (800b8f0 <scalbn+0x100>)
 800b80a:	4629      	mov	r1, r5
 800b80c:	ee10 0a10 	vmov	r0, s0
 800b810:	2200      	movs	r2, #0
 800b812:	f7f4 fe95 	bl	8000540 <__aeabi_dmul>
 800b816:	4b37      	ldr	r3, [pc, #220]	; (800b8f4 <scalbn+0x104>)
 800b818:	429e      	cmp	r6, r3
 800b81a:	4604      	mov	r4, r0
 800b81c:	460d      	mov	r5, r1
 800b81e:	da10      	bge.n	800b842 <scalbn+0x52>
 800b820:	a32b      	add	r3, pc, #172	; (adr r3, 800b8d0 <scalbn+0xe0>)
 800b822:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b826:	e03a      	b.n	800b89e <scalbn+0xae>
 800b828:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800b82c:	428a      	cmp	r2, r1
 800b82e:	d10c      	bne.n	800b84a <scalbn+0x5a>
 800b830:	ee10 2a10 	vmov	r2, s0
 800b834:	4620      	mov	r0, r4
 800b836:	4629      	mov	r1, r5
 800b838:	f7f4 fccc 	bl	80001d4 <__adddf3>
 800b83c:	4604      	mov	r4, r0
 800b83e:	460d      	mov	r5, r1
 800b840:	e019      	b.n	800b876 <scalbn+0x86>
 800b842:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800b846:	460b      	mov	r3, r1
 800b848:	3a36      	subs	r2, #54	; 0x36
 800b84a:	4432      	add	r2, r6
 800b84c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800b850:	428a      	cmp	r2, r1
 800b852:	dd08      	ble.n	800b866 <scalbn+0x76>
 800b854:	2d00      	cmp	r5, #0
 800b856:	a120      	add	r1, pc, #128	; (adr r1, 800b8d8 <scalbn+0xe8>)
 800b858:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b85c:	da1c      	bge.n	800b898 <scalbn+0xa8>
 800b85e:	a120      	add	r1, pc, #128	; (adr r1, 800b8e0 <scalbn+0xf0>)
 800b860:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b864:	e018      	b.n	800b898 <scalbn+0xa8>
 800b866:	2a00      	cmp	r2, #0
 800b868:	dd08      	ble.n	800b87c <scalbn+0x8c>
 800b86a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800b86e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800b872:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800b876:	ec45 4b10 	vmov	d0, r4, r5
 800b87a:	bd70      	pop	{r4, r5, r6, pc}
 800b87c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800b880:	da19      	bge.n	800b8b6 <scalbn+0xc6>
 800b882:	f24c 3350 	movw	r3, #50000	; 0xc350
 800b886:	429e      	cmp	r6, r3
 800b888:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800b88c:	dd0a      	ble.n	800b8a4 <scalbn+0xb4>
 800b88e:	a112      	add	r1, pc, #72	; (adr r1, 800b8d8 <scalbn+0xe8>)
 800b890:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b894:	2b00      	cmp	r3, #0
 800b896:	d1e2      	bne.n	800b85e <scalbn+0x6e>
 800b898:	a30f      	add	r3, pc, #60	; (adr r3, 800b8d8 <scalbn+0xe8>)
 800b89a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b89e:	f7f4 fe4f 	bl	8000540 <__aeabi_dmul>
 800b8a2:	e7cb      	b.n	800b83c <scalbn+0x4c>
 800b8a4:	a10a      	add	r1, pc, #40	; (adr r1, 800b8d0 <scalbn+0xe0>)
 800b8a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b8aa:	2b00      	cmp	r3, #0
 800b8ac:	d0b8      	beq.n	800b820 <scalbn+0x30>
 800b8ae:	a10e      	add	r1, pc, #56	; (adr r1, 800b8e8 <scalbn+0xf8>)
 800b8b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b8b4:	e7b4      	b.n	800b820 <scalbn+0x30>
 800b8b6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800b8ba:	3236      	adds	r2, #54	; 0x36
 800b8bc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800b8c0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800b8c4:	4620      	mov	r0, r4
 800b8c6:	4b0c      	ldr	r3, [pc, #48]	; (800b8f8 <scalbn+0x108>)
 800b8c8:	2200      	movs	r2, #0
 800b8ca:	e7e8      	b.n	800b89e <scalbn+0xae>
 800b8cc:	f3af 8000 	nop.w
 800b8d0:	c2f8f359 	.word	0xc2f8f359
 800b8d4:	01a56e1f 	.word	0x01a56e1f
 800b8d8:	8800759c 	.word	0x8800759c
 800b8dc:	7e37e43c 	.word	0x7e37e43c
 800b8e0:	8800759c 	.word	0x8800759c
 800b8e4:	fe37e43c 	.word	0xfe37e43c
 800b8e8:	c2f8f359 	.word	0xc2f8f359
 800b8ec:	81a56e1f 	.word	0x81a56e1f
 800b8f0:	43500000 	.word	0x43500000
 800b8f4:	ffff3cb0 	.word	0xffff3cb0
 800b8f8:	3c900000 	.word	0x3c900000

0800b8fc <_init>:
 800b8fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b8fe:	bf00      	nop
 800b900:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b902:	bc08      	pop	{r3}
 800b904:	469e      	mov	lr, r3
 800b906:	4770      	bx	lr

0800b908 <_fini>:
 800b908:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b90a:	bf00      	nop
 800b90c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b90e:	bc08      	pop	{r3}
 800b910:	469e      	mov	lr, r3
 800b912:	4770      	bx	lr
